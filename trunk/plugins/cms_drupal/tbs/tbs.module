<?php
// $Id$

/*
1) Home›Administer›Site building›Modules => enable "Dynamic pages with TinyButStrong"
2) Home›Administer›Site configuration›Input Formats => Add 
*/

function tbs_help($path, $arg) {
// take care: this function is also called for any other module help	
  switch ($path) { 
  case 'admin/help#tbs': // Called by the main inline help Home›Administer›Help.
    return '<p>This is the inline help for TinyButStrong.</p><a href="http://www.tinybutstrong.com">TinyButStrong web site</a></br>';
  case 'admin/help/tbs': // (also display in header of the main help)
    return 'Other help for TinyButStrong';
  }
}

/* Implements hook_filter()
	http://api.drupal.org/api/drupal/developer--hooks--core.php/function/hook_filter/6
	http://api.drupal.org/api/function/hook_filter
*/
function tbs_filter($op, $delta = 0, $format = -1, $text = '', $cache_id  = 0) {
	switch ($op) {
	case 'list':
		return array(0=> t('Dynamic content with TinyButStrong')); // Title displayed in the "Add input format" screen
	case 'no cache':
		return true; // avoid cache for this filter => the node must be dynamic, this is the main goal
	case 'description':
		return "Activate TBS tags that produce dynamic content automatically or trought a custom script."; // displayed in "Home›Administer›Site configuration›Input Formats"
	case 'prepare':
		return $text;
	case 'process':
		tbs_merge_node($text);
		return $text;
	case 'settings':
		// displayed in "Home›Administer›Site configuration›Input formats›TBS›Configure"
		$form['tbs_filter'] = array('#type' => 'fieldset', '#title' => t('Dynamic content with TinyButStrong'), '#value' => t('You can define a global list of smileys on the !page.', array('!page' => l(t('smileys settings page'), 'admin/settings/tbs'))));
		return $form;
	}
}

function tbs_merge_node(&$text) {

	// Search for plugin tags inside the article. There is a loop because the article can support several mergings.
	$tag_beg = '{tbs}';
	$tag_end = '{/tbs}';
	$p1 = strpos($text, $tag_beg);
	if ($p1===false) return; // If no TBS tag, then the node doesn't need the plugin.

	include_once('tinybutstrong_comm.php');
	include_once('tinybutstrong_spec.php');

	$TBS = false;

	// Drupal: The node Id cannot be retreive in the context of a filter process because the filter can be applied on a combination of nodes.
	//if (!tbs_plugin_CheckArticle($NodeId)) return ''; // Exit the plug if the node is not allowed
	
	tbs_plugin_InitTBS($TBS, $text);
	tbs_plugin_SqlDbInit($TBS); // retrieve SQL information and set them as custom property of $TBS

	// Wrappers for developpers
	// $TBS->DrupalDb = $TBS->_CmsDbSrc;

	$tag_lst = tbs_plugin_Loop($TBS, $p1, $tag_beg, $tag_end); // Search for all TBS tags and process them.

	$text = tbs_plugin_EndTBS($TBS); // ends the merge.

	unset($TBS);
	return true;

}

// ------------------------

// Implements hook_menu() http://api.drupal.org/api/function/hook_menu
// The menu is added in both "Home›Administer›Site configuration" and "Home›Administer›Site building›Administration by module"
function tbs_menu() {
	$items = array();
	$items['admin/settings/tbs'] = array(
		'title' => 'TinyButStrong',
		'description' => 'Settings for the module: Dynamic Content with TinyButStrong Template Engine',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('tbs_settings'),
		'access arguments' => array('access administration pages'),
		'type' => MENU_NORMAL_ITEM,
	);
	return $items;
}

// called defined by the hook onthisdate_menu().
// we need to clear the cache to see the new configuration item
// Administer >> Site Configuration >> Performance
function tbs_settings() {
	
  $form = array();

  // default values for the HTML form are set at the end of this function

  $form['tbs_option_ChrBeg'] = array(
    '#title' => t('Beginning of TBS tags'),
    '#description' => t("Default value is '['. TBS tags are different from plugin tags which are defined with {tbs} and {/tbs}."),
    '#default_value' => '[',
    '#type' => 'textfield',
    '#size' => 2,
    '#maxlength' => 10,
    '#required' => true,
  );
  $form['tbs_option_ChrEnd'] = array(
    '#title' => t('Beginning of TBS tags'),
    '#description' => t("Default value is '['. TBS tags are different from plugin tags which are defined with {tbs} and {/tbs}."),
    '#default_value' => ']',
    '#type' => 'textfield',
    '#size' => 2,
    '#maxlength' => 10,
    '#required' => true,
  );
  $form['tbs_option_VarPrefix'] = array(
    '#title' => t('Allowed prefix for PHP global variables'),
    '#description' => t("Default value is empty ('') which means all variables. You can limit the usage of PHP global variables in articles by setting a prefix for allowed variables."),
    '#default_value' => '',
    '#type' => 'textfield',
    '#size' => 10,
    '#required' => false,
  );
  $form['tbs_option_MergeBlock'] = array(
    '#title' => t('Direct MergeBlock'),
    '#description' => t("Allow plugin tags such as {tbs}mergeblock=...,sql=...,db=...{/tbs}."),
    '#default_value' => 'select',
    '#type' => 'select',
    '#options' => array('no'=>t('Forbidden'), 'select'=>t('Only SELECT queries'), 'all'=>t('All query types and stored procedures')),
    '#required' => true,
  );
  $form['tbs_option_Script'] = array(
    '#title' => t('External scripts'),
    '#description' => t("Allow plugin tags such as {tbs}script=...{/tbs}."),
    '#default_value' => 'loc',
    '#type' => 'select',
    '#options' => array('no'=>t('Forbidden'), 'loc'=>t('Only from the Script location'), 'all'=>t('All external scripts')),
    '#required' => true,
  );
  $form['tbs_option_ScriptPath'] = array(
    '#title' => t('Script location'),
    '#description' => t("This is the path (relative or absolute) where scripts specified in plugin tags can be stored."),
    '#default_value' => '',
    '#type' => 'textfield',
    '#size' => 60,
    '#required' => false,
  );
	// retrieve saved values for the HTML form
	$opt_lst = array_keys($form);
	foreach ($opt_lst as $opt) {
		$form[$opt]['#default_value'] = variable_get($opt, $form[$opt]['#default_value']);
	}

  return system_settings_form($form);
  
}