<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>TBS Manuel</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<style type="text/css">
<!--
.pagebreak {
	page-break-before:always;
}
.tbsname {
	font-size: 12px;
	font-weight: bolder;
	color: #4D3A81;
}
.norm {
	margin-left: 30px;
	padding: 5px;
	border: 1px solid #999999;
	margin-top: 12px;
	margin-bottom: 12px;
}
.decal {
	margin-left: 20px;
	padding: 2px;
	margin-top: 3px;
}
h1 { /* title-1 */
	margin-top: 8px;
	margin-bottom: 8px;
	font-size: 16px;
}
h2 { /* title-3 */
	font-weight:normal;
	font-size: 16px;
	text-decoration: underline;
	background-color: #6699CC;
	margin-top: 20px;
	margin-bottom: 20px;
}
h3 { /* title-2 */
	margin-top: 20px;
	margin-bottom: 20px;
	font-weight:normal;
	font-size: 16px;
	text-decoration: underline;
}
.title-1b {
	text-decoration: underline;
}
.title-1c {
	font-weight: bold;
}
.txt-small {
	font-size: 10px;
}
.txt-code {
	font-family: "Courier New", Courier, mono;
	font-size: 12px;
}
.txt-tiny {
	font-size: 9px;
}
.asciiart {
	font-family: "Courier New", Courier, mono;
	font-size: 8px;
	font-weight: bold;
	color: #0066CC;
}
table {
	font-family: Verdana, Arial, Helvetica, sans-serif;
	font-size: 12px;
}
body {
	font-family: Verdana, Arial, Helvetica, sans-serif;
	font-size: 12px;
}
.opt-name {
	color: #990000;
}
a.opt-name {
	color: #990000;
	text-decoration:none;
}
a.opt-name:hover {
	color: #990000;
	text-decoration:underline;
}
.opt-value {
	color: #000099;
}
.opt-html {
	color: #006600;
}
.opt-type {
	font-style: italic;
	color: #0033CC;
}
.border-0 {
	border: 1px solid #999999;
}
.border-1 {
	border: 1px solid #FF3399;
}
.border-2 {
	border: 1px solid #336699;
}
.border-3 {
	border: 1.5px solid #CC6600;
}
.border-sep {
	border-bottom-width: 1px;
	border-bottom-style: solid;
	border-bottom-color: #999999;
}
.versioning {
	background-color: #EAEAEA;
}
.blockzone {
	border: 1px dotted #666666;
	padding: 2px;
	margin: 2px;
}
.blocksep {
	border-left-width: 1px;
	border-left-style: dotted;
	border-left-color: #666666;
}
.contextual {
	padding: 1px;
	border: 1px dotted #6699CC;
}
.note {
	background-color: #D9FFD9;
	border: thin solid #00EC9F;
	padding: 2px;
	margin-top: 3px;
	margin-left: 20px;
}
.todo {
	background-color: #FF6633;
}
-->
</style>
</head>
<body bgcolor="#FFFFFF">
<div id="main-body">
  <table width="100%" border="0" cellspacing="0" cellpadding="0">
    <tr>
      <td width="33%" align="left" valign="top"><table width="180" border="0" cellspacing="0" cellpadding="0">
          <tr class="txt-tiny">
            <td width="50">Site :</td>
            <td><a href="http://www.tinybutstrong.com/fr" target="_top">www.tinybutstrong.com</a></td>
          </tr>
          <tr class="txt-tiny">
            <td>Auteur :</td>
            <td><a href="http://www.tinybutstrong.com/onlyyou.html">skrol29</a><a href="mailto:skrol29@freesurf.fr"></a></td>
          </tr>
          <tr class="txt-tiny">
            <td>Date :</td>
            <td>2011-03-18</td>
          </tr>
        </table></td>
      <td width="34%" align="center"><div class="asciiart">*.^.*.^.*.^.*.^.*.^.*.^.*.^.*.^.*.^.*.^.*.^.*.^.*.^.*.^.*</div>
        <h1>Documentation pour TinyButStrong</h1>
        <div class="txt-tiny">version 3.7</div>
        <div class="asciiart">*.^.*.^.*.^.*.^.*.^.*.^.*.^.*.^.*.^.*.^.*.^.*.^.*.^.*.^.*</div></td>
      <td width="33%" align="right" valign="top" class="txt-small">&nbsp;</td>
    </tr>
    <tr>
      <td width="33%" align="left" valign="top"><br></td>
      <td><div align="center">Template Engine pour Pro et débutants<br>
          pour PHP 5<br>
        </div></td>
      <td align="right" valign="top" class="txt-small">&nbsp;</td>
    </tr>
  </table>
  <br>
  <div class="title-1c"><strong>Plan de ce fichier d'aide :</strong></div>
  <div class="norm">
    <table border="0" cellspacing="0">
      <tr class="title-1c">
        <td>Rubrique</td>
        <td>Description</td>
      </tr>
      <tr>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td><a href="#introduction" class="title-1c">• Présentation</a></td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#principles">Principes de base</a></td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#installation">Installation</a></td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#examples">Mini exemples</a></td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td><a href="#php_side" class="title-1c">• Coté PHP</a></td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp;&nbsp;• Pour commencer</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="#php_instanciate">crée un nouvel objet TBS</a></td>
        <td> pour travailler avec des modèles</td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="#php_loadtemplate"><span class="txt-small">méthode</span> LoadTemplate()</a></td>
        <td>charge le contenu d'un modèle à partir d'un fichier </td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="#php_mergeblock"><span class="txt-small">méthode</span> MergeBlock()</a></td>
        <td>fusionne une partie du modèle avec une source de données</td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="#php_show"><span class="txt-small">méthode</span> Show()</a></td>
        <td>traitements automatiques et affichage du résultat</td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp;&nbsp;• Avancé</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="#php_getblocksource"><span class="txt-small">méthode</span> GetBlockSource()</a></td>
        <td>retourne le source de la définition d'un bloc</td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="#php_mergefield"><span class="txt-small">méthode</span> MergeField()</a></td>
        <td>fusionne un champ particulier avec une valeur</td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="#php_plugin"><span class="txt-small">méthode</span> PlugIn()</a></td>
        <td>exécute une action d'un plug-in </td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="#php_assigned"><span class="txt-small">propriété</span> Assigned</a></td>
        <td>prépare les informations pour une fusion ultérieure</td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="#php_noerr"><span class="txt-small">propriété</span> NoErr</a></td>
        <td>empêche les messages d'erreur</td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="#php_render"><span class="txt-small">propriété</span> Render</a></td>
        <td>pour modifier les options de fin de fusion</td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="#php_source"><span class="txt-small">propriété</span> Source</a></td>
        <td>retourne le contenu courant du résultat de la fusion </td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="#php_tplvars"><span class="txt-small">propriété</span> TplVars</a></td>
        <td>retourne les variables du modèle</td>
      </tr>
      <tr  id="v202_oop_plan">
        <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#php_oop">Programmation Orientée Objet</a> (POO)</td>
        <td>pour que TBS vous facilite la POO. </td>
      </tr>
      <tr>
        <td><a href="#html_side" class="title-1c">• Coté modèle</a></td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp;&nbsp;• les champs TBS </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <a href="#html_field">définition et syntaxe </a></td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <a href="#html_field_prm">paramètres</a></td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <a href="#html_field_prm_order">ordre de traitement des paramètres</a></td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <a href="#html_field_auto">les champs automatiques </a></td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <a href="#html_field_special">les champs automatiques spéciaux</a></td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp;&nbsp;• les blocs TBS </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="#html_block">définition et syntaxes </a></td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <a href="#html_block_prm">paramètres</a></td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <a href="#html_block_section">sections de bloc</a></td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <a href="#html_block_auto">les blocs automatiques </a></td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <a href="#html_block_serial">affichage en série (en colonnes) </a></td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <a href="#html_block_subblock">les sous-blocs</a></td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <a href="#html_block_subauto">sous-blocs automatiques</a></td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <a href="#html_block_dynsb">sous-blocs avec requêtes dynamiques</a></td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp;&nbsp;• Autre</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="#html_subtemplate">sous-modèles</a></td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="#html_conditional">vue d'ensemble de l'affichage conditionnel</a></td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td><a href="#plugins" class="title-1c">• Coder des plug-ins </a></td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#plugins_db">Plug-ins de base de données </a></td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td><a href="#plugins_tbs">&nbsp;&nbsp;&nbsp;&nbsp;Autres plug-ins </a></td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td><a href="#summaries" class="title-1c">• Résumés</a></td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#appendix_field">paramètres des champs TBS</a></td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#appendix_block">paramètres des blocs TBS</a></td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#appendix_specialname">noms de champs et blocs spéciaux</a></td>
        <td>&nbsp;</td>
      </tr>
    </table>
  </div>
  <div class="title-2 pagebreak"><a name="introduction" id="introduction"></a>Présentation :</div>
  <span class="tbsname"><br>
  </span><span class="title-1c"> TinyButStrong</span> (TBS) est une classe PHP utile pour développer une application en séparant proprement vos scripts PHP de vos fichiers XML/HTML/Texte. Avec TBS, les fichiers sont générées dynamiquement en fusionnant un modèle avec des données. C'est ce qu'on appelle un moteur de modèle (Template Engine).<br>
  <br>
  TBS tient son nom du fait qu'il ne présente que 8 fonctions mais qu'il permet de faire le maximum. Il est <span style="color:#FF0000;">••• très très fort •••</span> pour fusionner des modèles avec vos variables PHP ou vos requêtes MySQL, PostgreSQL, ou SQLite.<br>
  <br>
  TBS a été conçu pour que vous puissiez développer avec facilité vos modèles depuis n'importe quel éditeur  visuel (comme Dreamweaver ou FrontPage), mais si vous avez l'habitude d'utiliser un éditeur textuel il est tout aussi pratique. TBS permet aussi de créer du JavaScript dynamiquement.<br>
  <br>
  Comme son nom l'indique, TBS est simple à utiliser, puissant et rapide. Il est complètement <span style="color:#009900">°~° freeware °~°</span>.
  <h3><a name="principles" id="principles"></a>Principes de base :</h3>
  Du coté HTML (ou autre type de fichier) :<br>
  Vous concevez une page qui n'a pas besoin de contenir de script PHP, ni de programmation. Dans cette page vous placez des balises TBS aux endroits où doivent s'afficher les données dynamiques. Cette page est appelée un 'modèle'. Il existe deux types de balises : les <a href="#html_field">'champs'</a> qui servent à afficher une donnée dynamiquement, et les <a href="#html_block">'blocs'</a> qui servent à définir une zone, le plus souvent pour afficher les enregistrements d'une source de données.<br>
  <br>
  Du coté PHP :<br>
  Vous utilisez une variable objet TBS pour piloter la fusion de votre modèle  avec des données. à la fin, TBS affiche le résultat de la fusion.<br>
  <h3><a name="installation"></a>Installation :</h3>
  <table width="100%" border="0" cellpadding="0" cellspacing="0">
    <tr align="left" valign="top">
      <td width="25">1.</td>
      <td>Copiez le fichier <span class="opt-html">tbs_class.php</span> dans un répertoire de votre site Web.</td>
    </tr>
    <tr align="left" valign="top">
      <td>2.</td>
      <td>Au début de votre programme PHP, ajoutez les lignes :<br>
        <span class="txt-code">&nbsp;&nbsp;include_once(<span class="opt-value">'tbs_class.php'</span>);</span><br>
        <span class="txt-code"><span class="opt-name">&nbsp;&nbsp;$TBS</span> = <strong>new</strong> clsTinyButStrong;</span> <br>
        <span class="txt-small">Remarque : si le fichier tbs_class.php se trouve dans un répertoire différent de celui de votre programme, vous devrez préciser le répertoire devant le nom du fichier.</span></td>
    </tr>
  </table>
  <span class="title-1b"><br>
  Explications et détails techniques :</span><br>
  TinyButStrong est un librairie écrite en PHP, c'est un composant à référencer dans vos propres programmes PHP. En terme technique, TinyButStrong est une 'classe' d'objet PHP ; le nom de cette classe est clsTinyButStrong.<br>
  La variable $TBS que ajoutez en début de programme sert à piloter la fusion de votre modèle depuis votre application PHP. En terme technique, la variable $TBS est une 'instance' de la classe clsTinyButStrong.<br>
  <h3><a name="examples" id="examples"></a>Mini exemples :</h3>
  Exemple 1 : <br>
  <table width="100%" border="0" cellpadding="2" cellspacing="4">
    <tr class="title-1c">
      <td width="33%">Modèle Html</td>
      <td>Programme Php</td>
      <td width="33%">Résultat</td>
    </tr>
    <tr class="norm">
      <td valign="top"><span class="opt-html">&lt;html&gt;<br>
        &nbsp;&lt;body&gt;<br>
        &nbsp;&nbsp;[onshow.message] <br>
        &nbsp;&lt;/body&gt;<br>
        &lt;/html&gt;</span><br></td>
      <td valign="top" class="txt-code">&lt;?<br>
        <br>
        include_once(<span class="opt-value">'tbs_class.php'</span>);<br>
        <span class="opt-name">$TBS</span> = <strong>new</strong> clsTinyButStrong;<br>
        <span class="opt-name">$TBS</span>-&gt;LoadTemplate(<span class="opt-value">'template.htm'</span>);<br>
        <br>
        $message = <span class="opt-value">'Hello'</span> ;<br>
        <span class="opt-name">$TBS</span>-&gt;Show();<br>
        <br>
        ?&gt; <br></td>
      <td valign="top" class="opt-html">&lt;html&gt;<br>
        &nbsp;&lt;body&gt;<br>
        &nbsp;&nbsp;Hello<br>
        &nbsp;&lt;/body&gt;<br>
        &lt;/html&gt;</td>
    </tr>
  </table>
  <br>
  <div class="pagebreak">Exemple 2 :</div>
  <table width="100%" border="0" cellpadding="2" cellspacing="4">
    <tr class="title-1c">
      <td width="33%">Modèle Html</td>
      <td>Programme Php</td>
      <td width="33%">Résultat</td>
    </tr>
    <tr class="norm">
      <td valign="top"><span class="opt-html">&lt;table&gt;<br>
        &nbsp;&lt;tr&gt;&lt;td&gt;[blk.val;block=tr]&lt;/td&gt;&lt;/tr&gt;<br>
        &lt;/table&gt;</span><br></td>
      <td valign="top" class="txt-code">&lt;?<br>
        <br>
        include_once(<span class="opt-value">'tbs_class.php'</span>);<br>
        <span class="opt-name">$TBS</span> = <strong>new</strong> clsTinyButStrong;<br>
        <span class="opt-name">$TBS</span>-&gt;LoadTemplate(<span class="opt-value">'template.htm'</span>);<br>
        <br>
        $liste = array(<span class="opt-value">'X'</span>,<span class="opt-value">'Y'</span>,<span class="opt-value">'Z'</span>);<br>
        <span class="opt-name">$TBS</span>-&gt;MergeBlock(<span class="opt-value">'blk'</span>,$liste); <br>
        <span class="opt-name">$TBS</span>-&gt;Show();<br>
        <br>
        ?&gt; <br></td>
      <td valign="top" class="opt-html">&lt;table&gt;<br>
        &nbsp;&lt;tr&gt;&lt;td&gt;X&lt;/td&gt;&lt;/tr&gt;<br>
        &nbsp;&lt;tr&gt;&lt;td&gt;Y&lt;/td&gt;&lt;/tr&gt;<br>
        &nbsp;&lt;tr&gt;&lt;td&gt;Z&lt;/td&gt;&lt;/tr&gt;<br>
        &lt;/table&gt;</td>
    </tr>
  </table>
  <a name="php_side"></a>
  <h2>Coté PHP :</h2>
  Le pilotage de la fusion d'un modèle se fait dans un programme PHP en utilisant une variable objet déclarée à partir de la classe <span class="opt-html">clsTinyButStrong</span>.<br>
  Exemple de déclaration : <span class="txt-code"><span class="opt-name">$TBS</span> = <strong>new</strong> clsTinyButStrong;</span> <br>
  Cet objet vous permet de charger un modèle, piloter sa fusion avec des données, puis afficher le résultat.<br>
  <br>
  Exemple de code PHP :<br>
  <br>
  <div class=" txt-code decal"> include_once(<span class="opt-value">'tbs_class.php'</span>);<br>
    <span class="opt-name">$TBS</span> = <strong>new</strong> clsTinyButStrong;<br>
    <span class="opt-name">$TBS</span>-&gt;LoadTemplate(<span class="opt-value">'template.htm'</span>);<br>
    <span class="opt-name">$TBS</span>-&gt;MergeBlock(<span class="opt-value">'ctry','mysql','SELECT * FROM t_coutry'</span>);<br>
    <span class="opt-name">$TBS</span>-&gt;Show(); </div>
  <br>
  Voici la description d'un objet TinyButStrong :
  <h3><a name="php_instanciate" id="php_instanciate"></a>créer un nouvel objet TBS :</h3>
  <div class="norm"> Un objet TBS est créé en tant qu'instance de la classe clsTinyButStrong. Un objet  TBS vous permet de travailler avec un ou plusieurs modèles à l'aide des méthodes et propriétés de l'objet.<br>
    <br>
    Syntaxe pour créer un nouvel objet  TBS : <span class="txt-code"><span class="opt-name">$TBS</span> = new clsTinyButStrong({<span class="opt-type">string</span> <span class="opt-name">BaliseDelim</span> {, <span class="opt-type">string</span><span class="opt-name"> PrefixeVar</span> {, <span class="opt-type">string </span><span class="opt-name">PrefixFct</span>}}})</span><br>
    <br>
    <table border="0" cellpadding="5" cellspacing="0">
      <tr class="title-1b">
        <td width="80" align="left" valign="top">Argument</td>
        <td align="left" valign="top">Description</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="opt-name">BaliseDelim</td>
        <td align="left" valign="top">Définie le couple de délimiteurs des balises TBS reconnues  dans les modèles. La valeur par défaut est <span class="opt-value">''</span> (chaine vide) qui signifie que les délimiteurs par défaut. Il s'agit de '[' et ']'.<br>
          Exemple : si vous souhaitez que els délimiteurs soient <span class="opt-value">{{</span> et <span class="opt-value">}}</span> pour les balises TBS, alors définissez <span class="opt-name">BaliseDelim</span> à la valeur <span class="opt-value">'{{,}}'</span>. Ainsi les champs TBS seront du type <span class="opt-html">{{var.x}}</span> au lieu de <span class="opt-html">[var.x]</span>.<br>
          Il est recommandé de laisser les délimiteurs par défaut, même si vous pouvez les changer sans problème. Les délimiteurs par défaut sont <span class="opt-value">[</span> et <span class="opt-value">]</span> parce que ces caractères sont utilisables pratiquement partout dans des documents XML/HTML, et ils sont repérés plus rapidement que les délimiteurs <span class="opt-value">{</span> / <span class="opt-value">}</span> ou <span class="opt-value">(</span> / <span class="opt-value">)</span> car ils sont plus rares surtout en HTML.</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="opt-name">PrefixeVar</td>
        <td align="left" valign="top">Limite l'utilisation des <a href="#html_field_auto">champs automatiques</a> ([onload] [onshow] et [var])  dans les modèles. TBS  n'affichera que les variables globales PHP préfixées par <span class="opt-name">PrefixeVar</span>. Les autres variables produiront un message d'erreur. La valeur par défaut pour <span class="opt-name">PrefixeVar</span> est <span class="opt-value">''</span> (chaine vide) ce qui signifie aucune limitation.</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="opt-name">PrefixeFct</td>
        <td align="left" valign="top">Limite l'utilisation des fonctions PHP utilisateur  (relatives aux paramètres <a href="#html_field_prm_onformat" class="opt-name">onformat</a> et <a href="#html_block_prm_ondata" class="opt-name">ondata</a>) dans les modèles. TBS  n'appellera que les fonctions    PHP préfixée par <span class="opt-name">PrefixeFct</span>. Les autres fonctions produiront un message d'erreur. La valeur par défaut pour <span class="opt-name">PrefixeFct </span>est <span class="opt-value">''</span> (chaine vide) ce qui signifie aucune limitation.<br>
          <span class="versioning">Cet argument est supporté depuis TBS version 3.6.0.</span></td>
      </tr>
    </table>
    <br>
    Exemples :
    <div class="decal txt-code"><span class="opt-name">$TBS1</span> = new clsTinyButStrong; <span class="opt-html">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// comportement par défaut</span><br>
      <span class="opt-name">$TBS2</span> = new clsTinyButStrong(<span class="opt-value">'{{,}}'</span>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="opt-html">// les balises TBS seront du type {{var.x}} au lieu de [var.x]</span><br>
      <span class="opt-name">$TBS3</span> = new clsTinyButStrong(<span class="opt-value">''</span>, <span class="opt-value">'tbs_var_'</span>);<span class="opt-html"> &nbsp;&nbsp;&nbsp;// TBS n'affichera que les variables globale PHP commençant par 'tbs_var_</span>'<br>
      <span class="opt-name">$TBS4</span> = new clsTinyButStrong(<span class="opt-value">''</span>, <span class="opt-value">''</span>, <span class="opt-value">'tbs_fct_'</span>);<span class="opt-html">// TBS n'appellera que les fonctions PHP commençant par 'tbs_fct_</span>'</div>
  </div>
  <h3><a name="php_loadtemplate" id="php_loadtemplate"></a>Méthode LoadTemplate() :</h3>
  <div class="norm">Charge un modèle en vue de son traitement pour la fusion.<br>
    Le contenu complet du fichier est enregistré dans la propriété <a href="#php_source">Source</a> de l'objet TinyButStrong, puis les <a href="#html_field_auto">champs</a> et <a href="#html_block_auto">blocs</a> [onload] sont fusionnés.<br>
    Si le fichier n'est pas trouvé il sera aussi recherché dans le répertoire du dernier modèle chargé (<span class="versioning">depuis TBS version 3.2.0</span>).<br>
    <br>
    Syntaxe : <span class="txt-code"><span class="opt-name">$TBS</span>-&gt;LoadTemplate(<span class="opt-type">string</span> <span class="opt-name">Fichier</span><span class="opt-name"><span style="color:#333333">{</span></span>, <span class="opt-type">string</span><span class="opt-name"> Charset<span style="color:#333333">}</span></span>)<br>
    <br>
    </span>
    <table border="0" cellpadding="5" cellspacing="0">
      <tr class="title-1b">
        <td width="80" align="left" valign="top">Argument</td>
        <td align="left" valign="top">Description</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="opt-name">Fichier</td>
        <td align="left" valign="top">Chemin local ou absolu du fichier modèle à charger.<br>
          Cette valeur peut être <span class="opt-value">null</span> ou <span class="opt-value">''</span> (chaine vide) pour des actions spéciales. Voir les détails ci-dessous. </td>
      </tr>
      <tr>
        <td align="left" valign="top" class="opt-name">Charset</td>
        <td align="left" valign="top">Facultatif. Indique l'encodage des caractères (charset) à utiliser pour la conversion des caractères spéciaux des données lorsqu'elles seront fusionnées. La valeur par défaut est <span class="opt-value">''</span> (chaîne vide) qui équivaut à <span class="opt-value">'ISO-8859-1'</span> (Latin 1).<br>
          <br>
          Si votre modèle utilise un charset spécial, indiquez la valeur Html de ce charset.<br>
          Dans une page Html, le charset se trouve en tête du fichier, dans l'attribut <span class="opt-html">'content'</span> d'une balise <span class="opt-html">&lt;Meta&gt;</span>. Les charset supportés par TBS sont ceux supportés par la fonction <a href="http://www.php.net/htmlentities" target="_blank">htmlentities()</a> de Php. Par exemple : <span class="opt-value">'BIG5'</span> (chinois) ou <span class="opt-value">'EUCJP'</span> (japonais).<br>
          <br>
          Voir ci-dessous pour plus de possibilités.</td>
      </tr>
    </table>
    <br>
    <span class="title-1b">Portée de la recherche du fichier :</span><br>
    Si le fichier n'est pas trouvé, il sera aussi recherché dans le répertoire du dernier modèle ou sous-modèle chargé. <br>
    <span class="versioning">Depuis TBS version 3.3.0</span>, le fichier est aussi recherché dans le <a href="http://www.php.net/manual/en/ini.core.php#ini.include-path">include_path</a>.<br>
    <br>
    <span class="title-1b">Pas de conversion de caractère :</span> <br>
    Si vous utilisez la valeur False pour l'argument <span class="opt-name">Charset</span>, alors les données ne seront pas converties lors de la fusion avec le modèle.<br>
    Notez que le paramètre <a href="#html_field_prm_htmlconv" class="opt-name">htmlconv</a> peut être utilisé pour définir la conversion de caractères spéciaux pour un champ TBS.<br>
    <br>
    <span class="title-1b">Fonction utilisateur :</span> <br>
    Si votre charset n'est pas supporté par PHP, vous pouvez désigner une fonction utilisateur qui réalise la conversion de caractères spéciaux. Pour cela, utilisez l'argument <span class="opt-name">Charset</span> avec la syntaxe '=mafonction'.<br>
    <span class="versioning">Depuis TBS version 3.0</span>, il est aussi possible d'indiquer une méthode de classe (voir <a href="#php_oop">POO</a>).<br>
    <span class="versioning">Depuis TBS version 3.3.0</span>, cette fonction utilisateur devrait avoir un second argument pour la conversion des sauts-de-lignes.<br>
    <span class="versioning">Depuis TBS version 3.5.0</span>, l'argument Charset peut aussi être a tableau contenant un objet et une méthode. Exemple : array(&amp;$obj, 'mamethode'). <br>
    Voici un exemple qui donne la syntaxe attendue : <br>
    <div class="decal txt-code">function f_StrToXml(<span class="opt-name">$Txt</span> <span class="opt-type">string</span>,<span class="opt-name">$ConvBr <span class="opt-type">boolean</span></span>) {<br>
      <span class="opt-html">// Convertie une chaîne en texte  XML.</span><br>
      &nbsp;&nbsp;<span class="opt-type"><span class="opt-name">$x</span></span> = htmlspecialchars(utf8_encode(<span class="opt-name">$Txt</span>));<br>
      &nbsp;&nbsp;if (<span class="opt-name">$ConvBr</span>) {<br>
      &nbsp;&nbsp;  &nbsp;<span class="opt-name">$x</span> = nl2br(<span class="opt-name">$x</span>); <span class="opt-html">// Convertie tout type de saut-de-ligne</span><br>
      &nbsp;&nbsp;&nbsp;&nbsp;<span class="opt-name">$x</span> = str_replace(<span class="opt-value">'&lt;br /&gt;'</span>, <span class="opt-value">'&lt;text:line-break/&gt;'</span>,<span class="opt-name">$x</span>);<br>
      &nbsp;&nbsp;return <span class="opt-name">$x</span>;<br>
      } </div>
    <span class="title-1b"></span><br>
    <span class="title-1b"> <br>
    Ajouter le fichier à la suite du modèle en cours :</span><br>
    Vous pouvez utiliser le mot-clé '+' à la place du charset pour que le fichier spécifié soit ajouté à la fin du modèle en cours au lieu de l'écraser. Le charset utilisé est alors le même que pour le premier modèle.<br>
    <br>
    <span class="title-1b">Actions spéciales :</span><br>
    <span class="versioning">Depuis TBS version 3.4.0.<br>
    </span> Si <span class="opt-name">Fichier</span>est <span class="opt-value">null</span>, alors toutes les actions par défaut  (Plugins, balises [onload], et Charset) sont appliquées sans charger aucun fichier. <br>
    Si <span class="opt-name">Fichier</span> est <span class="opt-value">''</span> (chaine vide), alors seul le charset est modifié, sans faire rien aucune autre action.<br>
    Exemple : <br>
    <div class="decal txt-code"><span class="opt-name">$TBS</span>-&gt;Source = <span class="opt-name">$modele</span>; <span class="opt-html">// charge le modèle depuis une chaine</span> <br>
      <span class="opt-name">$TBS</span>-&gt;LoadTemplate(<span class="opt-value">null</span>,<span class="opt-value">'BIG5'</span>); <span class="opt-html">//  lance les plugins s'il y en a, et fusionne les balises  [onload] s'il y en a</span><br>
      ...<br>
      <span class="opt-name">$TBS</span>-&gt;LoadTemplate(<span class="opt-value">''</span>,<span class="opt-value">false</span>); <span class="opt-html">// remplace le charset pas aucun-charset</span></div>
  </div>
  <h3><a name="php_mergeblock" id="php_mergeblock"></a>Méthode MergeBlock() :</h3>
  <div class="norm">Fusionne un ou plusieurs <a href="#html_block">blocs TBS</a> avec les données d'une source d'enregistrements.<br>
    Par défaut, cette méthode retourne le nombre d'enregistrements fusionnés (plus exactement, elle retourne le  numéro du dernier enregistrement), mais elle peut aussi retourner le jeu complet des enregistrements fusionnés (voir argument <span class="opt-name">NomBloc</span>). <br>
    <br>
    TinyButStrong supporte plusieurs types de sources de données en natif :<br>
    <span class="title-1b">Données Php :</span> un tableau ; une chaîne texte, un nombre.<br>
    <span class="title-1b">Base de données :</span> MySQL ; PostgreSQL ; SQLite.<br>
    Mais vous pouvez aussi en ajouter de nouveaux : '<a href="#plugins_db">plug-ins de base de données</a>'.<br>
    <br>
    Syntaxe : <span class="txt-code"><span class="opt-type">int</span><span class="opt-name"></span> <span class="opt-name">$TBS</span>-&gt;MergeBlock(<span class="opt-type">string</span><span class="opt-name"> NomBloc</span>, <span class="opt-type">mixed</span> <span class="opt-name">Source<span style="color:#333333">{</span></span>, <span class="opt-type">string</span><span class="opt-name"> Requête<span style="color:#333333">}{, <span class="opt-type">mixed</span><span class="opt-name"> ReqPrms</span>}</span></span>)</span>
    <table border="0" cellpadding="5" cellspacing="0">
      <tr class="title-1b">
        <td width="80" align="left" valign="top">Argument</td>
        <td align="left" valign="top">Description</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="opt-name">NomBloc</td>
        <td align="left" valign="top">Indique le nom du <a href="#html_block">bloc</a> TBS à fusionner.<span class="opt-name"><span class="txt-code"><br>
          </span></span> Vous pouvez fusionner plusieurs blocs avec les mêmes données en indiquant leurs noms séparés par des virgules. Si vous ajoutez <span class="opt-value">'*'</span> comme nom de bloc, alors la méthode retournera le jeu complet des enregistrements fusionnés sous forme de tableau PHP, à la place du nombre d'enregistrements.
          <div class="versioning">Historique : le mot clé '*' est supporté depuis TBS version 3.0.</div></td>
      </tr>
      <tr>
        <td align="left" valign="top" class="opt-name">Source</td>
        <td align="left" valign="top"><p>Variable ou mot-clé qui désigne la source de données pour la fusion.<br>
            Le tableau ci-dessous indique les valeurs possibles selon le type de source de données.</p></td>
      </tr>
      <tr>
        <td align="left" valign="top" class="opt-name">Requête</td>
        <td align="left" valign="top"> Facultatif. Indique la requête SQL qui retourne les données à fusionner.<br>
          Le tableau ci-dessous indique les valeurs possibles selon le type de source de données.</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="opt-name">ReqPrms</td>
        <td align="left" valign="top">Facultatif. Paramètres suppléemntaires pour la requête. Peu de types de sources de données prennent cet argument en compte.<br>
        <div class="versioning">Versioning: the argument QryPrms  is supported since TBS version 3.7.0.</div></td>
      </tr>
    </table>
    <br>
    <div class="title-1b">Liaison entre le bloc et les enregistrements :</div>
    <br>
    <div class="decal">La méthode MergeBlock() recherche le bloc TBS avec le nom spécifié dans votre modèle. Puis, le bloc TBS est répété autant de fois qu'il y a d'enregistrement dans la source de données.<br>
      Pour afficher les données d'un enregistrement, vous devez utiliser un champ TBS lié. Un champ TBS est lié lorsque son nom est composé du nom du bloc, suivi d'un point et du nom d'une colonne ou d'une clé du jeu d'enregistrements. Un champ lié doit se trouver à l'intérieur du bloc.<br>
      <br>
      Exemple :<br>
      <div class="decal">Nom du bloc : <span class="opt-value">bloc1</span><br>
        Colonnes retournées par la requête : <span class="opt-value">champ1</span>,c<span class="opt-value">hamp2</span>,c<span class="opt-value">hamp3</span><br>
        Champs TBS liés : <span class="opt-value">[bloc1.champ1]</span>, <span class="opt-value">[bloc1.champ2]</span>, <span class="opt-value">[bloc1.champ3]</span></div>
      <br>
      Si aucune définition de bloc n'est trouvée dans le modèle, La méthode MergeBlock() fusionnera le premier enregistrement avec tous les champs liés trouvés dans le modèle.<br>
      <br>
      Vous pouvez définir des blocs plus évolués. Pour plus d'information, consultez la rubrique <a href="#html_block">Blocs TBS</a>.</div>
    <span class="title-1b"><br>
    </span> <span class="title-1b"><a name="php_mergeblock_mergeseveral" id="php_mergeblock_mergeseveral"></a>Fusionner plusieurs blocs avec les mêmes données :</span><br>
    <div class="decal"><br>
      Vous pouvez fusionner plusieurs blocs avec les mêmes données en indiquant leurs noms séparés par des virgules dans l'argument <span class="opt-name">NomBloc</span>. Dans ce cas, la requête n'est ouverte qu'une seule fois et les enregistrements sont mis dans un cache afin de remplir les blocs.<br>
      Exemple : <span class="txt-code"><span class="opt-name">$TBS</span>-&gt;MergeBlock(<span class="opt-value">'bloc1,bloc2,bloc3'</span>,<span class="opt-value">'mysql'</span>,<span class="opt-value">'SELECT * FROM MaTable'</span>);</span><br>
      <br>
      Vous ne pouvez pas fusionner plusieurs blocs ayant le même nom parce qu'ils sont considérés par TBS comme un seul et même bloc composé de plusieurs sections. Néanmoins, vous pouvez utiliser une astuce pour obtenir un résultat similaire. Si vous utilisez le paramètre <a href="#html_block_prm_p1" class="opt-name">p1</a> sans valeur dans une définition de bloc, cela force TBS à considérer la section comme une rupture de nouveau bloc, comme il le fait pour les <a href="#html_block_dynsb">sous-blocs</a>.<br>
      Exemple :<br>
      <div class="decal">
        <table border="0" cellspacing="5" cellpadding="0">
          <tr>
            <td><table border="1" cellspacing="0" cellpadding="1">
                <tr class="title-1c">
                  <td bgcolor="#66CCFF">Id</td>
                  <td bgcolor="#66CCFF">Nom</td>
                </tr>
                <tr>
                  <td>[b.id;block=tr;p1]</td>
                  <td>[b.nom]</td>
                </tr>
              </table></td>
            <td><table border="1" cellspacing="0" cellpadding="1">
                <tr class="title-1c">
                  <td bgcolor="#FFCC66">Id</td>
                  <td bgcolor="#FFCC66">Nom</td>
                </tr>
                <tr>
                  <td>[b.id;block=tr;p1]</td>
                  <td>[b.nom]</td>
                </tr>
              </table></td>
          </tr>
        </table>
        <br>
        <span class="opt-name"><span class="txt-code">$TBS</span></span><span class="txt-code">-&gt;MergeBlock(<span class="opt-value">'b'</span>,<span class="opt-value">'mysql'</span>,<span class="opt-value">'SELECT * FROM MaTable'</span>);</span></div>
      <div class="versioning">Historique: cette astuce existe depuis TBS version 3.4. </div>
      <span class="title-1b"></span> </div>
    <span class="title-1b"><br>
    <a name="php_mergeblock_returndata" id="php_mergeblock_mergeseveral2"></a>Retourner l'ensemble des enregistrements fusionnés :</span>
    <div class="decal"><br>
      Dans certains cas, il vous sera peut être pratique de récupérer l'ensemble des enregistrements fusionnés après la fusion. Pour cela, il suffit d'ajouter le mot-clé <span class="opt-value">'*'</span> dans la liste des noms de bloc. Utilisez cette fonctionnalité avec parcimonie car elle conserve les données fusionnées en mémoire ce qui consomme plus ressource.<br>
      Exemple : <span class="opt-name">$data</span> = <span class="opt-name"><span class="txt-code">$TBS</span></span><span class="txt-code">-&gt;MergeBlock(<span class="opt-value">'bloc1,*'</span>,<span class="opt-value">'mysql'</span>,<span class="opt-value">'SELECT * FROM MaTable'</span>);</span></div>
    <span class="title-1b"><br>
    <a name="php_mergeblock_counting"></a>Décompte des enregistrements :</span><br>
    <br>
    <div class="decal">Pour afficher le numéro d'enregistrement dans  le modèle, utilisez un champ TBS lié à la colonne virtuelle '<span class="opt-value">#'</span>. 
      Si vous placez ce champ en dehors du bloc, il affichera le nombre total d'enregistrements.<br>
      Exemple : <span class="opt-value">[bloc1.#]<br>
      <br>
      </span> La colonne virtuelle '<span class="opt-value">$'</span> permet d'afficher la clé de l'enregistrement en cours lorsque la source de données est un tableau Php (array).<br>
      Exemple: <span class="opt-value">[bloc1.$]</span><span class="opt-value"></span></div>
    <br>
    <span class="title-1b">Utilisation des arguments Source et Requête selon le type de source de données :</span><br>
    <br>
    <table cellpadding="2" cellspacing="0" class="border-0">
      <tr bgcolor="#B2B2B2" class="title-1c">
        <td width="120" class="border-0">Type de source de données</td>
        <td width="350" class="border-0">Source<span class="opt-name"></span></td>
        <td class="border-0">Requête</td>
      </tr>
      <tr valign="top">
        <td class="border-0">Assigné<span class="txt-tiny"> (*)</span></td>
        <td class="border-0">Le mot-clé <span class="opt-value">'assigned'</span>, ou omis</td>
        <td class="border-0">-</td>
      </tr>
      <tr valign="top">
        <td class="border-0">Texte <span class="txt-tiny">(*)</span></td>
        <td class="border-0">Le mot-clé <span class="opt-value">'text'</span></td>
        <td valign="top" class="border-0">Un texte</td>
      </tr>
      <tr valign="top">
        <td class="border-0">Nombre <span class="txt-tiny">(*)</span></td>
        <td class="border-0">Le mot-clé <span class="opt-value">'num'</span></td>
        <td valign="top" class="border-0">Un nombre<br>
          ou un tableau spécial (voir plus bas)</td>
      </tr>
      <tr valign="top">
        <td class="border-0">Vide<span class="txt-tiny"> (*)</span></td>
        <td class="border-0">Le mot-clé <span class="opt-value">'clear'</span></td>
        <td class="border-0">-</td>
      </tr>
      <tr valign="top">
        <td class="border-0">Conditionnel<span class="txt-tiny"> (*)</span></td>
        <td class="border-0">Le mot-clé <span class="opt-value">'cond'</span></td>
        <td class="border-0">-</td>
      </tr>
      <tr valign="top">
        <td rowspan="3" class="border-0">Tableau PHP <span class="txt-tiny">(*)</span></td>
        <td valign="top" class="border-0">Un tableau Php</td>
        <td valign="top" class="border-0">-</td>
      </tr>
      <tr>
        <td valign="top" class="border-0">Le mot-clé <span class="opt-value">'array'</span></td>
        <td valign="top" class="border-0">Un tableau Php</td>
      </tr>
      <tr>
        <td valign="top" class="border-0">Le mot-clé <span class="opt-value">'array'</span></td>
        <td valign="top" class="border-0">Une chaîne texte qui représente un tableau contenu ou encapsulé dans une variable PHP globale (voir ci-après) </td>
      </tr>
      <tr>
        <td class="border-0">PHP&nbsp;ArrayObject</td>
        <td rowspan="3" valign="top" class="border-0">Un objet  PHP. <span class="versioning">Supporté depuis  TBS version 3.5.0.</span></td>
        <td rowspan="3" valign="top" class="border-0">-</td>
      </tr>
      <tr>
        <td class="border-0">PHP&nbsp;Iterator</td>
      </tr>
      <tr>
        <td class="border-0">PHP&nbsp;IteratorAggregate</td>
      </tr>
      <tr valign="top">
        <td class="border-0">PDO</td>
        <td valign="top" class="border-0">Un objet  PDO. <span class="versioning">Supporté depuis  TBS version 3.7.0.</span></td>
        <td valign="top" class="border-0">Une requête SQL</td>
      </tr>
      <tr valign="top">
        <td class="border-0">MySQLi</td>
        <td valign="top" class="border-0">Un objet  MySQLi. <span class="versioning">Supporté depuis  TBS version 3.7.0.</span></td>
        <td valign="top" class="border-0">Une requête SQL</td>
      </tr>
      <tr valign="top">
        <td rowspan="2" class="border-0">MySQL</td>
        <td valign="top" class="border-0">Une ressource de connexion MySql ou le mot-clé <span class="opt-value">'mysql'</span></td>
        <td valign="top" class="border-0">Une requête SQL</td>
      </tr>
      <tr>
        <td valign="top" class="border-0">Une ressource de résultat MySql</td>
        <td valign="top" class="border-0">-</td>
      </tr>
      <tr valign="top">
        <td rowspan="2" class="border-0">PostgreSQL</td>
        <td valign="top" class="border-0">Une ressource de connexion PostgreSql</td>
        <td valign="top" class="border-0">Une requête SQL</td>
      </tr>
      <tr>
        <td valign="top" class="border-0">Une ressource de résultat PostgreSql</td>
        <td valign="top" class="border-0">-</td>
      </tr>
      <tr valign="top">
        <td rowspan="2" class="border-0">SQLite</td>
        <td valign="top" class="border-0">Une ressource de connexion SQLite</td>
        <td valign="top" class="border-0">Une requête SQLite</td>
      </tr>
      <tr>
        <td valign="top" class="border-0">Une ressource de résultat SQLite</td>
        <td valign="top" class="border-0">-</td>
      </tr>
      <tr valign="top">
        <td class="border-0">Personnalisé<br></td>
        <td valign="top" class="border-0">Un mot-clé, un objet ou une ressource non listé dans ce tableau.<br>
          Voir le paragraphe '<a href="#plugins_db">plug-ins de base de données</a>'.</td>
        <td valign="top" class="border-0">Une requête SQL ou autre chose.</td>
      </tr>
    </table>
    <span class="txt-tiny">(*) Voir explications dans la rubrique ci-après.</span><br>
    <br>
    <span class="title-1b">Source de données Php :<br>
    <br>
    </span>
    <div class="decal"> <span class="title-1c">Assigné<br>
      </span>
      <div class="decal">L'argument <span class="opt-name">Source</span> doit être le mot-clé <span class="opt-value">'assigned'</span> ou doit être omis.<br>
        Le bloc est fusionné avec les arguments définis dans la propriété <a href="#php_assigned">Assigned</a>.<br>
        Exemple : <span class="txt-code"><span class="opt-name">$TBS</span>-&gt;MergeBlock(<span class="opt-value">'b1'</span>);</span><br>
        <div class="versioning">Historique : le mot clé 'assigned' est supporté depuis TBS version 3.5.</div>
      </div>
      <br>
      Texte</span><br>
      <div class="decal">L'argument <span class="opt-name">Source</span> doit être égal à <span class="opt-value">'text'</span>.<br>
        Tout le bloc est remplacé par le texte contenu dans la paramètre <span class="opt-name">Requête</span>. Les champs liés ne sont pas gérés sauf '<span class="opt-value">#'</span> qui retourne 1, ou 0 si <span class="opt-name">Requête</span> est une chaîne vide.<br>
        Exemple : <span class="txt-code"><span class="opt-name">$TBS</span>-&gt;MergeBlock(<span class="opt-value">'b1'</span>,<span class="opt-value">'text'</span>,<span class="opt-value">'Bonjour, comment allez-vous ?'</span>); </span></div>
      <br>
      <span class="title-1c">Nombre</span><br>
      <div class="decal">L'argument<span class="opt-name"> </span><span class="opt-name">Source</span> doit être égal à <span class="opt-value">'num'</span>.<br>
        L'argument <span class="opt-name">Requête</span> peut être soit un nombre, soit un tableau.<br>
        <br>
        <table border="0" cellspacing="0" cellpadding="0">
          <tr>
            <td width="80" class="title-1b">arg&nbsp;Requête</td>
            <td class="title-1b">Jeu d'enregistrements retourné</td>
          </tr>
          <tr>
            <td valign="top">Nombre :</td>
            <td>Ce nombre doit être supérieur ou égale à zéro. Le jeu d'enregistrement retourné est composé d'une colonne <span class="opt-value">'val'</span> dont la valeur va de 1 à ce nombre.</td>
          </tr>
          <tr>
            <td valign="top">Tableau :</td>
            <td>Ce tableau doit contenir une clé <span class="opt-value">'min'</span> et une clé <span class="opt-value">'max'</span> et éventuellement une clé <span class="opt-value">'step'</span>.<br>
              Le jeu d'enregistrement retourné est composé d'une colonne <span class="opt-value">'val'</span> qui va de la valeur de <span class="opt-value">'min'</span> à la valeur de <span class="opt-value">'max'</span>.</td>
          </tr>
        </table>
        Exemples :<br>
        <div class="decal"><span class="txt-code"><span class="opt-name">$TBS</span>-&gt;MergeBlock(<span class="opt-value">'b1'</span>,<span class="opt-value">'num'</span>,<span class="opt-value">12</span>);</span><br>
          <span class="txt-code"><span class="opt-name">$TBS</span>-&gt;MergeBlock(<span class="opt-value">'b2'</span>,<span class="opt-value">'num'</span>,array(<span class="opt-value">'min'</span>=&gt;<span class="opt-value">20</span>,<span class="opt-value">'max'</span>=&gt;3<span class="opt-value">0</span>));</span><br>
          <span class="txt-code"><span class="opt-name">$TBS</span>-&gt;MergeBlock(<span class="opt-value">'b3'</span>,<span class="opt-value">'num'</span>,array(<span class="opt-value">'min'</span>=&gt;<span class="opt-value">10</span>,<span class="opt-value">'max'</span>=&gt;<span class="opt-value">20</span>,<span class="opt-value">'step'</span>=&gt;<span class="opt-value">2</span>));</span></div>
      </div>
      <br>
      <span class="title-1c">Vide</span><br>
      <div class="decal">L'argument <span class="opt-name">Source</span> doit être le mot-clé <span class="opt-value">'clear'</span>.<br>
        Tous les blocs et leurs sections sont supprimés. C'est la même chose que fusionner avec un tableau vide.<br>
        Exemple : <span class="txt-code"><span class="opt-name">$TBS</span>-&gt;MergeBlock(<span class="opt-value">'b1'</span>,<span class="opt-value">'clear'</span>); </span></div>
      <br>
      <span class="title-1c">Conditionnel</span><br>
      <div class="decal">L'argument <span class="opt-name">Source</span> doit être le mot-clé <span class="opt-value">'cond'</span>.<br>
        Le bloc est fusionné comme si c'était un <a href="#html_conditional_section">bloc conditionnel</a> <span class="opt-name">onload</span> et <span class="opt-name">onshow</span>. Le bloc n'est pas fusionné avec des données et donc il ne doit pas avoir de champ TBS lié. Chaque section de bloc doit avoir un paramètre <span class="opt-name">when</span> ou un paramètre <span class="opt-name">default</span>. Voir <a href="#html_conditional_section">bloc conditionnel</a> pour plus de détails.<br>
        Exemple : <span class="txt-code"><span class="opt-name">$TBS</span>-&gt;MergeBlock(<span class="opt-value">'bz'</span>,<span class="opt-value">'cond'</span>); </span></div>
      <span class="title-1c"><br>
      </span><span class="title-1c">Tableau</span><br>
      <div class="decal">L'argument <span class="opt-name">Source</span> doit être un tableau Php (type Array), ou le mot-clé <span class="opt-value">'array'</span>. Si le mot-clé <span class="opt-value">'array'</span> est utilisé, alors l'argument <span class="opt-name">Requête</span> doit être un tableau Php ou une chaîne texte qui représente tableau contenu ou encapsulé par une variable Php globale.<br>
        <br>
        <span class="title-1b">Syntaxe de la chaîne :</span> <span class="opt-value">'globvar[item1][item2]...'</span><br>
        <div class="decal">'globvar' est le nom d'un variable globale $globvar qui doit être un tableau.<br>
          'item1' et 'item2' sont des clés d'un item ou d'un sous item de $globvar.<br>
          Exemple:<br>
          <div class="decal"> <span class="txt-code"><span class="opt-name">$TBS</span>-&gt;MergeBlock(<span class="opt-value">'bloc1'</span>,<span class="opt-value">'array'</span>,<span class="opt-value">'jours[lun]'</span>);</span><br>
            Cela va fusionner 'block1' avec $jours['lun'] qui est supposé être un tableau.</div>
          Il est possible de représenter un nom de variable sans item.<br>
          Exemple:<br>
          <div class="decal"> <span class="txt-code"><span class="opt-name">$TBS</span>-&gt;MergeBlock(<span class="opt-value">'bloc1'</span>,<span class="opt-value">'array'</span>,<span class="opt-value">'jours'</span>);</span></div>
        </div>
        <br>
        Il y a deux avantages à utiliser une chaîne pour représenter le tableau :<br>
        -&gt; Les items seront lus directement dans le tableau (assigné par référence) au lieu de lire une copie des items. Cela peut améliorer les performances. <br>
        -&gt; Vous pouvez utiliser des requêtes dynamiques.<br>
        <br>
        <span class="title-1b">Afficher la clé de l'enregistrement en cours : </span> <br>
        Vous pouvez utiliser la colonne virtuelle '<span class="opt-value">$'</span> qui affiche la clé de l'enregistrement en cours. Cela peut être particulièrement utile pour les <a href="#html_block_dynsb">sous-blocs avec requêtes dynamiques</a>. <br>
        Exemple: [bloc1.$]<br>
        <span class="title-1b"><br>
        Structure des tableaux supportés :</span> <br>
        Les items du tableau spécifié peuvent être de deux types : des valeurs simples avec des clés associées (cas&nbsp;1), ou des valeurs tableaux dont les items sont eux-mêmes des valeurs simples avec des clés associées (cas&nbsp;2).<br>
        <br>
        Cas 1 :<br>
        <table  border="0" cellpadding="0" cellspacing="0">
          <tr>
            <td width="80" valign="top">Exemple : </td>
            <td valign="top">['clé1']=&gt;valeur1<br>
              ['clé2']=&gt;valeur2<br>
              ...</td>
          </tr>
        </table>
        Le jeu d'enregistrement retourné est composé d'une colonne <span class="opt-value">'key'</span> contenant le nom de la clé, et d'une colonne <span class="opt-value">'val'</span> contenant la valeur de la clé.<br>
        <br>
        Cas 2 :<br>
        <table  border="0" cellpadding="0" cellspacing="0">
          <tr>
            <td width="80" valign="top">Exemple : </td>
            <td valign="top">[0] =&gt; (['colonne1']=&gt;valeur1-0 ; ['colonne2']=&gt;valeur2-0 ; ...)<br>
              [1] =&gt; (['colonne1']=&gt;valeur1-1 ; ['colonne2']=&gt;valeur2-1 ; ...)<br>
              [2] =&gt; (['colonne1']=&gt;valeur1-2 ; ['colonne2']=&gt;valeur2-2 ; ...)<br>
              ...</td>
          </tr>
        </table>
        Le jeu d'enregistrement retourné est composé des colonnes <span class="opt-value">'colonne1'</span>, <span class="opt-value">'colonne2'</span>, ... avec leurs valeurs associées.</div>
    </div>
  </div>
  <h3><a name="php_show" id="php_show"></a>Méthode Show() :</h3>
  <div class="norm"><span class="zone-normal">Termine la fusion.<br>
    <br>
    Syntaxe : <span class="txt-code"><span class="opt-name">$TBS</span>-&gt;Show(<span class="opt-name"><span style="color:#333333">{</span></span><span class="opt-type">int</span><span class="opt-name"> </span><span class="opt-name">Render</span><span class="opt-name"></span><span class="opt-name"><span style="color:#333333">}</span></span>)</span><br>
    <br>
    La méthode Show() exécute les actions suivantes :<br>
    - fusion des <a href="#html_field_auto">champs</a> [var] (par compatibilité avec les versions antérieures à 3.2.0),<br>
    - fusion des <a href="#html_field_auto">champs</a> et <a href="#html_block_auto">blocs</a> [onshow],<br>
    - affiche le résultat (cette action peut être annulée par la propriété ou l'argument <a href="#php_render">Render</a>),<br>
    - termine le script (cette action peut être annulée par la propriété ou l'argument <a href="#php_render">Render</a>). <br>
    <br>
    La propriété et l'argument <a href="#php_render">Render</a> permettent de régler le comportement de la méthode Show().</span> Consultez la propriété <a href="#php_render">Render</a> pour plus d'information. </div>
  <h3><a name="php_getblocksource" id="php_getblocksource"></a>Méthode GetBlockSource() :</h3>
  <div class="norm">Retourne le source d'un bloc TBS dans le modèle.<br>
    Si aucun bloc n'est trouvé, la méthode retourne la valeur <span class="txt-code"><em><span style="color:#0033CC">False</span></em></span>.<br>
    <br>
    Syntaxe : <span class="txt-code"><span class="opt-type">string</span> <span class="opt-name"></span><span class="opt-name">$TBS</span>-&gt;GetBlockSource(<span class="opt-type">string </span><span class="opt-name">NomBloc </span>{,<span class="opt-type"> boolean</span> <span class="opt-name">EnTableau</span>}{,<span class="opt-type"> boolean</span> <span class="opt-name">BalisesDef</span>}{,<span class="opt-type"> mix</span> <span class="opt-name">RemplacePar</span>})</span> <br>
    <br>
    <table border="0" cellpadding="5" cellspacing="0">
      <tr class="title-1b">
        <td width="80" align="left" valign="top">Argument</td>
        <td align="left" valign="top">Description</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="opt-name">NomBloc</td>
        <td align="left" valign="top">Nom du bloc à rechercher.<br></td>
      </tr>
      <tr>
        <td align="left" valign="top" class="opt-name">EnTableau</td>
        <td align="left" valign="top">Facultatif. La valeur par défaut est <span class="txt-code"><em><span style="color:#0033CC">False</span></em></span>.        Si ce paramètre est à <span class="txt-code"><em><span style="color:#0033CC">True</span></em></span>, la méthode retourne le surce du bloc sous forme de tableau PHP au lieu d'une chaîne texte. Si le résultat est un tableau, alors chaque section est sauvée comme un item. Le premier item a l'index 1.</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="opt-name">BalisesDef</td>
        <td align="left" valign="top">Facultatif. La valeur par défaut est <span class="txt-code"><em><span style="color:#0033CC">True</span></em></span>.        Par défaut, la méthode GetBlockSource() retourne le source du bloc avec ses balises de définition. Si vous souhaitez que ces balises soient retirées, forcez l'argument<span class="opt-name"> BalisesDef</span> à <em><span style="color:#0033CC">False</span></em>. Si le bloc est défini avec une <a href="#html_block">syntaxe simplifiée</a> alors les balises de définition de bloc ne seront de toute façon pas supprimées car elles sont aussi des balises de champ.<br>
          <div class="versioning">Historique : cet argument est supporté depuis TBS version 3.0.</div></td>
      </tr>
      <tr>
        <td align="left" valign="top" class="opt-name">RemplacePar</td>
        <td align="left" valign="top">Facultatif. la valeur par défaut est <em><span style="color:#0033CC">False</span></em>.        Si cet argument est une chaîne alors le source du bloc est remplacée par celle-ci dans le modèle. Vous pouvez utiliser <span class="opt-name">RemplacePar</span> = <span class="opt-value">''</span> (chaîne vide) pour supprimer le source du bloc dans el modèle.<br>
          <div class="versioning">Historique : cet argument est supporté depuis TBS version 3.05.</div></td>
      </tr>
    </table>
    <span class="txt-code"> </span><br>
    Cette méthode permet de récupérer le source d'un bloc afin de gérer manuellement sa fusion. 
    Si par la suite vous souhaitez remplacer le bloc par du texte, vous pouvez utiliser ma méthode <a href="#php_mergeblock">MergeBlock()</a> avec le paramètre '<span class="opt-value">text</span>'.<br>
    <div class="versioning">Historique : Depuis TBS 3.05 si <span class="opt-name">EnTableau</span> est <span class="opt-type">False</span> alors la méthode retourne le bloc avec toutes ses sections ; avant  TBS 3.05 elle retourne uniquement la première section. Depuis TBS 3.05 si <span class="opt-name">EnTableau</span> est <span class="opt-type">True</span> et que le bloc n'est pas trouvé alors la méthode retourne <span class="opt-value">False</span> ; avant TBS 3.05 elle retourne un tableau vide.</div>
  </div>
  <h3><a name="php_mergefield" id="php_mergefield"></a>Méthode MergeField() :</h3>
  <div class="norm">Fusionne un ou plusieurs champs TBS avec une valeur fixe ou en appelant une fonction utilisateur.<br>
    Depuis TBS version 3.0, il est aussi possible d'indiquer une méthode de classe (voir <a href="#php_oop">POO</a>).<br>
    Tous les champs du modèle ayant le nom de base indiqué seront fusionnés.<br>
    Il est aussi possible de fusionner les champs spéciaux  [onload], [onshow] et [var] (voir plus bas). <br>
    <br>
    Syntaxe : <span class="txt-code"><span class="opt-name">$TBS</span>-&gt;MergeField(<span class="opt-type">string </span><span class="opt-name">NomBase</span>,<span class="opt-type"> mixed</span> <span class="opt-name">X</span> {,<span class="opt-type"> boolean</span> <span class="opt-name">ModeFonction</span>}{, <span class="opt-type">array</span> <span class="opt-name">PrmParDefaut</span><span class="txt-code">})</span></span> <br>
    <br>
    <table border="0" cellpadding="5" cellspacing="0">
      <tr class="title-1b">
        <td width="80" align="left" valign="top">Argument</td>
        <td align="left" valign="top">Description</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="opt-name">NomBase</td>
        <td align="left" valign="top">Le nom de base des champs TBS. Par exemple <span class="opt-value">'compte'</span>.</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="opt-name">X</td>
        <td align="left" valign="top">La valeur à afficher (ou une chaîne représentant le nom d'une fonction utilisateur si l'argument <span class="opt-name">ModeFonction</span> est à <span class="opt-value">true</span>).</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="opt-name">ModeFonction</td>
        <td align="left" valign="top"><p>Indique que la valeur à afficher est calculée par une fonction utilisateur. La valeur par défaut est <span class="opt-value">false</span>. Si cet argument est à <span class="opt-value">true</span>, alors <span class="opt-name">X</span> doit être une chaîne texte donnant le nom de la fonction utilisateur. Cette fonction doit exister et avoir la syntaxe décrite ci-après.</p></td>
      </tr>
      <tr>
        <td align="left" valign="top" class="opt-name">PrmParDefaut</td>
        <td align="left" valign="top"><p>Liste des paramètres à appliquer par défaut aux champs fusionnés. Les paramètres doivent être donnés sous forme d'un tableau PHP associatif. Si un paramètre est défini à la fois dans l'argument PrmParDefaut et dans le champ, c'est le paramètre du champ qui sera pris en compte.<br>
            <span class="versioning">Cet argument est supportés depuis TBS version 3.5.0.</span><br>
          </p></td>
      </tr>
    </table>
    <br>
    <span class="title-1b">Fusion avec une valeur :</span><br>
    <br>
    <span class="opt-name">X</span> peut être un numérique, une chaîne, un tableau ou un objet. Pour un tableau ou un objet, les noms de champs TBS doivent avoir des suffixes comme pour les <a href="#html_field_auto">champs automatiques ([onload] et [onshow])</a>.<br>
    <br>
    Exemple : <br>
    <div class="decal">
      <div class="txt-code"><span class="opt-name">$TBS-&gt;</span>MergeField(<span class="opt-value">'compte'</span>,array(<span class="opt-value">'id'</span>=&gt;<span class="opt-value">55</span>,<span class="opt-value">'nom'</span>=&gt;<span class="opt-value">'Bob'</span>));<br>
      </div>
      <div class="txt-small">Dans cet exemple, les champs <span class="opt-value"></span>[compte.id] et [compte.nom] seront fusionnés.</div>
    </div>
    <br>
    <span class="title-1b">Fusion avec une fonction utilisateur :</span><br>
    <br>
    TBS appelle une fonction utilisateur pour chaque champ trouvé dans le modèle.<br>
    Cette fonction doit avoir la syntaxe suivante:<br>
    <div class="decal txt-code">function fct_utilisateur(<span class="opt-name">$Subname</span> [, <span class="opt-name">$PrmLst</span>]) {...}</div>
    Lors de l'appel à la fonction, son argument <span class="opt-name">$Subname</span> a pour valeur le suffixe du nom du champ (par exemple pour un champ nommé <span class="opt-value">'ml.titre'</span>, <span class="opt-name">$Subname</span> aura pour valeur <span class="opt-value">'titre')</span>. Et l'argument optionnel <span class="opt-name">$PrmLst</span> contient un tableau associatif avec les paramètres du champ. La fonction doit retourner la valeur à fusionner. <br>
    <br>
    Exemple : <br>
    <div class="decal">
      <div class="txt-code"><span class="opt-name">$TBS-&gt;</span>MergeField(<span class="opt-value">'ml'</span>,<span class="opt-value">'m_multilangue'</span>,<span class="opt-value">true</span>);<br>
        ...<br>
        function m_multilangue(<span class="opt-name">$Subname</span>) {<br>
        &nbsp;&nbsp;global <span class="opt-name">$langue_id</span>; <br>
        &nbsp;&nbsp;<span class="opt-name">$rs</span> = mysql_query(<span class="opt-value">&quot;SELECT texte_$langue_id AS txt FROM t_langue WHERE cle='$Subname&quot;</span>);<br>
        &nbsp;&nbsp;<span class="opt-name">$rec</span> = mysql_fetch_array(<span class="opt-name">$rs</span>);<br>
        &nbsp;&nbsp;return <span class="opt-name">$rec</span>[<span class="opt-value">'txt'</span>] ;<br>
        }</div>
      <div class="txt-small">Dans cet exemple, un champ tel que <span class="opt-value">[ml.titre]</span> sera fusionné avec la valeur retournée par <span class="opt-value">m_multilangue('titre')</span>.</div>
    </div>
    <span class="title-1b"><br>
    Fusion de champs et blocs automatiques :</span><br>
    <br>
    Vous pouvez vous servir de la méthode MergeField() pour forcer la fusion des <a href="#html_field_auto">champs</a> et <a href="#html_block_auto">blocs</a> automatiques  ([onload] et [onshow]). Mais dans ce cas, seul le premier argument doit être indiqué.<br>
    Exemple : <span class="txt-code"><span class="opt-name">$TBS-&gt;</span>MergeField(<span class="opt-value">'var'</span>);<br>
    </span>
    <div class="versioning">Historique : la fusion des champs spéciaux est supportée depuis TBS version 3.0. Elle remplace l'ancienne méthode MergeSpecial() qui n'est plus supportée. <br>
      <br>
    </div>
  </div>
  <h3><a name="php_plugin" id="php_plugin"></a>Méthode PlugIn() :</h3>
  <div class="norm">Permet d'appeler une commande d'un <a href="#plugins_tbs">plug-in TBS</a> ou d'installer un plug-in TBS. <br>
    <br>
    Syntaxe : <span class="opt-type"><span class="txt-code">mixed</span></span> <span class="txt-code"><span class="opt-name">$TBS</span>-&gt;PlugIn(<span class="opt-type"><span class="opt-value">mixed</span></span> arg1, <span class="opt-type">mixed</span> arg2, ...)</span><br>
    <br>
    <span class="title-1b">Rappel :</span> pour que votre plug-in TBS fonctionne, sont script PHP doit préalablement être inséré dans votre application.<br>
    Exemple : <span class="txt-code"><span class="opt-name">include_once</span>(<span class="opt-value">'tbs_plugin_xxx.php'</span>); </span><br>
    De plus, chaque plug-in TBS doit avoir une clé comme expliqué au chapitre <a href="#plugins_tbs">Plug-ins</a>.<br>
    <br>
    <span class="title-1c">Appeler une commande d'un plug-in :</span><br>
    Utilisez la clé du plug-in comme argument principal. Les arguments suivants sont propres au plug-in appelé. <br>
    Exemple : <br>
    <div class="decal">
      <div class="txt-code"><span class="opt-name">$TBS-&gt;</span>PlugIn(<span class="opt-value">TBS_XXX</span>,<span class="opt-name">$arg1</span>,<span class="opt-name">arg2</span>);</div>
      <span class="txt-small">Dans	cet exemple,	le plug-in identifié par la clé TBS_XXX est invoqué.</span></div>
    <span class="title-1b">Remarque :</span> lorsque vous vous appelez une commande d'un plug-in pour la première fois, ce plug-in  est installé automatiquement sur l'instance TBS (<span class="opt-name">$TBS</span>).<br>
    <br>
    <span class="title-1c">Installer un plug-in  : </span><br>
    Bien que certains plug-in soient installés automatiquement, dans d'autres cas il peut être utile de faire une installation manuelle. Pour cela on utilise la constante TBS_INSTALL avec la clé du plug-in .<br>
    Exemple : <br>
    <br>
    <div class="decal">
      <div class="txt-code"><span class="opt-name">$TBS-&gt;</span>PlugIn(<span class="opt-value">TBS_INSTALL</span>,<span class="opt-value">TBS_XXX</span>);</div>
      <span class="txt-small">Dans	cet exemple,	le plug-in identifié par la clé TBS_XXX est installé.</span> </div>
    <span class="title-1b">Remarques :</span><br>
    * Un plug-in est installé relativement à une instance de TBS (une variable <span class="opt-name">$TBS</span> par exemple ). Si vous utilisez une deuxième instance de TBS (par exemple <span class="opt-name">$TBS2</span>) alors il vous faudra aussi installer le plug-in sur cette instance. <br>
    * 
    Un plug-ins est installé automatiquement lors que vous appelez une de ses commandes à l'aide de la méthode PlugIn() (voir plus haut).<br>
    <br>
    <br>
    <div class="versioning">Historique : la méthode PlugIn() est supportée depuis TBS version 3.0. </div>
  </div>
  <h3><a name="php_assigned" id="php_assigned"></a>Propriété Assigned :</h3>
  <div class="norm"> Permet de définir les informations pour une fusion ultérieure qui peut être automatique ou manuelle.<br>
    <br>
    Syntaxe : <span class="txt-code"><span class="opt-type">array</span> <span class="opt-name">$TBS</span>-&gt;Assigned</span><br>
    <br>
    La propriété Assigned est un tableau PHP définie par l'utilisateur. On y enregistre les arguments des méthodes MergeBlock() ou MergeField(). Les arguments doivent être enregistrés dans un tableau PHP avec des clés numériques et ordonnées en suivant la syntaxe de ces méthodes. Il est possible d'utiliser des clés chaines optionnelles  pour définir certains comportements :<br>
    <table border="0" cellpadding="5" cellspacing="0">
      <tr class="title-1b">
        <td>Clé optionnelle</td>
        <td>Description</td>
      </tr>
      <tr>
        <td valign="top" nowrap><span class="opt-value">'type'</span>=&gt;<span class="opt-value">'mergeblock'</span></td>
        <td>Indique qu'il s'agit d'arguments pour la méthode MergeBlock(). Cette clé est facultative puisque c'est le comportement par défaut.</td>
      </tr>
      <tr>
        <td valign="top" nowrap><span class="opt-value">'type'</span>=&gt;<span class="opt-value">'mergefield'</span></td>
        <td>Indique qu'il s'agit d'arguments pour la méthode MergeField().</td>
      </tr>
      <tr>
        <td valign="top" nowrap><span class="opt-value">'auto'</span>=&gt;<span class="opt-value">'onload'</span></td>
        <td>Indique que la fusion doit être lancée automatiquement après les balises [onload].</td>
      </tr>
      <tr>
        <td valign="top" nowrap><span class="opt-value">'auto'</span>=&gt;<span class="opt-value">'onshow'</span></td>
        <td>Indique que la fusion doit être lancée automatiquement après les balises [onshow].</td>
      </tr>
      <tr>
        <td valign="top" nowrap><span class="opt-value">'merged'</span>=&gt;<span class="opt-value">0</span></td>
        <td>Cette clé est ajoutée automatiquement par TBS lors de la fusion. Elle compte le nombre de fois où cette entrée a été fusionnée.</td>
      </tr>
    </table>
    <br>
    Exemple de fusion manuelle : <br>
    <div class="decal">
      <div class="txt-code"><span class="opt-name">$TBS</span>-&gt;Assigned[<span class="opt-value">'b'</span>] = array(<span class="opt-value">'b1,b2'</span>, &amp;<span class="opt-name">$cnx_id</span>, <span class="opt-value">'SELECT id, nom FROM table1'</span>);<br>
        ... <br>
        <span class="opt-name">$TBS</span>-&gt;MergeBlock(<span class="opt-value">'b'</span>); <span class="opt-html">// fusionne les blocks b1 et b2 avec la requête SQL</span><br>
        <br>
      </div>
    </div>
    Exemple de fusion automatique : <br>
    <div class="decal">
      <div class="txt-code"><span class="opt-name">$TBS</span>-&gt;Assigned[<span class="opt-value">'b'</span>] = array(<span class="opt-value">'b1,b2'</span>, &amp;<span class="opt-name">$cnx_id</span>, <span class="opt-value">'SELECT id, nom FROM table1'</span>, <span class="opt-value">'auto'</span>=&gt;<span class="opt-value">'onload'</span>); </div>
    </div>
    <br>
    Exemple de fusion de champs : <br>
    <div class="decal">
      <div class="txt-code"><span class="opt-name">$TBS</span>-&gt;Assigned[<span class="opt-value">'f1'</span>] = array(<span class="opt-value">'f1'</span>, <span class="opt-name">$data</span>, <span class="opt-value">'type'</span>=&gt;<span class="opt-value">'mergefield'</span>);<br>
        ... <br>
        <span class="opt-name">$TBS</span>-&gt;MergeField(<span class="opt-value">'f1'</span>); <span class="opt-html">// fusionne le ou les  champs f1 avec le tableau $data</span><br>
      </div>
    </div>
    <br>
    Remarques :<br>
    - Pour fusionner un bloc ou un champ déjà assigné, il suffit d'appeler la méthode correspondante avec seulement le nom de la clé assignée. Vous pouvez ajouter l'argument Source = <span class="opt-value">'assigned'</span>, mais cela est facultatif car il s'agit de la valeur par défaut. En d'autres termes, <span class="opt-name">$TBS</span>-&gt;MergeBlock(<span class="opt-value">'b'</span>) équivaut à <span class="opt-name">$TBS</span>-&gt;MergeBlock(<span class="opt-value">'b'</span>, <span class="opt-value">'assigned'</span>).<br>
    - Une assignation avec <span class="opt-value">'auto'</span>=&gt;<span class="opt-value">'onload'</span> ne serra bien sûr  fusionnée que si elle est définie avant d'appeler méthode LoadTemplate().<br>
    - Vous pouvez passer des arguments par <a href="http://www.php.net/manual/en/language.references.php">référence</a> dans vos assignations. C'est particulièrement utile pour PHP 4 qui passe les objets en copie par défaut. <br>
    <br>
    <br>
    <div class="versioning">Historique : la propriété Assigned est supportée depuis TBS version 3.5. </div>
  </div>
  <h3><a name="php_noerr" id="php_noerr"></a>Propriété NoErr :</h3>
  <div class="norm"> Permet d'empêcher l'affichage de tous les messages d'erreur TinyButStrong pour les opérations qui suivent. Par défaut la valeur est à <span class="opt-value">false</span>. Les erreurs qui n'ont pas été affichées peuvent toutefois  être restituées avec le champ spécial <a href="#html_field_special" class="opt-name">[onshow..error_msg]</a>. De plus vous pouvez contrôler la présence d'erreur gr&acirc;ce à la propriété <span class="opt-value">ErrCount</span> qui compte les erreurs TBS   indépendanement de <span class="opt-value">NoErr</span>.<br>
    <br>
    Syntaxe : <span class="txt-code"><span class="opt-type">boolean</span> <span class="opt-name">$TBS</span>-&gt;NoErr<br>
    <br>
    </span>
    <div> Exemple : <span class="txt-code"><span class="opt-name">$TBS-&gt;</span>NoErr = <span class="opt-value">true</span>; <span class="opt-html">// plus aucun message d'erreur ne s'affiche.</span></span></div>
    <br>
    La propriété <span class="opt-value">NoErr</span> est pratique dans deux cas :<br>
    - Pour les sites professionnels mis en production pour lesquels aucun message d'erreur ne doit être affiché. Attention car vous n'avez  plus aucune indication sur le bon déroulement de votre fusion. Il est souvent plus judicieux d'utiliser le paramètre <a href="#html_field_prm_noerr" class="opt-name">noerr</a> qui permet d'annuler des messages sur une balise TBS bien précise.<br>
    - Pour les fusions qui n'acceptent  pas 
    les messages d'erreur basic de TinuButStrong. Par exemple un document OpenOffice ne pourra pas s'ouvrir correctement si une erreur TBS survient. Utilisez <span class="txt-code"><span class="opt-name">$TBS</span>-&gt;NoErr=<span class="opt-value">true</span></span> et le champ <a href="#html_field_special" class="opt-name">[onshow..error_msg]</a> pour afficher les erreurs TBS dans un emplacement lisible de votre document OpenOffice.<br>
    <br>
    <div class="versioning">Historique :<br>
      - La propriété NoErr est supportée depuis TBS version 3.0.<br>
      - 
      Le champ spécial [onshow..error_msg] est supporté depuis TBS version 3.5.0.<br>
    </div>
  </div>
  <h3><a name="php_render" id="php_render"></a>Propriété Render :</h3>
  <div class="norm"> Détermine comment doit se terminer la fusion.<br>
    Sa valeur doit être une combinaison des constantes du tableau ci-dessous.<br>
    Par défaut, sa valeur est (<span class="opt-value">TBS_OUTPUT</span> + <span class="opt-value">TBS_EXIT</span>).<br>
    <br>
    Syntaxe : <span class="txt-code"><span class="opt-type">int</span> <span class="opt-name">$TBS</span>-&gt;Render<br>
    <br>
    </span>La propriété Render influe sur le comportement de la méthode <a href="#php_show">Show()</a>.<br>
    <br>
    <table border="0" cellpadding="5" cellspacing="0">
      <tr class="title-1b">
        <td width="80" align="left" valign="top">Constante</td>
        <td align="left" valign="top">Description</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="opt-value">TBS_NOTHING</td>
        <td align="left" valign="top">Indique qu'aucune action ci-dessous n'est effectuée à la fin de la fusion.</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="opt-value">TBS_OUTPUT</td>
        <td align="left" valign="top">Indique que le résultat de la fusion doit être affiché. (utilisation de la commande PHP Echo)</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="opt-value">TBS_EXIT</td>
        <td align="left" valign="top">Indique qu'on doit quitter le script juste après la fin de la fusion.</td>
      </tr>
    </table>
  </div>
  <h3><a name="php_source" id="php_source"></a>Propriété Source :</h3>
  <div class="norm">Cette propriété contient le source du modèle en cours de fusion. Elle est en lecture/écriture. <br>
    Lorsque TinyButStrong opère une fusion (en utilisant la méthode MergeBlock() par exemple), la propriété Source est  modifiée immédiatement. <br>
    <br>
    Syntaxe : <span class="txt-code"><span class="opt-type">string</span> <span class="opt-name">$TBS</span>-&gt;Source</span><br>
    <br>
    Remarques : <br>
    - La méthode <a href="#php_loadtemplate">LoadTemplate()</a> charge un fichier dans la propriété Source et fusionne automatiquement les balises [onload]. Il se peut donc que Source soit un peu différent du modèle initial après LoadTemplate(). <br>
    - La méthode <a href="#php_show">Show()</a> fusionne  automatiquement les balises [onshow] avant d'afficher le résultat. <br>
    <br>
    Pour charger un modèle  contenue dans une variable Php, vous pouvez coder : <br>
    <div class="decal txt-code"><span class="opt-name">$TBS</span>-&gt;Source = <span class="opt-name">$mon_modele</span>;<br>
      <span class="opt-name">$TBS</span>-&gt;LoadTemplate(<span class="opt-value">null</span>);<span class="opt-html"> //  lance les plugins s'il y en a, et fusionne les balises  [onload] s'il y en a</span></div>
    <br>
    Pour récupérer le résultat à la fin d'une fusion, vous pouvez coder :<br>
    <div class="decal txt-code"><span class="opt-name">$TBS</span>-&gt;Show(<span class="opt-value">TBS_NOTHING</span>); <span class="opt-html">// termine la fusion sans quitter ni afficher le résultat</span><br>
      <span class="opt-name">$resultat</span> = <span class="opt-name">$TBS</span>-&gt;Source;</div>
  </div>
  <h3><a name="php_tplvars" id="php_tplvars"></a>Propriété TplVars :</h3>
  <div class="norm">Contient le tableau des variables de modèle correspondant au modèle en cours.<br>
    <br>
    Syntaxe : <span class="txt-code"><span class="opt-type">array</span> <span class="opt-name">$TBS</span>-&gt;TplVars<br>
    </span><br>
    Vous pouvez définir des variables de modèle en utilisant un ou des <a href="#html_field_auto">champs automatiques</a> <span class="opt-name">onload</span> avec le paramètre <span class="opt-name">tplvars</span>. 
    Tous les  paramètres qui suivent le paramètre <span class="opt-name">tplvars</span> sont ajoutés à la propriété TplVars quand la méthode LoadTemplate() est appelée.<br>
    <div class="decal">Exemple :<br>
      &nbsp;&nbsp;[<span class="opt-name">onload</span>;<span class="opt-name">tplvars</span>;<span class="opt-name">template_version</span>=<span class="opt-value">'1.12.27'</span>;<span class="opt-name">template_date</span>=<span class="opt-value">'2004-10-26'</span>]<br>
      <span class="txt-small">Cette balise TBS va créer deux items équivalents au code PHP suivant : </span><br>
      <span class="txt-code"><span class="opt-name">&nbsp;$TBS</span>-&gt;TplVars[<span class="opt-value">'template_version'</span>] = <span class="opt-value">'1.12.27'</span>;</span><br>
      <span class="txt-code"><span class="opt-name">&nbsp;$TBS</span>-&gt;TplVars[<span class="opt-value">'template_date'</span>] = <span class="opt-value">'2004-10-26'</span>;</span> <br>
    </div>
    Remarques :<br>
    - Le paramètre <span class="opt-name">tplvars</span> ne fonctionne qu'avec les <a href="#html_field_auto">champs automatiques</a> <span class="opt-name">onload</span>.<br>
    - Vous pouvez utiliser le paramètre <span class="opt-name">tplvars</span> plusieurs fois dans le même modèle. <br>
  </div>
  <h3><a name="php_oop" id="php_oop"></a>Programmation Orientée Objet (POO):</h3>
  <div class="norm" id="v202_oop"> TinyButStrong intègre une technique pour faire appel à des méthodes ou des propriétés d'objets que vous avez codés du côté PHP.<br>
    <br>
    <span class="title-1c">Appels à  des méthodes de classe sans objet crées  :</span> <br>
    <div class="decal">Les fonctionnalités TBS suivantes supportent l'appel à des méthodes de classe sans objet crées.
      <div class="decal">
        <table width="100%"  border="0" cellspacing="0" cellpadding="2">
          <tr class="title-1b">
            <td width="180">Fonctionnalité</td>
            <td>Exemple</td>
          </tr>
          <tr id="v205_ondata_ooo">
            <td>Paramètre <a href="#html_block_prm_ondata">ondata</a></td>
            <td>[<span class="opt-name">blk1</span>.colonne1;<span class="opt-name">block</span>=<span class="opt-value">tr</span>;<span class="opt-name">ondata</span>=<span class="opt-value">MaClasse.methA</span>]</td>
          </tr>
          <tr>
            <td>Paramètre <a href="#html_field_prm_onformat">onformat</a></td>
            <td>[<span class="opt-name">blk1</span>.colonne2;<span class="opt-name">onformat</span>=<span class="opt-value">MaClasse.methB</span>]</td>
          </tr>
          <tr>
            <td>Méthode <a href="#php_loadtemplate">LoadTemplate()</a></td>
            <td>$TBS-&gt;<span class="opt-name">LoadTemplate</span>(<span class="opt-value">'monmodele.htm'</span>,<span class="opt-value">'=MaClasse.methC'</span>);</td>
          </tr>
          <tr>
            <td>Méthode <a href="#php_mergefield">MergeField()</a></td>
            <td>$TBS-&gt;<span class="opt-name">MergeField</span>(<span class="opt-value">'nomchamp'</span>,<span class="opt-value">'MaClasse.methD'</span>,<span class="opt-value">true</span>);</td>
          </tr>
        </table>
      </div>
      <span class="title-1b">Remarque :</span> Les méthodes appelées par cette technique doivent respecter la syntaxe de fonction attendue par la fonctionnalité (voir description de la fonctionnalité correspondante).</div>
    <br>
    <span class="title-1c">Appels à des objets crées  :</span> <br>
    <br>
    <div class="decal">TBS possède une propriété ObjectRef qui est à <span class="opt-type">false</span> par défaut, et dont vous pouvez vous servir pour référencer vos objets déjà crées. Vous pouvez référencer un objet directement sur la propriété ObjectRef, ou bien vous pouvez en référencer plusieurs à l'aide de tableaux PHP.<br>
      Exemple : <br>
      <div class="decal"> <span class="txt-code"><span class="opt-name">$TBS</span>-&gt;ObjectRef =&amp; <span class="opt-name">$MonObjet1</span>;</span><br>
        &nbsp;&nbsp;&nbsp;Vous pouvez utiliser un tableau si vous avez plusieurs objets à référencer :<br>
        <span class="txt-code"><span class="opt-name">$TBS</span>-&gt;ObjectRef[<span class="opt-value">'item1'</span>] =&amp; <span class="opt-name">$MonObjet1</span>;</span><br>
        <span class="txt-code"><span class="opt-name">$TBS</span>-&gt;ObjectRef[<span class="opt-value">'item2'</span>] =&amp; <span class="opt-name">$MonObjet2</span>;</span><br>
        &nbsp;&nbsp;&nbsp;Vous pouvez utilisez autant de niveau que vous le souhaitez :<br>
        <span class="txt-code"><span class="opt-name">$TBS</span>-&gt;ObjectRef[<span class="opt-value">'item3'</span>][<span class="opt-value">'a'</span>][<span class="opt-value">0</span>] =&amp; <span class="opt-name">$MonObjet3</span>;</span></div>
      <span class="title-1b">Remarques :</span><br>
      * Pensez à utiliser l'assignation par référence à l'aide de &quot;=&amp;&quot; au lieu de &quot;=&quot;, sinon une copie de l'objet sera créée.<br>
      * Une fois un objet référencé sous ObjectRef, ses sous-objets seront aussi accessibles par la syntaxe TBS. <br>
      <br>
      <span class="title-1b">&bull; Utilisation d'ObjectRef dans les champs automatiques :</span> <br>
      Utilisez le symbole '~' pour appeler ce qui est référencé sous ObjectRef.<br>
      Par exemple (valables aussi bien pour <span class="opt-name">[onload]</span>, <span class="opt-name">[onshow]</span> et <span class="opt-name">[var</span>]):<br>
      <div class="decal">
        <table border="0" cellpadding="3" cellspacing="0">
          <tr class="title-1b">
            <td>Le champ </td>
            <td width="10">&nbsp;</td>
            <td>Ferra appel à </td>
          </tr>
          <tr>
            <td>[<span class="opt-name">onshow</span>.~<span class="opt-name">propA</span>]</td>
            <td class="txt-code">&nbsp;</td>
            <td class="txt-code"><span class="opt-name">$TBS</span>-&gt;ObjectRef-&gt;propA</td>
          </tr>
          <tr>
            <td>[<span class="opt-name">onshow</span>.~<span class="opt-name">propA</span>.<span class="opt-name">propB</span>]</td>
            <td class="txt-code">&nbsp;</td>
            <td class="txt-code"><span class="opt-name">$TBS</span>-&gt;ObjectRef-&gt;propA-&gt;propB</td>
          </tr>
          <tr>
            <td>[<span class="opt-name">onshow</span>.~<span class="opt-name">item2</span>.<span class="opt-name">propA</span>]</td>
            <td class="txt-code">&nbsp;</td>
            <td class="txt-code"><span class="opt-name">$TBS</span>-&gt;ObjectRef[<span class="opt-value">'item2'</span>]-&gt;propA</td>
          </tr>
          <tr>
            <td>[<span class="opt-name">onshow</span>.~<span class="opt-name">item2</span>.<span class="opt-name">methX</span>]</td>
            <td class="txt-code">&nbsp;</td>
            <td class="txt-code"><span class="opt-name">$TBS</span>-&gt;ObjectRef[<span class="opt-value">'item2'</span>]-&gt;methX()</td>
          </tr>
          <tr>
            <td>[<span class="opt-name">onshow</span>.~<span class="opt-name">item2</span>.<span class="opt-name">methY(a,b)</span>]</td>
            <td class="txt-code">&nbsp;</td>
            <td class="txt-code"><span class="opt-name">$TBS</span>-&gt;ObjectRef[<span class="opt-value">'item2'</span>]-&gt;methY(<span class="opt-value">'a'</span>,<span class="opt-value">'b'</span>)</td>
          </tr>
        </table>
      </div>
      <span class="title-1b">Remarques : </span><br>
      TBS opère un contrôle de cohérence, il déterminera de lui même  si votre définition de <a href="#html_field_auto">champ automatique</a> fait appel à ObjectRef via un item d'un tableau, une propriété d'objet ou une méthode d'objet. Dans tous les cas, faites bien attention à ce que votre <a href="#html_field_auto">champ automatique</a> doit au final retourner  une valeur et non pas un objet.<br>
      <br>
      <span class="title-1b">&bull; Utilisation d'ObjectRef dans d'autres fonctionnalités TBS :</span> <br>
      Les fonctionnalités TBS suivantes supportent l'appel à des méthodes d'objets référencés sous ObjectRef.<br>
      <div class="decal">
        <table width="100%"  border="0" cellspacing="0" cellpadding="2">
          <tr class="title-1b">
            <td width="180">Fonctionnalité</td>
            <td>Exemple</td>
          </tr>
          <tr id="v205_ondata_ooo">
            <td>Paramètre <a href="#html_block_prm_ondata">ondata</a></td>
            <td>[<span class="opt-name">blk1</span>.colonne1;<span class="opt-name">block</span>=<span class="opt-value">tr</span>;<span class="opt-name">ondata</span>=<span class="opt-value">~item1.methA</span>]</td>
          </tr>
          <tr>
            <td>Paramètre <a href="#html_field_prm_onformat">onformat</a></td>
            <td>[<span class="opt-name">blk1</span>.colonne2;<span class="opt-name">onformat</span>=<span class="opt-value">~item1.methB</span>]</td>
          </tr>
          <tr>
            <td>Méthode <a href="#php_loadtemplate">LoadTemplate()</a></td>
            <td>$TBS-&gt;<span class="opt-name">LoadTemplate</span>(<span class="opt-value">'monmodele.htm'</span>,<span class="opt-value">'=~item1.methC'</span>);</td>
          </tr>
          <tr>
            <td>Méthode <a href="#php_mergefield">MergeField()</a></td>
            <td>$TBS-&gt;<span class="opt-name">MergeField</span>(<span class="opt-value">'nomchamp'</span>,<span class="opt-value">'~item1.methD'</span>,<span class="opt-value">true</span>);</td>
          </tr>
          <tr>
            <td>Méthode <a href="#php_mergeblock">MergeBlock()</a></td>
            <td>$TBS-&gt;<span class="opt-name">MergeBlock</span>(<span class="opt-value">'blk1'</span>,<span class="opt-value">'~madb'</span>,<span class="opt-value">'SELECT * FROM t_table'</span>);</td>
          </tr>
        </table>
      </div>
      <span class="title-1b">Remarque :</span> Les méthodes appelées par cette technique doivent respecter la syntaxe de fonction attendue par la fonctionnalité (voir description de la fonctionnalité correspondante).</div>
    <br>
    <br>
  </div>
  <a name="html_side" id="html_side"></a>
  <h2>Coté modèle :</h2>
  Vous concevez votre modèle en plaçant des balises TBS aux endroits où doivent figurer les données.<br>
  <br>
  Il existe deux types de balises TBS : les <em>champs</em> et les <em>blocs</em>.<br>
  <br>
  Un <span class="title-1b">champ TBS</span> est une balise TBS qui doit être remplacé par une donnée simple. Il est possible de spécifier un format d'affichage ainsi que d'autres paramètres. La syntaxe des champs TBS est décrite <a href="#html_field">ci-après</a>.<br>
  <br>
  Un <span class="title-1b">bloc TBS</span> est une région qui devra être répétée. Il est défini par une ou deux balises TBS.<br>
  Le plus souvent il s'agit d'une ligne d'un tableau HTML. La syntaxe des blocs TBS est décrite <a href="#html_block">ci-après</a>.<br>
  <h3><a name="html_field" id="html_field"></a>Les champs TBS :</h3>
  <div class="norm">Un champ TBS est une balise TBS qui doit être remplacé par une donnée simple.<br>
    Un champ TBS doit  avoir un nom pour l'identifier (qui n'est pas obligatoirement unique) et il peut avoir des paramètres pour modifier la valeur affichée.<br>
    <br>
    Syntaxe : <span class="opt-html"><strong>MODÈLE ... </strong></span>[<span class="opt-name">NomChamp</span>{;<span class="opt-name">param1</span>}{;<span class="opt-name">param2</span>}{;<span class="opt-name">param3</span>}{...}]<span class="opt-html"><strong> ... MODÈLE</strong></span> <br>
    <br>
    <table border="0" cellpadding="5" cellspacing="0">
      <tr class="title-1b">
        <td width="80" align="left" valign="top">Élément</td>
        <td align="left" valign="top">Description</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="opt-name">NomChamp</td>
        <td align="left" valign="top">Le nom du champ.<br>
          Attention : les noms de champs commençant par <span class="opt-name">onload</span>, <span class="opt-name"> onshow</span> et <span class="opt-name">var.</span> sont réservés pour les <a href="#html_field_auto">champs automatiques</a>.</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="opt-name">param1</td>
        <td align="left" valign="top"> Facultatif. Un ou plusieurs paramètres de la liste ci-dessous, séparés par des ';'.<br>
          Certains paramètres peuvent être affectés d'une valeur en utilisant le caractère '='.<br>
          <span class="decal">Exemple : <span class="opt-name">frm</span>=<span class="opt-value">0.00</span></span><br>
          Si la valeur du paramètre contient des espaces, des points-virgules ou des guillemets, alors vous pouvez utiliser les guillemets simples comme délimiteurs.<br>
          <span class="decal">Exemple : <span class="opt-name">frm</span>=<span class="opt-value">'0 000.00'</span></span><br>
          Utilisez deux guillemets simples pour définir un caractère guillemet   dans une chaîne délimitée.<br>
          <span class="decal">Exemple : <span class="opt-name">ifempty</span>=<span class="opt-value">'coucou c''est moi'</span></span><br>
          <br>
          Un paramètre peut contenir un champ TBS imbriqué mais uniquement dans certaines circonstances :<br>
          - le champ imbriqué soit fusionné avant le champ parent,<br>
          - le champ imbriqué est un  champ <span class="opt-name">[var]</span> placé dans un paramètre <a href="#html_field_prm_file" class="opt-name">file</a>, <a href="#html_field_prm_script" class="opt-name">script</a>, <a href="#html_field_prm_if" class="opt-name">if</a>, <span class="opt-name">then</span>, <span class="opt-name">else</span> ou <a href="#html_block_prm_when" class="opt-name">when</a>.<br>
          Dans les autres cas, le champ TBS imbriqué ne sera pas fusionné et sera interprété tel quel comme du texte.<br>
          Exemples : <br>
          <div class="decal"><span class="opt-html">[x;htmlconv=[var.y]]</span> : [var.y] ne sera pas fusionné et le paramètre &quot;htmlconv&quot; aura une valeur non valide.<br>
            <span class="opt-html">[x;if [var.y]=1]</span> : [var.y] sera correctement fusionné et la condition &quot;if&quot; sera correctement évaluée.</div></td>
      </tr>
    </table>
    <span class="opt-name"><a name="html_field_prm" id="html_field_prm"></a></span><br>
    <div class="title-1c">Paramètres des champs :</div>
    <br>
    <table border="0" cellpadding="5" cellspacing="0">
      <tr class="title-1b">
        <td width="80" align="left" valign="top">Paramètre</td>
        <td align="left" valign="top">Description</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="border-sep"><span class="opt-name"><a name="html_field_prm_htmlconv" id="html_field_prm_htmlconv"></a>htmlconv</span>=<span class="opt-value">val</span></td>
        <td align="left" valign="top" class="border-sep">Permet de modifier la conversion des caractères spéciaux pour ce champ TBS uniquement. Notez que la conversion de caractères spéciaux utilisée par défaut pour tous les champs TBS est celle définie par la méthode <a href="#php_loadtemplate">LoadTemplate()</a>. Elle correspond souvent à un charset Xml/Html, mais pas nécessairement.<br>
          La valeur <span class="opt-name"><span class="opt-value">val</span></span> peut être l'un des mots-clés suivants :
          <div class="decal">
            <table border="0" cellspacing="0" cellpadding="2">
              <tr>
                <td width="50" valign="top"><span class="opt-value">yes</span></td>
                <td>(valeur par défaut) Applique la conversion des caractères spéciaux par défaut, y compris les sauts de ligne.</td>
              </tr>
              <tr>
                <td valign="top"><span class="opt-value">no</span></td>
                <td>Annule la conversion des caractères spéciaux. Utile pour modifier le source Xml/Html.</td>
              </tr>
              <tr>
                <td valign="top"><span class="opt-value">nob</span></td>
                <td> Laisse la conversion des caractères spéciaux mais  sans les sauts de ligne (utile pour la balise &lt;pre&gt; par exemple).</td>
              </tr>
              <tr>
                <td valign="top"><span class="opt-value">wsp</span></td>
                <td>Préserve les espaces blancs (utile pour les espaces de début de ligne).</td>
              </tr>
              <tr>
                <td valign="top"><span class="opt-value">esc</span></td>
                <td>Annule la conversion des caractères spéciaux et double les caractères guillemets simples ('). </td>
              </tr>
              <tr>
                <td valign="top"><span class="opt-value">js</span></td>
                <td>Convertie la donnée en une chaîne qui peut être insérée entre des délimiteurs texte JavaScript </td>
              </tr>
              <tr>
                <td valign="top"><span class="opt-value">url</span></td>
                <td>Convertie la donnée en une chaîne qui peut être insérée dans une URL. <span class="versioning">(supporté depuis TBS version 3.5.2)</span></td>
              </tr>
              <tr>
                <td valign="top"><span class="opt-value">utf8</span></td>
                <td>Convertie la donnée en UTF-8. <span class="versioning">(supporté depuis TBS version 3.6.0)</span></td>
              </tr>
              <tr>
                <td valign="top"><span class="opt-value">look</span></td>
                <td>Déprécié. Applique la conversion des caractères spéciaux par défaut uniquement  si aucune balise Xml/Html n'est trouvée dans cette donnée.</td>
              </tr>
            </table>
          </div>
          Vous pouvez spécifier plusieurs mots-clés en utilisant le séparateur <span class="opt-value">'+'</span>. Exemple : <span class="opt-name">htmlconv</span>=<span class="opt-value">yes+js</span></td>
      </tr>
      <tr>
        <td align="left" valign="top" class="border-sep"><span class="opt-name"><a name="html_field_prm_dot" id="html_field_prm_dot"></a>. </span>(point)</td>
        <td align="left" valign="top" class="border-sep">Si la donnée est vide, on affiche un espace Html insécable. Utile pour les cellules d'un tableau.</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="border-sep"><span class="opt-name"><a name="html_field_prm_ifempty" id="html_field_prm_ifempty"></a>ifempty</span>=<span class="opt-value">val</span></td>
        <td align="left" valign="top" class="border-sep">Si la donnée est vide, on la remplace par la valeur indiquée.</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="border-sep"><span class="opt-name"><a name="html_field_prm_att" id="html_field_prm_ifempty2"></a>att</span>=<span class="opt-value">chemin</span></td>
        <td align="left" valign="top" class="border-sep">Déplace le champ en cours dans un attribut d'une balise XML/HTML avant d'être fusionné. Ce paramètre est très utile quand il est trop difficile  pour le concepteur du modèle de placer un champ TBS dans un attribut.<br>
          La valeur <span class="opt-value">chemin</span> doit indiquer l'emplacement de l'attribut relativement au champ en cours.<br>
          Si l'attribut n'existe pas dans la balise spécifiée, alors il est crée.<br>
          Si l'attribut existe déjà dans la balise spécifiée et qu'il a déjà une valeur, alors le champ remplace toute la valeur en cours.<br>
          Vous pouvez choisir de placer le champ en tant que valeur ajoutée gr&acirc;ce au paramètre <a href="#html_field_prm_attadd" class="opt-name">attadd</a>.<br>
          Vous pouvez compléter la valeur de l'attribut en lui appliquant un masque gr&acirc;ce au paramètre <a href="#html_field_prm_ope" class="opt-name">ope</a>=<span class="opt-value">msk</span>.<br>
          Vous pouvez supprimer l'attribut en cas de valeur  vide gr&acirc;ce au paramètre <a href="html_field_prm_attadd" class="opt-name">magnet</a>=<span class="opt-value">#</span>.<br>
          <br>
          Syntaxe pour la valeur <span class="opt-value">chemin</span> :      [<span class="opt-value">+</span>][<span class="opt-value">balise1+balise2+balise3+...#</span>]<span class="opt-value">attribut</span><br>
          Par défaut, l'attribut est recherché avant le champ en cours. Mais si  '<span class="opt-value">+</span>' est le premier caractère du chemin alors il est cherché après. Si aucune liste de balise n'est spécifiée alors l'attribut est regardé dans la première balise rencontrée dans la direction de la recherche. Si une liste de balise est utilisée, <span class="opt-value">balise1</span> est recherché en premier, puis <span class="opt-value">balise2</span>, ... indépendamment du sens de la recherche  (avant/après). Vous pouvez placer un nom de balise entre un ou plusieurs niveaux de parenthèses afin de spécifier que la balise recherchée doit encapsuler le champ en cours.<br>
          <br>
          Exemples :<br>
          <div class="decal">[<span class="opt-name">onshow.x</span>;<span class="opt-name">att</span>=<span class="opt-value">class</span>] se déplace dans l' attribut '<span class="opt-value">class</span>' de la première balise placée avant.<br>
            [<span class="opt-name">onshow.x</span>;<span class="opt-name">att</span>=<span class="opt-value">div#class</span>] se déplace dans l' attribut '<span class="opt-value">class</span>' du premier <span class="opt-html">&lt;div&gt;</span> placé avant.<br>
            [<span class="opt-name">onshow.x</span>;<span class="opt-name">att</span>=<span class="opt-value">+div#class</span>] se déplace dans l' attribut '<span class="opt-value">class</span>' du premier <span class="opt-html">&lt;div&gt;</span> placé après.<br>
            [<span class="opt-name">onshow.x</span>;<span class="opt-name">att</span>=<span class="opt-value">((div))#class</span>] se déplace dans l' attribut '<span class="opt-value">class</span>' du second <span class="opt-html">&lt;div&gt;</span> encapsulant placé avant.<br>
            [<span class="opt-name">onshow.x</span>;<span class="opt-name">att</span>=<span class="opt-value">table+div#class</span>] se déplace dans l' attribut '<span class="opt-value">class</span>' du premier <span class="opt-html">&lt;div&gt;</span> après le premier <span class="opt-html">&lt;table&gt;</span> placé avant.</div>
          <br>
          Remarques :<br>
          - La méthode MergeBlock() ne peut pas déplacer un champ TBS par dessus un autre champ TBS placé après lui. Cela produit une erreur TBS.<br>
          - Quand un attribut n'aucune valeur avant que le champ ne soit déplacé, alors  TBS choisoi quel délimiteur de chaine il doit utiliser en fonction des autres attributs (XML/HTML accepte  (&quot;) et (')). Vous pouvez forcer le délimiteur que vous voulez à l'aide de la propriété  $TBS-&gt;AttDelim.<br>
          <br>
          <span class="versioning">Historique: Le paramètre att est supporté depuis TBS version 3.5.0</span></td>
      </tr>
      <tr>
        <td align="left" valign="top" class="border-sep"><span class="opt-name"><a name="html_field_prm_attadd" id="html_field_prm_ifempty3"></a>attadd</span></td>
        <td align="left" valign="top" class="border-sep">S'utilise avec le paramètre<span class="opt-name"> att</span>. Indique que le champ s'ajoute à la valeur de l'attribut au lieu  de remplacer la valeur de l'attribut. Remarquez que la valeur ajoutée ne sera pas simplement concaténée avec les valeurs précédentes, elle sera ajoutée avec un caractère espace comme séparateur afin de réaliser un ajout au sens des attributs.<br>
          Exemple :
          <div class="decal"><span class="opt-html">&lt;div class=&quot;style1&quot;&gt;</span>[<span class="opt-name">onshow.x</span>;<span class="opt-name">att</span>=<span class="opt-value">class</span>;<span class="opt-name">attadd</span>]<br>
            dans cet exemple, si nous avons <span class="txt-code">$x='style2'</span> alors nous allons obtenir <span class="opt-html">&lt;div class=&quot;style1 style2&quot;&gt;</span></div>
          Il n'y a aucun moyen pour l'instant pour concaténer simplement la valeur du champ avec la valeur précédente de l'attribut. Mais à la pace, vous pouvez utiliser le paramètre <a href="#html_field_prm_ope" class="opt-name">ope</a>=<span class="opt-value">msk</span> afin d'appliquer un masque sur la valeur du champ.<br>
          Exemple :
          <div class="decal"><span class="opt-html">&lt;div class=&quot;ancien&quot;&gt;</span>[<span class="opt-name">onshow.z</span>;<span class="opt-name">att</span>=<span class="opt-value">class</span>;<span class="opt-name">ope</span>=<span class="opt-value">msk:style*</span>]<br>
            dans cet exemple, si nous avons <span class="txt-code">$z='2'</span>alors nous allons obtenir <span class="opt-html">&lt;div class=&quot;style2&quot;&gt;</span></div>
          <br>
          <span class="versioning">Historique: Le paramètre attadd est supporté depuis TBS version 3.5.0</span></td>
      </tr>
      <tr>
        <td align="left" valign="top" class="border-sep"><a name="html_field_prm_atttrue" id="html_field_prm_ifempty4"></a><span class="opt-name">atttrue</span><br>
          <span class="txt-small">or</span><br>
          <span class="opt-name">atttrue</span>=<span class="opt-value">valeur</span></td>
        <td align="left" valign="top" class="border-sep">S'utilise avec la paramètre<span class="opt-name"> att</span>. Indique que l'attribut (désigné par la paramètre <span class="opt-name">att</span>) doit être géré en tant qu'attribut  booléen XHTML/HTML. C'est à dire qu'il est soit présent dans la balise sous la forme <span class="opt-html">attribute=&quot;attribute&quot;</span> pour dire <em>VRAI</em>, soit être omis dans la balise pour dire <em>FAUX</em>.<br>
          Si <span class="opt-name">atttrue</span> est défini avec une <span class="opt-value">valeur</span>, alors l'attribut booléen sera <em>VRAI</em> (<em>présent</em>) si la valeur du champ est égale à cette <span class="opt-value">valeur</span>, sinon il sera <em>FAUX</em> (<em>omis</em>).<br>
          Si <span class="opt-name">atttrue</span> est défini sans valeur, alors l'attribut booléen sera <em>VRAI</em> (<em>présent</em>) pour toute valeur du champ non vide, et sera <em>FAUX</em> (<em>omis</em>) si la valeur du champ est vide.<br>
          Exemple :
          <div class="decal"><span class="opt-html">&lt;input type=&quot;checkbox&quot;&gt;</span>[<span class="opt-name">onshow.accepter</span>;<span class="opt-name">att</span>=<span class="opt-value">selected</span>;<span class="opt-name">atttrue</span>=<span class="opt-value">1</span>]</div>
          <br>
          <span class="versioning">Historique: Le paramètre atttrue est supporté depuis TBS version 3.6.0</span></td>
      </tr>
      <tr>
        <td align="left" valign="top" class="border-sep"><span class="opt-name"><a name="html_field_prm_magnet" id="html_field_prm_magnet"></a></span><span class="opt-name">magnet</span>=<span class="opt-value">tag</span><br>
          <span class="txt-small">ou</span><br>
          <span class="opt-name">magnet</span>=<span class="opt-value">expr</span></td>
        <td align="left" valign="top" class="border-sep">Assigne une balise XML/HTML magnétique à un champ TBS. Une balise magnétique est gardée telle quelle quand le champ à une valeur, et elle est supprimée quand le champ est null ou chaîne vide. Le paramètre <span class="opt-name">magnet</span> a la même syntaxe que le paramètre <a href="#html_block_prm_block" class="opt-name">block</a>, c'est à dire que <span class="opt-value">expr</span> doit être une balise XML/HTML ou une expression de <a href="#html_block_prm_extblk">bloc étendu</a>.<br>
          <div class="decal">Exemple :<br>
            <span class="opt-html">(&lt;a href=&quot;[onshow.lien;magnet=a]&quot;&gt;cliquez ici&lt;/a&gt;)</span><br>
            Résultat pour <span class="txt-code">$lien='www.tbs.com'</span>: <span class="opt-html">(&lt;a href=&quot;www.tbs.com&quot;&gt;cliquez ici&lt;/a&gt;)</span><br>
            Résultat pour <span class="txt-code">$lien=''</span>: <span class="opt-html">()</span></div>
          Par défaut, la balise XML/HTML magnétique doit être un couple de balises ouvrante-fermante (comme <span class="opt-html">&lt;a&gt;&lt;/a&gt;</span>) dont la première balise est placée avant le champ TBS. Mais cela peut être changé en utilisant le paramètre <span class="opt-name">mtype</span> (voir ci-après).<br>
          <span class="versioning">Depuis TBS version 3.3.0</span>,  le <a href="#html_field_prm_ope">paramètre</a> <a href="#html_field_prm_ope" class="opt-name">ope</a> a des mot-clés (<span class="opt-value">nif</span>, <span class="opt-value">minv</span>, <span class="opt-value">mok</span> et <span class="opt-value">mko</span>) qui   améliorent l'utilisation du paramètre <span class="opt-name">magnet</span>.<br>
          Remarque : les paramètres <span class="opt-name">if then else</span> sont traités avant le paramètre<span class="opt-name"> magnet.</span></td>
      </tr>
      <tr>
        <td align="left" valign="top" class="border-sep"><a name="html_field_prm_mtype" id="html_field_prm_mtype"></a><span class="opt-name">mtype</span>=<span class="opt-value">val</span></td>
        <td align="left" valign="top" class="border-sep">S'utilise avec la paramètre<span class="opt-name"> magnet</span>. Définit le comportement de la balise magnétique.<br>
          <br>
          <div class="decal">
            <table  border="0" cellpadding="0" cellspacing="0">
              <tr align="left" valign="top">
                <td class="title-1b">Valeur</td>
                <td class="title-1b">Comportement magnétique lorsque le champ est nul ou chaîne vide</td>
              </tr>
              <tr align="left" valign="top">
                <td width="60" class="opt-value">m*m </td>
                <td>C'est la valeur par défaut. Supprime le couple de balises qui entoure le champ TBS. Tout ce qui se trouve entre ces balises est aussi supprimé. Il est possible de placer le champ TBS à l'intérieur de l'une des balises.<br>
                  <div class="decal">Exemple :<br>
                    <span class="opt-html">(&lt;a href=&quot;[onshow.lien;magnet=a]&quot;&gt;cliquez ici&lt;/a&gt;)</span><br>
                    Résultat pour <span class="txt-code">$lien='www.tbs.com'</span>: <span class="opt-html">(&lt;a href=&quot;www.tbs.com&quot;&gt;cliquez ici&lt;/a&gt;)</span><br>
                    Resultat pour <span class="txt-code">$lien=''</span>: <span class="opt-html">()</span></div></td>
              </tr>
              <tr align="left" valign="top">
                <td class="opt-value">m+m</td>
                <td>Supprime le couple de balises qui entoure le champ TBS, mais conserve ce qui est entre les balises.
                  <div class="decal">Exemple :<br>
                    <span class="opt-html">(&lt;a href=&quot;mailto:[blk.email;magnet=a;mtype=m+m]&quot;&gt;[blk.nom]&lt;/a&gt;)</span><br>
                    Résultat pour<span class="txt-code"> $email='moi@tbs.com'</span>: <span class="opt-html">(&lt;a href=&quot;mailto:moi@tbs.com&quot;&gt;MonNom&lt;/a&gt;)</span><br>
                    Résultat pour <span class="txt-code">$email=''</span>: <span class="opt-html">(MyName)</span></div></td>
              </tr>
              <tr align="left" valign="top">
                <td class="opt-value">m*</td>
                <td>Supprime la balise simple qui se trouve avant le champ TBS, ainsi que tout de qui se trouve entre la balise et le champ.
                  <div class="decal">Exemple 1: <span class="opt-html">&lt;img href=&quot;[onshow.link;magnet=img;mtype=m*]&quot;&gt;</span> <br>
                    Exemple 2:<span class="opt-html"> &lt;br&gt; [onshow.address;magnet=br]</span></div></td>
              </tr>
              <tr align="left" valign="top">
                <td class="opt-value">*m</td>
                <td>Supprime la balise simple qui se trouve après le champ TBS, ainsi que tout de qui se trouve entre la balise et le champ.
                  <div class="decal">Exemple :<span class="opt-html"> [onshow.address;magnet=br;mtype=*m]&lt;br&gt;</span></div></td>
              </tr>
            </table>
          </div></td>
      </tr>
      <tr>
        <td align="left" valign="top" class="border-sep"><a name="html_field_prm_comm"></a><span class="opt-name">comm</span></td>
        <td align="left" valign="top" class="border-sep">Étendre les limites du champ TBS jusqu'aux limites de la balise  commentaire Html qui l'entoure, ou bien jusqu'aux limites d'un autre couple de balise XML/HTML.<br>
          Exemple : <br>
          <div class="decal"><span class="opt-html">xxx &lt;!-- </span>[<span class="opt-name">mochamp</span>;<span class="opt-name">comm</span>]<span class="opt-html"> des commentaires ici --&gt; yyy</span></div>
          ou<br>
          <div class="decal"><span class="opt-html">xxx &lt;div&gt; </span>[<span class="opt-name">monchamp</span>;<span class="opt-name">comm</span>=<span class="opt-value">div</span>] <span class="opt-html">des commentaires ici &lt;/div&gt; yyy</span></div>
          sont strictement identiques à :<br>
          <div class="decal"><span class="opt-html">xxx</span> [<span class="opt-name">monchamp</span>]<span class="opt-html"> yyy </span></div>
          <span class="opt-html"></span> Ce paramètre particulièrement pratique pour l'élaboration du modèle avec un éditeur HTML visuel (tel que Dreamweaver ou FrontPage).<br>
          <div class="versioning">Historique : Le support pour les autres balise XML/HTML a été ajouté à  TBS 3.0.</div></td>
      </tr>
      <tr>
        <td align="left" valign="top" class="border-sep"><a name="html_field_prm_noerr"></a><span class="opt-name">noerr</span></td>
        <td align="left" valign="top" class="border-sep">Empêche l'affichage de certains messages d'erreurs TBS. Quand un message peut être annulé, cela est mentionné dans le message.</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="border-sep"><span class="opt-name"><a name="html_field_prm_file"></a>file</span>=<span class="opt-value">nomfichier</span></td>
        <td align="left" valign="top" class="border-sep">Remplace le champ par le contenu du fichier. <span class="opt-name"><span class="opt-value">Nomfichier</span></span> peut être une chaîne fixe ou une expression.<br>
          Vous pouvez utiliser le mot-clé <span class="opt-value">[val]</span> dans l'expression pour insérer la valeur  du champ en cours.<br>
          Vous pouvez utiliser des champs <span class="opt-value">[var]</span> dans l'expression.<br>
          Si le paramètre <span class="opt-name">file</span> est utilisé en omettant la valeur <span class="opt-value">nomfichier</span> (exemple : [onshow.file;<span class="opt-name">file</span>;<span class="opt-name">subtpl</span>]), alors c'est la valeur du champ qui est utilisée pour le nom du fichier.<br>
          Si le fichier n'est pas trouvé il sera aussi recherché dans le répertoire du dernier modèle chargé (<span class="versioning">depuis TBS version 3.2.0</span>).<br>
          Exemples :<br>
          <div class="decal">[<span class="opt-name">onload</span>;<span class="opt-name">file</span>=<span class="opt-value">entete.html</span>]<br>
            [<span class="opt-name">onload</span>;<span class="opt-name">file</span>=[<span class="opt-name">var</span>.<span class="opt-name">fichier</span>]] </div>
          Si <span class="opt-value">nomfichier</span> est une chaîne vide, alors aucun message d'erreur n'est affiché, c'est comme si le paramètre <span class="opt-name">file</span> est ignoré. Cela peut être utilisé pour gérer l'insertion conditionnelle de fichier. <br>
          Exemple : <br>
          <div class="decal"> [<span class="opt-name">onload</span>;<span class="opt-name">file</span>=[<span class="opt-name">var</span>.<span class="opt-name">insertion</span>;if [<span class="opt-name">val</span>]=1;<span class="opt-name">then</span> <span class="opt-value">'entete.html'</span>;<span class="opt-name">else</span> <span class="opt-value">''</span>]]</div>
          Vous trouverez plus de détails sur ce paramètre la rubrique <a href="#html_subtemplate">Sous-modèles</a>.<br>
          <span class="txt-small">Voir aussi : <a href="#html_field_prm_getbody" class="opt-name">getbody</a> <a href="#html_field_prm_script" class="opt-name">script</a></span></td>
      </tr>
      <tr>
        <td align="left" valign="top" class="border-sep"><a name="html_field_prm_getbody" id="html_field_prm_getbody"></a><span class="opt-name">getbody</span>=<span class="opt-value">listebalise</span></td>
        <td align="left" valign="top" class="border-sep">S'utilise avec le paramètre <span class="opt-name">file</span> ou <span class="opt-name">script</span>. Indique qu'on ne charge pas le fichier entièrement mais seulement certaines parties XML/HTML définie par la liste de balises. Les balises de la liste doivent être séparées par des plus (+), et placées entre parenthèses si vous voulez que les balises elles-mêmes soient récupérées avec leur contenu. Si le fichier contient plusieurs patries XML/HTML, alors toutes ces parties seront automatiquement concaténées. Si le paramètre <span class="opt-name">getbody</span> est utilisé sans valeur, alors la balise &lt;body&gt; est prise par défaut.<br>
          Exemple :
          <div class="decal">[onload;<span class="opt-name">file</span>=<span class="opt-value">entete.htm</span>;<span class="opt-name">getbody</span>=<span class="opt-value">(script)+(style)+body</span>]</div>
          <br>
          <div class="versioning">Historique : le paramètre getbody   est supporté depuis TBS version 3.0. 
            Dans les versions précédentes, il était opéré automatiquement lors de l'utilisation du paramètre file. Maintenant il devient explicite.<br>
            La liste de balise est supportée depuis TBS version 3.5.0. Avant cette version, la valeur de getbody ne peut être qu'une balise unique sans parenthèses. </div></td>
      </tr>
      <tr>
        <td align="left" valign="top" class="border-sep"><a name="html_field_prm_rename" id="html_field_prm_subtpl2"></a><span class="opt-name">rename</span> <span class="opt-value">ancien</span><span class="opt-name">=</span><span class="opt-value">nouv</span></td>
        <td align="left" valign="top" class="border-sep">S'utilise avec le paramètre <span class="opt-name">file</span> ou <span class="opt-name">script</span>.  Renomme des blocs et des champs TBS dans le sous-modèle avant son insertion. Vous pouvez définir plusieurs blocs à renommer en les séparant par des virgules. Si un nouveau nom est une chaîne vide, alors l'ancien bloc sera supprimé en le fusionnant avec un tableau vide.<br>
          Ce paramètre est utile quand vous voulez utiliser le même sous-modèle plusieurs  fois dans le modèle principale. <br>
          Exemple :
          <div class="decal">Adresse 1: [onload;<span class="opt-name">file</span>=<span class="opt-value">adresse.htm</span>]<br>
            Adresse 2: [onload;<span class="opt-name">file</span>=<span class="opt-value">adresse.htm</span>;<span class="opt-name">rename </span><span class="opt-value">ville1=ville2,code1=code2,email=</span>]</div>
          <div class="versioning">Historique : le paramètre rename est supporté depuis TBS version 3.5.1.</div>
          Voir rubrique '<a href="#html_subtemplate">Sous-modèles</a>' pour plus de détails à propos des sous-modèles.</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="border-sep"><span class="opt-name"><span class="opt-value"><a name="html_field_prm_script"></a></span>script</span>=<span class="opt-value">nomfichier</span></td>
        <td align="left" valign="top" class="border-sep">Exécute le script PHP juste avant le remplacement du champ.<br>
          <span class="opt-name"><span class="opt-value">Nomfichier</span></span> peut être une chaîne fixe ou une expression.<br>
          Vous pouvez utiliser le mot-clé <span class="opt-value">[val]</span> dans l'expression pour insérer la valeur  du champ en cours.<br>
          Vous pouvez utiliser des champs <span class="opt-value">[var]</span> dans l'expression.<br>
          Si le paramètre <span class="opt-name">script</span> est utilisé en omettant la valeur <span class="opt-value">nomfichier</span> (exemple : [onshow.file;<span class="opt-name">script</span>;<span class="opt-name">subtpl</span>]), alors c'est la valeur du champ qui est utilisée pour le nom du fichier.<br>
          Si le fichier n'est pas trouvé il sera aussi recherché dans le répertoire du dernier modèle chargé (<span class="versioning">depuis TBS version 3.2.0</span>).<br>
          <table width="100%" border="0" cellpadding="2" cellspacing="0" >
            <tr>
              <td width="10" valign="top">*</td>
              <td>Tenez compte du fait que dans votre script <span class="title-1c"> les variables PHP  seront forcément locales au lieu de globales</span>. Cela est dû à ce que le script est appelé depuis une méthode de TBS. Pour atteindre ou définir une variable globale dans votre script, vous devez utiliser l'instruction Php <a href="http://fr.php.net/global" target="_blank">global</a> ou le tableau <span class="txt-code">$GLOBAL</span>.</td>
            </tr>
            <tr id="v202_locvar">
              <td valign="top">*</td>
              <td >TBS met à disposition des variables locales prédéfinies que vous pouvez utiliser dans votre script :<br>
                - <span class="opt-name">$CurrVal</span> se réfère à la valeur du champ en cours. Elle peut être modifiée.<br>
                - <span class="opt-name">$CurrPrm</span> se réfère au tableau de paramètre du champ en cours.<br>
                - <span class="opt-name">$this</span> se réfère à l'instance en cours de TBS. (Voir le paramètre <span class="opt-name">subtpl</span> pour un bon usage) </td>
            </tr>
            <tr>
              <td valign="top">*</td>
              <td>Si l'expression <span class="opt-value">nomfichier</span> (ou la valeur du champ) retourne une chaîne vide (''), alors le paramètre script est ignoré et aucune erreur n'a lieu. Vous pouvez vous servir de ce comportement pour effectuer une insertion conditionnelle.</td>
            </tr>
          </table>
          <span id="v202_subtpl_script">Voir le chapitre <a href="#html_subtemplate">Sous-modèles</a> pour plus d'information sur l'utilisation de ce paramètre en mode sous-modèle.</span></td>
      </tr>
      <tr id="v202_subtpl">
        <td align="left" valign="top" class="border-sep"><a name="html_field_prm_subtpl" id="html_field_prm_subtpl"></a><span class="opt-name">subtpl</span></td>
        <td align="left" valign="top" class="border-sep">S'utilise avec le paramètre <span class="opt-name"> script</span> ou <span class="opt-name">onformat</span>.<br>
          Active le mode sous-modèle pendant l'exécution du script ou de la fonction.<br>
          Voir le chapitre <a href="#html_subtemplate">Sous-modèles</a> pour plus d'information. </td>
      </tr>
      <tr>
        <td align="left" valign="top" class="border-sep"><span class="opt-name"><span class="opt-value"><a name="html_field_prm_if" id="html_field_prm_if"></a></span>if</span> <span class="opt-value">exp1</span><span class="opt-name">=</span><span class="opt-value">exp2</span></td>
        <td align="left" valign="top" class="border-sep">Affiche la donnée si la condition est vérifiée, sinon n'affiche rien à moins que les paramètres <span class="opt-name">then</span> ou <span class="opt-name">else</span> soient utilisés. <br>
          Les opérateurs supportés sont :
          <div class="decal">
            <table  border="0" cellpadding="0" cellspacing="0">
              <tr>
                <td width="80"><span class="opt-name">=</span> ou <span class="opt-name">==</span></td>
                <td>égale</td>
              </tr>
              <tr>
                <td class="opt-name">!=</td>
                <td>différent</td>
              </tr>
              <tr>
                <td class="opt-name">+-</td>
                <td>supérieur strictement </td>
              </tr>
              <tr>
                <td class="opt-name">+=-</td>
                <td>supérieur ou égal </td>
              </tr>
              <tr>
                <td class="opt-name">-+</td>
                <td>inférieur strictement </td>
              </tr>
              <tr>
                <td class="opt-name">-=+</td>
                <td>inférieur ou égal</td>
              </tr>
              <tr>
                <td class="opt-name">~=</td>
                <td>vérifie l'<a href="http://www.php.net/manual/fr/function.preg-match.php">expression rationnelle</a> <span class="versioning">(depuis TBS version 3.0)</span></td>
              </tr>
            </table>
          </div>
          <span class="opt-value">exp1</span> et <span class="opt-value">exp2</span> doivent être des expressions numériques ou textes.<br>
          Vous pouvez utiliser le mot-clé <span class="opt-value">[val]</span> dans l'expression pour insérer la valeur  du champ en cours.<br>
          Vous pouvez utiliser des champs <span class="opt-value">[var]</span> dans l'expression.<br>
          Les expressions peuvent contenir d'autres champs TBS, mais vous devez vous assurer qu'ils soient fusionnés avant le champ contenant.<br>
          <span class="versioning">Depuis TBS version 3.0</span>, il est aussi possible de définir plusieurs couple de if/then dans le même champ. <br>
          Voir paramètres <span class="opt-name">then</span> et <span class="opt-name">else</span> pour des exemples. </td>
      </tr>
      <tr>
        <td align="left" valign="top" class="border-sep"><span class="opt-name"><span class="opt-value"><a name="html_field_prm_then" id="html_field_prm_then"></a></span>then</span><span class="opt-value"> val1</span></td>
        <td align="left" valign="top" class="border-sep">Si le paramètre <span class="opt-name">if</span> a été défini et que sa condition est vérifiée, alors la donnée sera replacée par <span class="opt-value">val1</span>.<br>
          <span class="versioning">Depuis TBS version 3.0</span>, il est aussi possible de définir plusieurs couples de if/then dans le même champ. <br>
          Exemple :
          <div class="decal">[<span class="opt-name">onshow.image</span>;<span class="opt-name">if</span> <span class="opt-value">[val]</span>=<span class="opt-value">''</span>;<span class="opt-name">then</span> <span class="opt-value">'image0.gif'</span>]<br>
            [<span class="opt-name">onshow</span>.<span class="opt-name">x</span>;<span class="opt-name">if</span> <span class="opt-value">[val]=1</span>;<span class="opt-name">then</span> <span class="opt-value">'un'</span>;<span class="opt-name">if</span> <span class="opt-value">[val]=2</span>;<span class="opt-name">then</span> <span class="opt-value">'deux'</span>;<span class="opt-name">else</span> <span class="opt-value">'plus'</span>] </div>
          Vous pouvez utiliser le mot-clé <span class="opt-value">[val]</span> dans l'expression pour insérer la valeur  du champ en cours.<br>
          Vous pouvez utiliser des champs <span class="opt-value">[var]</span> dans l'expression.</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="border-sep"><span class="opt-value"><a name="html_field_prm_else" id="html_field_prm_else"></a></span><span class="opt-name">else</span> <span class="opt-value">val2</span></td>
        <td align="left" valign="top" class="border-sep">Si le paramètre <span class="opt-name">if</span> a été défini et que sa condition n'est pas vérifiée, alors la donnée sera replacée par <span class="opt-value">val2</span>.<br>
          Exemple :
          <div class="decal"> [<span class="opt-name">onshow.error_id</span>;<span class="opt-name">if</span> <span class="opt-value">[val]</span>=<span class="opt-value">0</span>;<span class="opt-name">then</span> <span class="opt-value">'pas d''erreur'</span>;<span class="opt-name">else</span> <span class="opt-value">'erreur constatée'</span>] </div>
          Vous pouvez utiliser le mot-clé <span class="opt-value">[val]</span> dans l'expression pour insérer la valeur  du champ en cours.<br>
          Vous pouvez utiliser des champs <span class="opt-value">[var]</span> dans l'expression.</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="border-sep"><span class="opt-value"><a name="html_field_prm_onformat" id="html_field_prm_onformat"></a></span><span class="opt-name">onformat</span>=<span class="opt-value">nom_fct</span></td>
        <td align="left" valign="top" class="border-sep"> Indique le nom d'un fonction PHP utilisateur  qui sera exécutée avant la fusion du champ.<br>
          Depuis TBS version 3.0, il est aussi possible d'indiquer une méthode de classe (voir <a href="#php_oop">POO</a>). <br>
          La fonction <span class="opt-value">nom_fct</span> doit avoir la syntaxe suivante :<br>
          <span class="txt-code">&nbsp;&nbsp;function <span class="opt-value">nom_fct</span>(<span class="opt-name">$NomChamp</span>,&amp;<span class="opt-name">$CurrVal</span>,{&amp;<span class="opt-name">$CurrPrm</span>,{&amp;<span class="opt-name">$TBS</span>}}) { ... }<br>
          </span> <span class="opt-name"> </span>
          <table border="0" cellspacing="0" cellpadding="2">
            <tr>
              <td width="10" valign="top" class="title-1b">&nbsp;</td>
              <td width="80" valign="top" class="title-1b">Argument</td>
              <td class="title-1b">Description</td>
            </tr>
            <tr>
              <td valign="top">&nbsp;</td>
              <td valign="top"><span class="opt-name">$</span><span class="opt-name">NomChamp</span></td>
              <td>Retourne le nom du champ qui appel la fonction (lecture seule).</td>
            </tr>
            <tr>
              <td valign="top" class="opt-name">&nbsp;</td>
              <td valign="top" class="opt-name">$CurrVal</td>
              <td>Retourne la valeur en cours (lecture/écriture<span class="txt-small"> <em>; ne pas oublier le &amp; dans la déclaration de la variable</em></span>).</td>
            </tr>
            <tr id="v202_onformat_currprm">
              <td valign="top" class="opt-name">&nbsp;</td>
              <td valign="top" class="opt-name">$CurrPrm</td>
              <td>Facultatif. Fait référence au tableau des paramètres du champ courant (<span class="txt-small"><em>ne pas oublier le &amp; dans la déclaration de la variable</em></span>).</td>
            </tr>
            <tr id="v202_onformat_tbs">
              <td valign="top" class="opt-name">&nbsp;</td>
              <td valign="top" class="opt-name">$TBS</td>
              <td>Facultatif. Fait référence à l'instance courante de TBS. (<span class="txt-small"><em>ne pas oublier le &amp; dans la déclaration de la variable</em></span>).<br>
                Utilisez cet argument avec prudence. Il est fournit pour le mode Sous-modèle.</td>
            </tr>
          </table>
          <span id="v202_subtpl_onformat">Voir le paragraphe  '<a href="#html_subtemplate">Sous-modèles</a>' pour plus de détails sur l'utilisation de ces arguments en mode sous-modèle.<br>
          Depuis  TBS version 3.6.0, il est possible de limiter les fonctions PHP autorisées pour le paramètre <span class="opt-name">onformat</span>. Voir <a href="#php_instanciate">créer un nouvel objet PHP</a>. </span></td>
      </tr>
      <tr>
        <td align="left" valign="top" class="border-sep"><span class="opt-name"><span class="opt-value"><a name="html_field_prm_protect" id="html_field_prm_protect"></a></span>protect</span>=<span class="opt-value">val</span></td>
        <td align="left" valign="top" class="border-sep">Permet de protéger ou non la donnée à fusionner en remplaçant les caractères '<span class="opt-html">[</span>' pour leur équivalent Html '<span class="opt-html">&amp;#91;</span>'. La valeur <span class="opt-name"><span class="opt-value">val</span></span> peut être l'un des mots-clés suivants :<br>
          &nbsp; <span class="opt-name"><span class="opt-value">yes</span></span> : (valeur par défaut) la donnée est protégée.<br>
          &nbsp; <span class="opt-name"><span class="opt-value">no</span></span> : la donnée n'est pas protégée.<br>
          Par défaut, toutes données fusionnées avec un modèle sont protégées sauf s'il s'agit de l'inclusion d'un autre fichier. Il est fortement recommandé de protéger les valeurs affichées lorsque qu'il s'agit de données saisies librement comme sur un forum par exemple.<br>
          Il est néanmoins possible de désactiver la protection par défaut en mettant la propriété <span class="opt-name">$TBS</span>-&gt;<span class="opt-value">Protect</span> à <span class="opt-value">false</span>.</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="border-sep"><span class="opt-name"><span class="opt-value"><a name="html_field_prm_ope" id="html_field_prm_ope"></a></span>ope</span>=<span class="opt-value">action</span></td>
        <td align="left" valign="top" class="border-sep">Effectue une ou plusieurs opérations sur la valeur à fusionner. Vous pouvez définir plusieurs opération à exécuter en ordre en les séparant par des virgules (,). <br>
          Exemple : <br>
          <div class="decal">[<span class="opt-name">onshow</span>.<span class="opt-name">x</span>;<span class="opt-name">ope</span>=<span class="opt-value">add:-1</span>,<span class="opt-value">mod:10</span>]</div>
          Les opérations supportées sont :
          <div class="decal">
            <table  border="0" cellspacing="0" cellpadding="3">
              <tr>
                <td width="50" valign="top"><span class="opt-value">max:n</span></td>
                <td>Limite la chaîne  texte à un maximum de <span class="opt-value">(n)</span> caractères. Si la chaîne est coupée, alors sa fin est remplacée par des pointillés '...'.<br>
                  <span class="decal">Exemple :							[onshow.libelle;<span class="opt-name">ope</span>=<span class="opt-value">max:10</span>]</span><br>
                  - Ajoutez le paramètre <span class="opt-name">maxhtml</span> pour indiquer que la valeur à fusionner peut contenir des caractères Html.<br>
                  - Ajoutez le paramètre <span class="opt-name">maxutf8</span> pour indiquer que la valeur à fusionner peut contenir des caractères UTF8. <span class="versioning">Historique : maxutf8 est supporté depuis TBS version 3.5.2.</span><br>
                  - 
                  Ajoutez le paramètre <span class="opt-name">maxend</span> pour changer le symbole de coupe.<br>
                  <span class="decal">Exemple :
                  [onshow.libelle;<span class="opt-name">ope</span>=<span class="opt-value">max:10</span>;<span class="opt-name">maxhtml</span>;<span class="opt-name">maxend</span>=<span class="opt-value">'+'</span>]</span></td>
              </tr>
              <tr>
                <td valign="top" class="opt-value">mod:n</td>
                <td>Applique le modulo <span class="opt-value">n</span> à la valeur à fusionner. Exemple :							[onshow.numlig;<span class="opt-name">ope</span>=<span class="opt-value">mod:7</span>]</td>
              </tr>
              <tr>
                <td valign="top"><span class="opt-value">add:n</span></td>
                <td>Ajoute le numérique <span class="opt-value">n</span> à la valeur à fusionner.								Exemple :							[onshow.numero;<span class="opt-name">ope</span>=<span class="opt-value">add:-1</span>]</td>
              </tr>
              <tr>
                <td valign="top"><span class="opt-value">mul:n</span></td>
                <td>Mutliplie la valeur à fusionner par <span class="opt-value">n</span>. </td>
              </tr>
              <tr>
                <td valign="top"><span class="opt-value">div:n</span></td>
                <td>Divise la valeur à fusionner par <span class="opt-value">n</span>. </td>
              </tr>
              <tr>
                <td valign="top"><span class="opt-value">list</span></td>
                <td>Si la valeur à fusionner est un tableau Php, alors ses items sont affichés séparés par une virgule (,).<br>
                  <span class="decal">Exemple :							[onshow.tableau;<span class="opt-name">ope</span>=<span class="opt-value">list</span>]</span><br>
                  Ajoutez le paramètre <span class="opt-name">valsep</span> pour changer le séparateur d'item.<br>
                  <span class="decal">Exemple :							[onshow.tableau;<span class="opt-name">ope</span>=<span class="opt-value">list</span>;<span class="opt-name">valsep</span>=<span class="opt-value">'+'</span>]</span></td>
              </tr>
              <tr>
                <td valign="top" class="opt-value">mok:x</td>
                <td><em>(veur dire&quot;magnet ok&quot;)</em> S'utilise avec le paramètre <a href="#html_field_prm_magnet" class="opt-name">magnet</a>. Le champ TBS n'est jamais affiché mais la balise magnétique est conservée quand la valeur du champ est égale à <span class="opt-value">'x'</span>. La balise magnétique est supprimée dans les autres cas. Vous pouvez définir plusieurs valeurs pour conserver la balise magnétique en définissant plusieurs <span class="opt-value">mok</span>. Exemple : [onshow.x;magnet=div;<span class="opt-name">ope</span>=<span class="opt-value">mok:1</span>,<span class="opt-value">mok:2</span>] <span class="versioning">(mok est supporté depuis TBS version 3.5.2)</span></td>
              </tr>
              <tr>
                <td valign="top" class="opt-value">mko:x</td>
                <td><em>(veur dire&quot;magnet ko&quot;)</em> S'utilise avec le paramètre <a href="#html_field_prm_magnet" class="opt-name">magnet</a>. Le champ TBS n'est jamais affiché mais la balise magnétique est supprimée quand la valeur du champ est égale à <span class="opt-value">'x'</span>. La balise magnétique est conservée dans les autres cas. Vous pouvez définir plusieurs valeurs pour supprimer la balise magnétique en définissant plusieurs <span class="opt-value">mko</span>. Exemple : [onshow.x;magnet=div;<span class="opt-name">ope</span>=<span class="opt-value">mko:1</span>,<span class="opt-value">mko:2</span>] <span class="versioning">(mko est supporté depuis TBS version 3.5.2)</span></td>
              </tr>
              <tr>
                <td valign="top" class="opt-value">nif:x</td>
                <td><em>(veut dire &quot;null if&quot;)</em> Si la valeur est égale à <span class="opt-value">'x'</span> alors elle est remplacée par <span class="opt-value">''</span> <span class="txt-small">(chaîne vide)</span>. Cette opération est conçue pour faire fonctionner le paramètre <a href="#html_field_prm_magnet" class="opt-name">magnet</a> avec  d'autres valeurs que <span class="opt-value">''</span>. <span class="versioning">(supporté depuis  TBS version 3.3.0)</span></td>
              </tr>
              <tr>
                <td valign="top" class="opt-value">minv</td>
                <td><em>(veut dire &quot;magnet invisible&quot;)</em> Remplace la valeur par <span class="opt-value">''</span> <span class="txt-small">(chaîne vide)</span> mais le paramètre <a href="#html_field_prm_magnet" class="opt-name">magnet</a><a href="#html_field_prm_magnet"></a> ne prendra en compte que l'ancienne valeur. Cette opération est conçue pour rendre complètement invisible un champ TBS qui actionne un magnet. <span class="versioning">(supporté depuis TBS version 3.3.0)</span></td>
              </tr>
              <tr>
                <td valign="top" class="opt-value">msk:x</td>
                <td><em>(veut dire &quot;mask&quot;)</em> Applique un masque à la valeur. Les caractères '<span class="opt-value">*</span>' dans le masque seront remplacés par la valeur d'origine du champ.  Exemple : [onshow.img_id;<span class="opt-name">ope</span>=<span class="opt-value">msk:img_*.gif</span>] <span class="versioning">(supporté depuis TBS version 3.6.0)</span></td>
              </tr>
            </table>
          </div>
          <div class="versioning">Historique :<br>
            - Le paramètre ope   est supporté depuis TBS version 3.0. 
            Il remplace le paramètre max qui n'existe plus depuis cette version.<br>
            - Les opérations multiples et &quot;mul&quot; et &quot;div&quot; sont supportées depuis TBS version 3.2.0 </div></td>
      </tr>
      <tr>
        <td align="left" valign="top" class="border-sep"><span class="opt-name"><span class="opt-value"><a name="html_field_prm_frm" id="html_field_prm_frm"></a></span>frm</span>=<span class="opt-value">format</span></td>
        <td align="left" valign="top" class="border-sep">Spécifie un format d'affichage pour une donnée de type date/heure ou numérique. Il est possible d'utiliser un format conditionnel qui change selon le signe de la valeur. Le format est considéré de type numérique s'il contient le caractère <span class="opt-value">0</span>, sinon il est considéré de type date/heure. La valeur à fusionner n'influe pas sur le type de format. <br>
          <br>
          <div class="title-1c">Format date/heure :</div>
          <br>
          Il s'agit d'un format semblable au format VisualBasic. Les mots-clés suivants sont reconnus :<br>
          <table  border="0" cellspacing="0" cellpadding="0">
            <tr>
              <td width="150" valign="top"><span class="opt-value">d</span>, <span class="opt-value">dd</span>, <span class="opt-value">ddd</span>, <span class="opt-value">dddd</span> :</td>
              <td>numéro du jour, numéro du jour sur deux chiffres, nom du jour court, nom du jour complet. Ajoutez le mot-clé<span class="opt-value"> (locale)</span> pour afficher des noms locaux. </td>
            </tr>
            <tr>
              <td valign="top" class="opt-value">xx</td>
              <td>affiche <span class="opt-html">st</span>, <span class="opt-html">nd</span>, <span class="opt-html">rd</span> ou <span class="opt-html">th</span> selon le numéro du jour.</td>
            </tr>
            <tr>
              <td valign="top" class="opt-value">w</td>
              <td>numéro de jour de la semaine (de 0 à 6) </td>
            </tr>
            <tr>
              <td valign="top"><span class="opt-value">m</span>, <span class="opt-value">mm</span>, <span class="opt-value">mmm</span>, <span class="opt-value">mmmm</span> : </td>
              <td>numéro du mois, numéros du mois sur deux chiffres, nom du mois court, nom du mois complet. Ajoutez le mot-clé<span class="opt-value"> (locale)</span> pour afficher des noms locaux.</td>
            </tr>
            <tr>
              <td valign="top"><span class="opt-value">yy</span>, <span class="opt-value">yyyy</span> :</td>
              <td>année sur deux chiffes, années complète.</td>
            </tr>
            <tr>
              <td valign="top"><span class="opt-value">hh</span>, <span class="opt-value">rr</span>, <span class="opt-value">nn</span>, <span class="opt-value">ss</span> :</td>
              <td>heure-24, heure-12, minutes, secondes forcées à  deux chiffres.</td>
            </tr>
            <tr>
              <td valign="top"><span class="opt-value">h</span>, <span class="opt-value">r</span></td>
              <td>heure-24, heure-12 </td>
            </tr>
            <tr>
              <td valign="top"><span class="opt-value">ampm</span>, <span class="opt-value">AMPM</span> : </td>
              <td>indice &quot;am&quot; ou &quot;pm&quot;, indice &quot;AM&quot; ou &quot;PM&quot;.</td>
            </tr>
            <tr>
              <td valign="top" class="opt-value">(locale)</td>
              <td>Affiche des noms de jour et de mois locaux. 
                Le langage local peut être défini à l'aide de la fonction PHP <span class="txt-code"><a href="http://php.net/setlocale" target="_blank">setlocale()</a></span>. Elle ne fonctionne que si les paramètres locaux ont été définis sur le serveur. Pour des raisons propres à PHP, en mode local <span class="opt-value">xx</span> ne fonctionne pas et <span class="opt-value">d</span> fait comme <span class="opt-value">dd</span>. </td>
            </tr>
          </table>
          <br>
          Les autres caractères sont conservés. 
          Il est possible de mettre de protéger des chaînes texte en les plaçant entre guillemets doubles (&quot;).<br>
          <br>
          Exemples :<br>
          <div class="decal">[<span class="opt-value"><span class="opt-name">chp</span></span>;<span class="opt-name">frm</span>=<span class="opt-value">dd/mm/yyyy</span>] affichera <span class="opt-html">21/12/2002</span><br>
            [<span class="opt-value"><span class="opt-name">chp</span>;<span class="opt-name">frm</span>='yyyy-mm-dd hh:nn:ss'</span>] affichera <span class="opt-html">2002-12-21 15:45:03</span></div>
          <span class="opt-html"></span><br>
          <div class="versioning">Historique :<br>
            - 
            Les mots-clés ampm et AMPM sont supportés depuis TBS version 3.0.<br>
            - Le mot-clé hm supportés depuis TBS version 3.0 est déprécié et remplacé par rr depuis TBS 3.2.0.<br>
            - Les mots-clés rr, r et h sont supportés depuis TBS version 3.2.0.<br>
            - Me mot-clé (locale) est supporté depuis TBS version 3.4.0. </div>
          <br>
          <br>
          <div class="title-1c">Format numérique :</div>
          <br>
          Pour définir la partie décimale, utilisez un expression du type '<span class="opt-value">0d0...</span>' où <span class="opt-value">'d'</span> est le séparateur de décimal, et <span class="opt-value">'0...'</span> est une répétition de zéro correspondant au nombre de décimales.<br>
          S'il n'y a aucune décimale, utilisez le format '<span class="opt-value">0.</span>' (avec un point).<br>
          <br>
          Pour définir un séparateur de milliers, utilisez une expression du type '<span class="opt-value">0m000d...</span>' où <span class="opt-value">'m'</span> est le séparateur de milliers. S'il n'y a aucune décimale, utilisez le format '<span class="opt-value">0m000.</span>' (avec un point).<br>
          <br>
          Pour afficher les zéros non significatifs, utilisez une expression du type '<span class="opt-value">0000d...</span>' où <span class="opt-value">'0000</span>' représente le nombre de chiffres que vous voulez avoir. S'il n'y a pas de décimale, utilisez le format  '<span class="opt-value">0000.</span>' (avec nu pointa dot). <span class="versioning">Historique : Cette fonctionnalité est supportée depuis TBS version 3.5.2.</span><br>
          <br>
          Si le format contient le caractère '<span class="opt-value">%</span>', alors la valeur affichée sera multipliée par 100. Le caractère '<span class="opt-value">%</span>' reste affiché.<br>
          <br>
          Le format numérique peut contenir d'autres chaînes texte. Mais seule l'expression de zéro placée la plus à droite sera considérée comme un format, les autres caractères seront conservés.<br>
          <br>
          Exemples :
          <div class="decal">
            <table border="0" cellspacing="0" cellpadding="1">
              <tr class="title-1b">
                <td width="100">Valeur</td>
                <td width="160">Champ</td>
                <td width="100">Affichage</td>
              </tr>
              <tr>
                <td>2456,1426</td>
                <td>[<span class="opt-value"><span class="opt-name">chp</span></span>;<span class="opt-name">frm</span>='<span class="opt-value">0,000</span>']</td>
                <td class="opt-html">2456,143</td>
              </tr>
              <tr>
                <td>&nbsp;</td>
                <td>[<span class="opt-value"><span class="opt-name">chp</span></span>;<span class="opt-name">frm</span>='<span class="opt-value">$ 0 000,00</span>']</td>
                <td class="opt-html">$ 2 456,14</td>
              </tr>
              <tr>
                <td>&nbsp;</td>
                <td>[<span class="opt-value"><span class="opt-name">chp</span></span>;<span class="opt-name">frm</span>='<span class="opt-value">$ 0 000.</span>']</td>
                <td class="opt-html">2 456</td>
              </tr>
              <tr>
                <td>&nbsp;</td>
                <td>[<span class="opt-value"><span class="opt-name">chp</span></span>;<span class="opt-name">frm</span>='<span class="opt-value">000000.</span>']</td>
                <td class="opt-html">002456</td>
              </tr>
              <tr>
                <td>0,2537</td>
                <td>[<span class="opt-value"><span class="opt-name">chp</span></span>;<span class="opt-name">frm</span>='<span class="opt-value">0,00 %</span>']</td>
                <td class="opt-html">25,37%</td>
              </tr>
              <tr>
                <td>&nbsp;</td>
                <td>[<span class="opt-value"><span class="opt-name">chp</span></span>;<span class="opt-name">frm</span>='<span class="opt-value">coef 0,00</span>']</td>
                <td class="opt-html">coef 0,25</td>
              </tr>
            </table>
          </div>
          <br>
          <div class="title-1c">Formats conditionnels :</div>
          <br>
          Il est possible de définir jusqu'a 4 formats conditionnels selon que la valeur est respectivement positive, négative, zéro ou nulle (ou chaîne vide). Les formats conditionnels doivent être séparés par un caractère '|'. Chaque format conditionnel est facultatif.<br>
          <br>
          Exemples :
          <div class="decal">
            <table border="0" cellspacing="0" cellpadding="1">
              <tr class="title-1b">
                <td>Valeur</td>
                <td>Champ</td>
                <td>Affichage</td>
              </tr>
              <tr>
                <td width="100">2456,1426</td>
                <td width="230">[<span class="opt-value"><span class="opt-name">chp</span></span>;<span class="opt-name">frm</span>='<span class="opt-value">+0,00|-(0,00)|*|vide</span>']</td>
                <td width="100" class="opt-html">+2456,14</td>
              </tr>
              <tr>
                <td>-156,333</td>
                <td>[<span class="opt-value"><span class="opt-name">chp</span></span>;<span class="opt-name">frm</span>='<span class="opt-value">+0,00|-(0,00)|*|vide</span>']</td>
                <td class="opt-html">-(156,33)</td>
              </tr>
              <tr>
                <td>0</td>
                <td>[<span class="opt-value"><span class="opt-name">chp</span></span>;<span class="opt-name">frm</span>='<span class="opt-value">+0,00|-(0,00)|*|vide</span>']</td>
                <td class="opt-html">*</td>
              </tr>
              <tr>
                <td>null</td>
                <td>[<span class="opt-value"><span class="opt-name">chp</span></span>;<span class="opt-name">frm</span>='<span class="opt-value">+0,00|-(0,00)|*|vide</span>']</td>
                <td class="opt-html">vide</td>
              </tr>
              <tr>
                <td>-8,75</td>
                <td>[<span class="opt-value"><span class="opt-name">chp</span></span>;<span class="opt-name">frm</span>='<span class="opt-value">+0,00|-(0,00)</span>']</td>
                <td class="opt-html">-(8,75)</td>
              </tr>
            </table>
          </div></td>
      </tr>
      <tr>
        <td align="left" valign="top" class="border-sep"><span class="opt-value"><a name="html_field_prm_locale" id="html_field_prm_locale"></a></span><span class="opt-name">locale</span></td>
        <td align="left" valign="top" class="border-sep"><span class="versioning">Obsolète depuis  TBS version 3.4.0.</span><br>
          Il fait la même chose que le mot-clé <span class="opt-value">(locale)</span> utilisé dans le paramètre <a href="#html_field_prm_frm" class="opt-name">frm</a>. </td>
      </tr>
      <tr>
        <td align="left" valign="top" class="border-sep"><a name="html_field_prm_tplfrms" id="html_field_prm_tplfrms"></a><span class="opt-name">tplfrms</span></td>
        <td align="left" valign="top" class="border-sep">Permet de définir des formats dans le modèle que vous pouvez réutiliser pour le paramètre <a href="#html_field_prm_frm" class="opt-name">frm</a>. Ce paramètre ne fonctionne qu'avec des <a href="#html_field_auto">champs automatiques</a> <span class="opt-name">onload</span>. <br>
          Exemple :<br>
          <div class="decal">[onload;<span class="opt-name">tplfrms</span>;<span class="opt-value">euro</span>=0 000,00 &euro;;<span class="opt-value">mydt</span>=yyyy-mm-dd]<br>
            [onshow.montant;<span class="opt-name">frm</span>=<span class="opt-value">euro</span>] ... [onshow.date;<span class="opt-name">frm</span>=<span class="opt-value">mydt</span>] <br>
          </div></td>
      </tr>
      <tr>
        <td align="left" valign="top" class="border-sep"><a name="html_field_prm_tplvars" id="html_field_prm_tplvars"></a><span class="opt-name">tplvars</span></td>
        <td align="left" valign="top" class="border-sep">Permet de définir des variables dans le modèle que vous pouvez récupérer dans le programme Php en utilisant la propriété <a href="#php_tplvars">TplVars</a>. Ce paramètre ne fonctionne que avec des <a href="#html_field_auto">champs automatiques</a> <span class="opt-name">onload</span>. </td>
      </tr>
    </table>
    <br>
    <span class="opt-name"><a name="html_field_prm_order" id="html_field_prm_order"></a></span><br>
    <div class="title-1c">Ordre de traitement des paramètres :</div>
    <br>
    Quand vous souhaitez utiliser plusieurs paramètres dans le même champ TBS, il peut être intéressant de comprendre dans quel ordre ils sont traités.<br>
    Chaque paramètre change la valeur à fusionner, mais la source d'où la valeur est prise n'est pas changée. <br>
    <br>
    <span class="title-1b"> Ordre :</span><br>
    1) -&gt; Récupération de la valeur du champ à fusionner.<br>
    2) -&gt; Traitement des paramètres sur la valeur : <br>
    &nbsp;&nbsp;&nbsp;&nbsp;2.1) -&gt; <a href="#html_field_prm_onformat" class="opt-name">onformat</a><br>
    &nbsp;&nbsp;&nbsp;&nbsp;2.2) -&gt; <a href="#html_field_prm_ope" class="opt-name">ope</a> / plug-ins OnOperation<br>
    &nbsp;&nbsp;&nbsp;&nbsp;2.3) -&gt; <a href="#html_field_prm_frm" class="opt-name">frm</a> /  XML/HTML ou autre conversion de caractères <br>
    &nbsp;&nbsp;&nbsp;&nbsp;2.4) -&gt; <a href="#html_field_prm_if" class="opt-name">if</a> <br>
    &nbsp;&nbsp;&nbsp;&nbsp;2.5) -&gt; <a href="#html_field_prm_file" class="opt-name">file</a><br>
    &nbsp;&nbsp;&nbsp;&nbsp;2.6) -&gt; <a href="#html_field_prm_script" class="opt-name">script</a><br>
    &nbsp;&nbsp;&nbsp;&nbsp;2.7) -&gt; <a href="#html_field_prm_script" class="opt-name">att</a><br>
    &nbsp;&nbsp;&nbsp;&nbsp;2.8) -&gt; . / <a href="#html_field_prm_ifempty" class="opt-name">ifempty</a> / <a href="#html_field_prm_magnet" class="opt-name">magnet</a><br>
    3) -&gt; Insertion de la valeur dans le modèle. </div>
  <h3><a name="html_field_auto" id="html_field_auto"></a>Les champs automatiques :</h3>
  <div class="norm"> Les champs automatiques permettent de fusionner  automatiquement des variables <span class="title-1c">globales</span> PHP sur certains évènements<a href="#php_mergefield"></a>.<br>
    Exemple : [<span class="opt-name">onload</span>.x] sera fusionné automatiquement avec la variable globale $x  quand la méthode <a href="#php_loadtemplate">LoadTemplate()</a> est appelée.<br>
    <br>
    Les champs automatiques  peuvent fusionner des  variables PHP <span class="title-1c">uniquement si elles sont globales</span>. Il n'existe pas de solution pour fusionner une variable qui est locale à une fonction, à moins lui faire une référence avec une variable globale, ou de la fusionner avec <a href="#php_mergefield">MergeField()</a>.<br>
    Les champs automatiques peuvent aussi fusionner des informations spéciales de TBS (voir <a href="#html_field_special">Champs automatiques spéciaux</a>), ou des données de la propriété ObjectRef (voir <a href="#php_oop">Programmation Orientée Objet</a>).<br>
    <br>
    Il existe trois types de champs automatiques :<br>
    - Les champs <span class="opt-name">[onload]</span>, qui sont fusionnés automatiquement quand la méthode <a href="#php_loadtemplate">LoadTemplate()</a> est appelée.<br>
    - 
    Les champs <span class="opt-name">[onshow],</span> qui sont fusionnés automatiquement quand la méthode <a href="#php_show">Show()</a> est appelée.<br>
    - Les champs <span class="opt-name">[var]</span>, qui sont fusionnés automatiquement durant la fusion du champ dans lequl ils sont encapsulés mais uniquement s'ils sont placés dans les paramètres <a href="#html_field_prm_file" class="opt-name">file</a>, <a href="#html_field_prm_script" class="opt-name">script</a>, <a href="#html_field_prm_if" class="opt-name">if</a>, <span class="opt-name">then</span>, <span class="opt-name">else</span> et <a href="#html_block_prm_when" class="opt-name">when</a>.<br>
    <br>
    <div class="versioning">Historique :<br>
      - 
      Les champs automatiques <span class="opt-name">[onload]</span> et <span class="opt-name">[onshow]</span> sont supportés depuis TBS version 3.2.0. Par compatibilité avec les versions avant 3.2.0, les champs <span class="opt-name">[var]</span> restants sont toujours fusionnés comme des champs <span class="opt-name">[onshow]</span> mais il est conseillé d'utiliser de véritables champs <span class="opt-name">[onshow]</span> à la place.<br>
      - Les champs <span class="opt-name">var</span> ne sont traités dans les paramètres <span class="opt-name">then</span> et <span class="opt-name">else</span> que depuis TBS version 2.02.</div>
    <br>
    Les champs automatiques peuvent avoir ou ne pas avoir de sous-nom, comme le x dans [onload.x], [onshow.x] ou [var.x]. Un champ automatique qui n'a pas de sous-nom sera fusionné avec la valeur chaine vide (''). Exemple : [<span class="opt-name">onload</span>;<span class="opt-name">file</span>=<span class="opt-value">entete.html</span>] ce champ instert un sous-modèle quand la méthode <a href="#php_loadtemplate">LoadTemplate()</a> est appelée.<br>
    <br>
    Un champ automatique qui a un  sous-nom sera fusionné avec la variable  globale PHP correspondante.<br>
    Si la variable globale n'existe pas à ce moment là alors une erreur TBS se produit à moins que l'on ajoute le paramètre <a href="#html_field_prm_noerr" class="opt-name">noerr</a>.<br>
    <br>
    Exemples :<br>
    <div class="decal">[<span class="opt-name">onload</span>.x] ce champ sera fusionné avec la variable globale $x quand la méthode <a href="#php_loadtemplate">LoadTemplate()</a> sera appelée.<br>
      [<span class="opt-name">onshow</span>.x] ce champ sera fusionné avec la variable globale $x quand la méthode <a href="#php_show">Show()</a> sera appelée.<br>
      [<span class="opt-name">b1</span>.col1;if [val]=[<span class="opt-name">var</span>.x];then <span class="opt-value">'bien'</span>; else <span class="opt-value">'mauvais'</span>] : le champ [<span class="opt-name">var</span>.x] est fusionné en même temps que [<span class="opt-name">b1</span>.col1].</div>
    <br>
    Vous pouvez aussi fusionner des items de tableau, des propriétés d'objet ou des résultats de méthode à l'aide du séparateur point (&quot;.&quot;). Les variables de type <span class="opt-html">Ressource</span> sont ignorées.<br>
    Par exemples (valables aussi bien pour <span class="opt-name">[onload]</span>, <span class="opt-name">[onshow]</span> et <span class="opt-name">[var</span>]) :<br>
    <div class="decal">
      <table border="0" cellpadding="3" cellspacing="0">
        <tr>
          <td>[<span class="opt-name">onshow</span>.tbl.item1] </td>
          <td width="5">&nbsp;</td>
          <td>va afficher </td>
          <td width="5" class="txt-code">&nbsp;</td>
          <td class="txt-code">$tbl[<span class="opt-value">'item1'</span>] </td>
        </tr>
        <tr>
          <td>[<span class="opt-name">onshow</span>.tbl.item2.a.0] </td>
          <td>&nbsp;</td>
          <td>va afficher </td>
          <td class="txt-code">&nbsp;</td>
          <td class="txt-code">$tbl[<span class="opt-value">'item2'</span>][<span class="opt-value">'a'</span>][<span class="opt-value">0</span>] </td>
        </tr>
        <tr>
          <td>[<span class="opt-name">onshow</span>.obj.prop1]</td>
          <td>&nbsp;</td>
          <td>va afficher</td>
          <td class="txt-code">&nbsp;</td>
          <td class="txt-code">$obj-&gt;prop1</td>
        </tr>
        <tr>
          <td>[<span class="opt-name">onshow</span>.obj.methA]</td>
          <td>&nbsp;</td>
          <td>va afficher</td>
          <td class="txt-code">&nbsp;</td>
          <td class="txt-code">$obj-&gt;methA()</td>
        </tr>
        <tr>
          <td>[<span class="opt-name">onshow</span>.obj.methB(x,y)]</td>
          <td>&nbsp;</td>
          <td>va afficher</td>
          <td class="txt-code">&nbsp;</td>
          <td class="txt-code">$obj-&gt;methB(<span class="opt-value">'x'</span>,<span class="opt-value">'y'</span>)</td>
        </tr>
        <tr>
          <td>[<span class="opt-name">onshow</span>.tbl.item3.prop2.item4</td>
          <td>&nbsp;</td>
          <td>va afficher</td>
          <td class="txt-code">&nbsp;</td>
          <td class="txt-code">$tbl[<span class="opt-value">'item3'</span>]-&gt;prop2[<span class="opt-value">'item4'</span>]</td>
        </tr>
      </table>
      <span class="versioning">Historique : les méthodes avec arguments dans les champs automatiques sont supportées depuis TBS version 3.0.</span></div>
    <br>
    Remarque : vous pouvez  forcer la fusion des champs automatiques (ou d'autres types de champ) à tout moment gr&acirc;ce à la méthode <a href="#php_mergefield">MergeField()</a>.<br>
    <br>
    <span class="title-1b">Champs automatiques imbriqués</span><br>
    Un champs TBS imbriqué n'est jamais fusionné à moins que :<br>
    - il soit fusionné avant le champ parent,<br>
    - il s'agit d'un champ <span class="opt-name">[var]</span> placé dans un paramètre <a href="#html_field_prm_file" class="opt-name">file</a>, <a href="#html_field_prm_script" class="opt-name">script</a>, <a href="#html_field_prm_if" class="opt-name">if</a>, <span class="opt-name">then</span>, <span class="opt-name">else</span> ou <a href="#html_block_prm_when" class="opt-name">when</a>.<br>
    <br>
    Exemples : <br>
    <div class="decal"> <span class="opt-html">[onload;if [onload.x]=1;then 'oui';else 'non']</span><br>
      Cet exemple affichera toujours <span class="opt-html">'non'</span>, car le champ imbriqué <span class="opt-html">[onload.x]</span> ne sera jamais évalué. Il vaut mieux utiliser à la place <span class="opt-html">[onload;if [var.x]=1;then 'oui';else 'non']</span>, ou encore mieux <span class="opt-html">[onload.x;if [val]=1;then 'oui';else 'non']</span><br>
      <br>
      <span class="opt-html">[b1.nom;block=tr;headergrp=[var.x]]</span><br>
      Dans cet exemple, [var.x] ne sera pas encore fusionné quand vous  appelez <span class="txt-code"><span class="opt-value">$TBS-&gt;MergeBlock('b1',...)</span></span><br>
      L'entête de groupe sera donc défini de façon incorrecte. <br>
      Il faut : <br>
      - soit utiliser un champ onload  : <span class="opt-html">[b1.name;block=tr;headergrp=[onload.x]]</span><br>
      - 
      soit appeler <span class="opt-value"><span class="txt-code">$TBS-&gt;MergeField('var') </span></span>avant<span class="opt-value"><span class="txt-code"> $TBS-&gt;MergeBlock('b1',...)</span></span><br>
      - soit utiliser un nom de champ personnalisé : <span class="opt-html">[b1.name;block=tr;headergrp=[zzz]]</span> fusionné manuellement avec <span class="opt-value"><span class="txt-code">$TBS-&gt;MergeField('zzz',$x)</span></span></div>
    <br>
    <span class="title-1b">Sécurité : comment limiter l'utilisation des champs automatiques dans les modèles ?</span><br>
    <br>
    Vous pouvez limiter l'utilisation des champs automatiques en définissant un préfixe pour les variables PHP autorisées. Pour les détails, voir <a href="#php_instanciate">créer un nouvel objet TBS</a>.<br>
    <span class="title-1b"><br>
    Empêcher le traitement des champs automatiques [onload] et [onshow]</span><br>
    <br>
    Les propriétés <span class="opt-name">$TBS</span>-&gt;<span class="opt-value">OnLoad</span> et <span class="opt-name">$TBS</span>-&gt;<span class="opt-value">OnShow</span> vous permettent d'annuler le traitement des champs  [onload] et [onshow]. Ces propriétés acceptent uniquement les valeurs <span class="opt-value">true</span> et <span class="opt-value">false</span>. Cela peut être très pratique principalement, mais pas uniquement, pour certains plug-ins TBS. Les champs [var] sont traités automatiquement même si <span class="txt-code">$TBS-&gt;OnShow = false</span>.<br>
    Exemple :<br>
    &nbsp;&nbsp;<span class="txt-code"><span class="opt-name">$TBS</span>-&gt;<span class="opt-value">OnShow</span> = false;</span><br>
    <span class="versioning">Les propriétés OnLoad et OnShow sont supportées depuis  TBS version 3.6.0.</span><br>
  </div>
  <h3><a name="html_field_special" id="html_field_special"></a>Les champs automatiques spéciaux :</h3>
  <div class="norm">Un champ automatique spécial est un champ automatique <span class="opt-name">onload</span>, <span class="opt-name">onshow</span> ou <span class="opt-name">var</span> qui affiche des données fournies par le système TinyButStrong.<br>
    Le sous-nom d'un champ automatique spécial doit être un de la liste ci-dessous.<br>
    Les paramètres de champs TBS standards sont valables pour les champs [var] Spéciaux.<br>
    <br>
    Exemple : <span class="opt-html">Date du jour : </span>[<span class="opt-name">onshow..now</span>;frm='dd/mm/yyyy'] <br>
    <br>
    (valables aussi bien pour <span class="opt-name">onload</span>, <span class="opt-name">onshow</span> et <span class="opt-name">var</span>) : <br>
    <table border="0" cellpadding="5" cellspacing="0">
      <tr class="title-1b">
        <td width="80" align="left" valign="top">Nom </td>
        <td align="left" valign="top">Description</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="opt-name">onload..now</td>
        <td align="left" valign="top">Date et heure du serveur.</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="opt-name">onload..version</td>
        <td align="left" valign="top"> La version de TinyButStrong. </td>
      </tr>
      <tr>
        <td align="left" valign="top" class="opt-name">onload..script_name</td>
        <td align="left" valign="top">Le nom du fichier PHP en cours d'exécution.</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="opt-name">onload..template_name</td>
        <td align="left" valign="top">Le nom du dernier fichier modèle chargé.<br>
          Il s'agit du nom tel que indiqué lors de l'appel à la méthode <a href="#php_loadtemplate">LoadTemplate()</a>.</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="opt-name">onload..template_date</td>
        <td align="left" valign="top">La date de création du dernier fichier modèle chargé.</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="opt-name">onload..template_path</td>
        <td align="left" valign="top">Le répertoire du dernier fichier modèle chargé.<br>
          Il s'agit du répertoire tel que indiqué lors de l'appel à la méthode <a href="#php_loadtemplate">LoadTemplate()</a>. </td>
      </tr>
      <tr>
        <td align="left" valign="top" class="opt-name">onload..tplvars.*</td>
        <td align="left" valign="top">La valeur d'un item défini dans la propriété <a href="#php_tplvars">TplVars</a>.<br>
          ('*' doit être la clé d'un item existant dans le tableau)</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="opt-name">onload..cst.*</td>
        <td align="left" valign="top">La valeur d'une constante PHP.<br>
          (* doit être le nom d'une constante existante) </td>
      </tr>
      <tr>
        <td align="left" valign="top" class="opt-name">onload..tbs_info</td>
        <td align="left" valign="top">Information sur TBS et les plug-ins installés. </td>
      </tr>
      <tr>
        <td align="left" valign="top" class="opt-name">onshow..error_msg</td>
        <td align="left" valign="top">Affiche les messages d'erreur qui ont été annulés durant le temps où la proprété <a href="#php_noerr">NoErr</a> est définie à <span class="opt-value">true</span>. Ce champ automatique spécial est utile surtout avec <span class="opt-name">onshow</span>.</td>
      </tr>
    </table>
    <br>
    <div class="versioning">Historique :<br>
      - 
      les champs var spéciaux  &quot;cst&quot; et &quot;tbs_info&quot; sont supportés depuis TBS version 3.2.0.<br>
      - &quot;error_msg&quot; est supporté depuis TBS version 3.5.0. </div>
  </div>
  <h3><a name="html_block" id="html_block"></a>Les blocs TBS :</h3>
  <div class="norm">Un bloc TBS permet de définir une zone et d'afficher les données d'une source d'enregistrements.<br>
    On peut définir un bloc TBS à l'aide d'une ou deux balises TBS (voir plus bas). <br>
    <br>
    <span class="title-1b">Fusion avec des données : </span><br>
    La fusion d'un bloc avec des données est réalisée gr&acirc;ce à la méthode <a href="#php_mergeblock">MergeBlock()</a>.
    Quand un bloc TBS est fusionné avec des données, il est répété autant de fois qu'il y a d'enregistrements ; et les champs TBS associés sont remplacés par les valeurs des colonnes de l'enregistrement en cours.<br>
    Un champ TBS associé à un bloc est identifié par son nom qui doit être composé du nom du bloc suivi du nom de la colonne à afficher  et séparés par un point.<br>
    Exemples :<br>
    <div class="decal"> - [<span class="opt-name">Bloc1</span>.<span class="opt-name">ColA</span>]   Ce champ affichera la valeur de la conne <span class="opt-name">ColA</span> lors de la fusion du bloc <span class="opt-name">Bloc1</span>.<br>
      - [<span class="opt-name">Bloc1</span>.<span class="opt-name">ColB</span>;<span class="opt-name">frm</span>=<span class="opt-value">'dd-mm-yyyy'</span>] Champ avec un paramètre </div>
    <br>
    <span class="versioning">Depuis TBS version 3.5.0 les noms de colonne avec espaces sont acceptés.</span><br>
    <br>
    <span class="title-1b">Attention </span>: lorsque deux blocs séparés portent le même nom, alors ils  seront considérés comme deux sections d'un même bloc. Tout ce qui se trouve entre deux sections d'un bloc sera <span class="title-1c">ignoré et supprimé</span> lors de la fusion. Voir <a href="#html_block_section">sections de bloc</a> pour plus de détail sur les sections.<br>
    <br>
    <br>
    <div class="title-1c">Syntaxes des blocs :</div>
    <br>
    Il existe trois syntaxes possibles pour définir un bloc TBS :<br>
    <br>
    <div class="title-1b">Syntaxe explicite :</div>
    <div class="decal">On utilise deux balises TBS. L'une pour le début du bloc, l'autre pour la fin du bloc.
      <div class="decal">Exemple :<br>
        <span class="opt-html"><strong>MODÈLE...</strong></span>[<span class="opt-name">NomBloc</span>;<span class="opt-name">block</span>=<span class="opt-value">begin</span><span class="opt-value">;<span class="opt-name">params</span></span>]<span class="opt-html"><strong>...MODÈLE...</strong></span>[<span class="opt-name">NomBloc</span>;<span class="opt-name">block</span>=<span class="opt-value">end</span>]<span class="opt-html"><strong>...MODÈLE</strong></span></div>
      <span class="opt-html"></span> Ces balises TBS de définition du bloc seront supprimées lors de la fusion.</div>
    <br>
    <div class="title-1b">Syntaxe relative :</div>
    <div class="decal">Le bloc est défini par un couple de balises XML/HTML ouvrante-fermante, qui est donné par une balise TBS unique.<br>
      <div class="decal">Exemple :<br>
        <span class="opt-html"><strong>MODÈLE...&lt;nom_balise...&gt;...</strong></span>[<span class="opt-name">NomBloc</span>;<span class="opt-name">block</span>=<span class="opt-value">nom_balise</span><span class="opt-value">;<span class="opt-name">params</span></span>]<span class="opt-html"><strong>...&lt;/nom_balise...&gt;...MODÈLE</strong></span></div>
      Cette balise TBS de définition du bloc doit se trouver n'import où entre le couple de balises XML/HTML.<br>
      Cette balise TBS sera supprimée lors de la fusion.<br>
      <span class="title-1b">Remarque :</span> Vous pouvez aussi définir une zone de bloc en combinant des balises XML/HTML. Voir le paramètre <a href="#html_block_prm_block" class="opt-name">block</a> pour plus de détails. </div>
    <br>
    <div class="title-1b">Syntaxe simplifiée :</div>
    <div class="decal">On utilise un champ TBS associé pour définir le bloc de façon relative (voir syntaxe relative ci-dessus).<br>
      <div class="decal">Exemple :<br>
        <span class="opt-html"><strong>MODÈLE...&lt;nom_balise...&gt;...</strong></span>[<span class="opt-name">NomBloc</span>.<span class="opt-name">NomColonne</span>;<span class="opt-name">block</span>=<span class="opt-value">nom_balise;<span class="opt-name">params</span></span>]<span class="opt-html"><strong>...&lt;/nom_balise...&gt;...MODÈLE</strong></span></div>
      Le champ TBS qui contient la définition du bloc (c'est à dire le paramètre <span class="opt-name">block</span>=<span class="opt-value">...</span>) doit se trouver entre le couple de balises XML/HTML. Vous n'être pas obligé de le mettre le paramètre <span class="opt-name">block</span> sur le premier champ, ça peut être n'importe lequel à l'intérieur de la zone définie par le bloc. <br>
      <span class="title-1b">Remarques :</span><br>
      &bull;    vous ne devez pas répéter le paramètre <span class="opt-name">block</span>=<span class="opt-value">...</span> sur chaque champ du bloc, un seul suffit. Si vous en mettez plusieurs, ce sera accepté par TBS mais il y aura peut être des confusions sur  des  paramètres de bloc complémentaires.<br>
      &bull; Vous pouvez aussi définir une zone de bloc en combinant des balises XML/HTML. Voir le paramètre <a href="#html_block_prm_block" class="opt-name">block</a> pour plus de détails. </div>
    <br>
    <div class="note">
      <div class="title-1b">Quelle syntaxe utiliser ?</div>
      <br>
      La syntaxe 'explicite' est rarement utilisée avec des éditeurs visuels parce que les balises TBS doivent souvent être placées entre deux balises XML/HTML. Par contre, elle convient assez bien pour des éditeurs textuels. <br>
      <br>
      La syntaxe 'relative' permet de désigner un bloc avec seulement une balise TBS. De plus, on pas besoin de cacher la balise TBS car elle sera supprimée lors de l'affichage. Cette syntaxe est assez pratique.<br>
      <br>
      La syntaxe 'simplifiée' est réellement simple. Elle permet de définir un bloc TBS et un champ TBS avec une seule balise TBS. Cette syntaxe est la plus courante et la plus pratique.<br>
      <br>
      <div class="title-1b">Astuce :</div>
      Vous pouvez utiliser la syntaxe 'relative' ou 'simplifiée' avec des balises personnelles ayant la norme XML/HTML.<br>
      Exemple :<br>
      <span class="opt-html">&lt;balise_perso&gt;</span>Bonjour [<span class="opt-name">blk1</span>.<span class="opt-name">colonne1</span>;<span class="opt-name">block</span>=<span class="opt-value">balise_perso</span>], comment allez vous ?<span class="opt-html">&lt;/balise_perso&gt;</span><br>
    </div>
    <br>
    <table border="0" cellpadding="5" cellspacing="0">
      <tr class="title-1b">
        <td width="80" align="left" valign="top">Élément</td>
        <td align="left" valign="top">Description</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="opt-name">NomBloc</td>
        <td align="left" valign="top">Le nom du bloc.</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="opt-name">params</td>
        <td align="left" valign="top"> Facultatif. Un ou plusieurs paramètres de la liste ci-après. Séparés par des ';'.</td>
      </tr>
      <tr>
        <td align="left" valign="top"><span class="opt-name">block</span>=<span class="opt-value">begin</span></td>
        <td align="left" valign="top">La balise TBS définie le début du bloc.</td>
      </tr>
      <tr>
        <td align="left" valign="top"><span class="opt-name">block</span>=<span class="opt-value">end</span></td>
        <td align="left" valign="top">La balise TBS définie la fin du bloc.</td>
      </tr>
      <tr>
        <td align="left" valign="top"><span class="opt-name"><span class="opt-value"><a name="html_block_prm_block" id="html_block_prm_block"></a></span>block</span>=<span class="opt-value">balise</span><br>
          <span class="txt-small">ou</span><br>
          <span class="opt-name">block</span>=<span class="opt-value">expr</span><br></td>
        <td align="left" valign="top">Définie un bloc compris entre la balise XML/HTML ouvrante <span class="opt-html">&lt;balise...&gt;</span> et la balise XML/HTML fermante <span class="opt-html">&lt;/balise&gt;</span> qui encadrent la balise TBS. Les balises XML/HTML désignées font partie intégrante du bloc.<br>
          Exemple :<br>
          <div class="decal"><span class="opt-html">&lt;table id=&quot;tab1&quot;&gt;</span>&nbsp;<span class="blockzone"><span class="opt-html">&lt;tr&gt;&lt;td&gt;</span>[<span class="opt-name">b1</span>.<span class="opt-name">champ1</span>;<span class="opt-name">block</span>=tr]<span class="opt-html">&lt;/td&gt;&lt;/tr&gt;</span></span><span class="opt-html">&lt;/table&gt;</span><br>
            <span class="txt-small">Le bloc est défini par la zone encadrée en pointillés.</span> </div>
          <br>
          <span class="title-1b">Indicateurs spéciaux :</span><br>
          <table border="0" cellspacing="0" cellpadding="4">
            <tr>
              <td width="80" valign="top"><span class="opt-name">block</span>=<span class="opt-value">_</span></td>
              <td valign="top">Défini un bloc sur la ligne texte qui porte la balise TBS. Une ligne texte se termine toujours par un caractère saut-de-ligne. Les sauts de ligne Windows, Linux et Mac sont supportés. Cette fonctionnalité est très pratique pour une modèle de type texte par exemple. </td>
            </tr>
            <tr>
              <td valign="top"><span class="opt-name">block</span>=<span class="opt-value">balise/</span></td>
              <td valign="top">En ajoutant le caractère / à la fin du nom de balise, TBS ne va pas chercher de balise fermante. Le bloc sera défini sur la simple balise XML/HTML ouvrante qui contient la balise TBS. Cela peut être pratique pour multiplier une image par exemple. </td>
            </tr>
          </table>
          Remarque : les indicateurs spéciaux peuvent être utilisés pour les extensions de bloc (voir ci-dessous). <br>
          <br>
          <br>
          <div class="versioning">Historique : Les indicateurs spéciaux &quot;_&quot; et &quot;/&quot; sont supportés depuis TBS 3.1.0.</div>
          <br>
          <a name="html_block_prm_extblk" id="html_block_prm_extblk"></a><span class="title-1b">Les blocs étendus :</span> <br>
          Vous  pouvez étendre  la zone du bloc (ou de la section) au delà de la simple balise XML/HTML ou du simple indicateur spécial en utilisant les expressions suivantes :<br>
          <br>
          Remarque : les marques spéciales (voir ci-dessus) peuvent être utilisées dans les blocs étendus.<br>
          <br>
          Pour étendre la zone du bloc sur plusieurs balises  successives  :<br>
          <div class="decal"><span class="opt-html">&lt;table&gt;</span><span class="blockzone"><span class="opt-html">&lt;tr&gt;</span>[<span class="opt-name">b1</span>.<span class="opt-name">champ1</span>;<span class="opt-name">block</span>=<span class="opt-value">tr</span>+<span class="opt-value">tr</span>+<span class="opt-value">tr</span>]<span class="opt-html">&lt;/tr&gt;<span class="blocksep">&lt;</span>tr&gt;...&lt;/tr&gt;<span class="blocksep">&lt;</span>tr&gt;...&lt;/tr&gt;</span></span>&lt;/table&gt;<br>
            <span class="txt-small">Remarque : vous pouvez spécifier des balises de type différents</span></div>
          <br>
          Pour étendre la zone du bloc sur plusieurs  balises   successives placées avant : <br>
          <div class="decal"><span class="opt-html">...</span> <span class="blockzone"><span class="opt-html">&lt;span&gt;...&lt;/span&gt;<span class="blocksep">&lt;</span>div&gt;</span>[<span class="opt-name">b1</span>.<span class="opt-name">champ1</span>;<span class="opt-name">block</span>=<span class="opt-value">span</span>+(<span class="opt-value">div)</span>]<span class="opt-html">&lt;/div&gt;</span></span> <span class="opt-html">...</span> <br>
            Autre exemple : <br>
            <span class="opt-html">...</span> <span class="blockzone"><span class="opt-html">&lt;span&gt;...&lt;/span&gt; <span class="blocksep">&lt;</span>div&gt;</span>[<span class="opt-name">b1</span>.<span class="opt-name">champ1</span>;<span class="opt-name">block</span>=<span class="opt-value">span</span>+(<span class="opt-value">div)</span>+<span class="opt-value">table</span>]<span class="opt-html">&lt;/div&gt; <span class="blocksep">&lt;</span>table&gt;...&lt;/table&gt;</span></span> <span class="opt-html">...</span> <br>
            La balise mise entre parenthèse représente celle qui contient le champ de définition de bloc. </div>
          <br>
          Pour étendre la zone du bloc sur une  balise d'un niveau  d'encapsulation supérieure : <br>
          <div class="decal"><span class="blockzone"><span class="opt-html">&lt;div&gt; &lt;div&gt;</span> [<span class="opt-name">b1</span>.<span class="opt-name">champ1</span>;<span class="opt-name">block</span>=<span class="opt-value">((div))</span>] <span class="opt-html">&lt;/div&gt; &lt;/div&gt;</span></span> <br>
            Le nombre de parenthèse représente le niveau d'encapsulation des balises. </div>
          <br>
          <div class="versioning">Historique : Les blocs étendus ont  étés ajoutés  à  TBS version 3.0. Avant cela, il fallait utiliser les paramètres 'extend' et 'encaps' qui ne sont plus supportés actuellement.<br>
          </div></td>
      </tr>
    </table>
    <br>
    <a name="html_block_prm" id="html_block_prm"></a>
    <div class="title-1c">Paramètres des blocs :</div>
    <br>
    <table border="0" cellpadding="5" cellspacing="0">
      <tr class="title-1b">
        <td width="80" align="left" valign="top">Paramètre</td>
        <td align="left" valign="top">Description</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="border-sep"><a name="html_block_prm_nodata" id="html_block_prm_nodata"></a><span class="opt-name">nodata</span></td>
        <td align="left" valign="top" class="border-sep">Désigne une section qui ne s'affiche que s'il n'y a aucune donnée à fusionner.<br>
          <br>
          Exemple :<br>
          <div class="decal">
            <table width="349" cellpadding="2" cellspacing="0" class="border-1">
              <tr>
                <td width="178" class="border-1">[b1.champ1;<span class="opt-name">block</span>=<span class="opt-value">tr</span>]</td>
                <td width="157" class="border-1">[b1.champ2]</td>
              </tr>
              <tr>
                <td colspan="2" class="border-1">[b1;<span class="opt-name">block</span>=<span class="opt-value">tr</span>;<span class="opt-name">nodata</span>]<span style="color:#FF3300">Il n'y a aucune donnée.</span></td>
              </tr>
            </table>
          </div>
          <br>
          Pour plus d'information sur les sections, voir le paragraphe '<a href="#html_block_section">sections de bloc</a>'.</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="border-sep"><a name="html_block_prm_bmagnet" id="html_block_prm_bmagnet"></a><span class="opt-name">bmagnet</span>=<span class="opt-value">tag</span><br>
          <span class="txt-small">ou</span><br>
          <span class="opt-name">bmagnet</span>=<span class="opt-value">expr</span></td>
        <td align="left" valign="top" class="border-sep">Désigne une zone XML/HTML qui doit être supprimée si le bloc n'est fusionné avec aucun enregistrement (une requête vide, par exemple, ou un tableau PHP sans item). Le paramètre <span class="opt-name">bmagnet</span> a la même syntaxe que le paramètre <a href="#html_block_prm_block" class="opt-name">block</a>, c'est à dire que <span class="opt-value">expr</span> doit être une balise XML/HTML ou une expression de <a href="#html_block_prm_extblk">bloc étendu</a>.<br>
          Exemple :
          <div class="decal">
            <table cellpadding="2" cellspacing="0" class="border-1">
              <tr>
                <td class="border-1">[b1.champ1;<span class="opt-name">block</span>=<span class="opt-value">tr</span>;<span class="opt-name">bmagnet</span>=<span class="opt-value">table</span>]</td>
                <td class="border-1">[b1.champ2]</td>
              </tr>
            </table>
            <span class="txt-small">Dans cet exemple, la table sera supprimée si il n'y a aucun enregistrement à fusionner.</span> </div>
          <br>
          <span class="title-1b">Remarque :</span> La valeur <span class="opt-value">null</span> n'est pas acceptée par la méthode MergeBlock() comme une source de données, et elle provoque une erreur TBS au lieu de supprimer la zone <span class="opt-name">bmagnet</span>. Si votre source peut être nulle, vous devez faire une vérification préalable. <br>
          Exemple :
          <div class="decal"><span class="txt-code">if (is_null(<span class="opt-name">$data</span>)) <span class="opt-name">$data</span> = array();<br>
            <span class="opt-name">$TBS</span>-&gt;MergeBlock(<span class="opt-value">'b1'</span>,<span class="opt-name">$data</span>);</span></div>
          <br>
          <div class="versioning">Historique : le paramètre bmagnet   est supporté depuis TBS version 3.0.</div></td>
      </tr>
      <tr>
        <td align="left" valign="top" class="border-sep"><span class="opt-name"><a name="html_block_prm_headergrp" id="html_block_prm_headergrp"></a>headergrp</span>=<span class="opt-value">colnom</span></td>
        <td align="left" valign="top" class="border-sep">Désigne une section d'entête qui sera affichée chaque fois que la colonne <span class="opt-value">colnom</span> change de valeur. <span class="opt-value">colnom</span> doit être un nom de colonne valide retourné par la source de données.<br>
          <span class="versioning">Depuis  TBS version 3.3.0</span>, <span class="opt-value">colnom</span> peut aussi être une colonne virtuelle <a href="#php_mergeblock_counting"># ou $</a>, et il supporte aussi la syntaxe des sous-items des champs TBS.<br>
          Vous pouvez définir plusieurs sections <span class="opt-name">headergrp</span> sur des colonnes différentes. L'ordre de placement des sections <span class="opt-name">headergrp</span> dans un bloc peut changer le résultat. <br>
          <br>
          Pour plus d'information sur les sections, voir le paragraphe '<a href="#html_block_section">sections de bloc</a>'.</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="border-sep"><span class="opt-name"><a name="html_block_prm_footergrp" id="html_block_prm_footergrp"></a>footergrp</span>=<span class="opt-value">colnom</span></td>
        <td align="left" valign="top" class="border-sep">Désigne une section de pied qui sera affichée chaque fois que la colonne <span class="opt-value">colnom</span> change de valeur. See <span class="opt-name">headergrp</span>. </td>
      </tr>
      <tr>
        <td align="left" valign="top" class="border-sep"><span class="opt-name"><a name="html_block_prm_splittergrp" id="html_block_prm_splittergrp"></a>splittergrp</span>=<span class="opt-value">colnom</span></td>
        <td align="left" valign="top" class="border-sep">Désigne une section de séparation qui sera affichée chaque fois que la colonne <span class="opt-value">colnom</span> change de valeur. See <span class="opt-name">headergrp</span>. </td>
      </tr>
      <tr id="v202_parentgrp">
        <td align="left" valign="top" class="border-sep"><span class="opt-name"><a name="html_block_prm_parentgrp" id="html_block_prm_parentgrp"></a>parentgrp</span>=<span class="opt-value">colnom</span></td>
        <td align="left" valign="top" class="border-sep">Désigne une section parent qui sera affichée chaque fois que la colonne <span class="opt-value">colnom</span> change de valeur. Contrairement aux autres sections, une section <span class="opt-name">parentgrp</span> peut contenir des sections normales. C'est un moyen de définir un entête et  pied de groupe avec une seule section. </td>
      </tr>
      <tr>
        <td align="left" valign="top" class="border-sep"><a name="html_block_prm_serial" id="html_block_prm_serial"></a><span class="opt-name">serial</span></td>
        <td align="left" valign="top" class="border-sep">Indique que le bloc est un bloc principal qui contient une série de blocs secondaires.<br>
          Pour plus d'information, voir le paragraphe '<a href="#html_block_serial">Affichage en série (en colonne)</a>'.</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="border-sep"><span class="opt-name"><a name="html_block_prm_p1" id="html_block_prm_p1"></a>p1</span>=<span class="opt-value">val1</span></td>
        <td align="left" valign="top" class="border-sep">Signal l'utilisation d'une requête dynamique. Toutes les occurrences de la chaîne '<span class="opt-value">%p1%</span>' trouvées dans la requête passée à la méthode MergeBlock() sont remplacées par la valeur <span class="opt-value">val1</span>.      Pour plus d'information, voir le paragraphe <a href="#html_block_dynsb">Sous-blocs et requêtes dynamiques</a>.<br>
          S'il est utilisé sans valeur, cela vous permet de fusionner plusieurs blocs du même nom. Pour plus de détail, voir <a href="#php_mergeblock_mergeseveral">&quot;Fusionner plusieurs blocs avec les mêmes données&quot;</a>.</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="border-sep"><span class="opt-name"><a name="html_block_prm_sub1" id="html_block_prm_sub1"></a>sub1</span>=<span class="opt-value">colonne1</span></td>
        <td align="left" valign="top" class="border-sep">Définie la colonne contenant les données pour un sous-bloc automatique.<br>
          Pour plus d'information, voir le paragraphe <a href="#html_block_subauto">Sous-blocs automatiques</a>.</td>
      </tr>
      <tr id="v205_ondata">
        <td align="left" valign="top" class="border-sep"><span class="opt-value"><a name="html_block_prm_ondata" id="html_block_prm_ondata"></a></span><span class="opt-name">ondata</span>=<span class="opt-value">nom_fct</span></td>
        <td align="left" valign="top" class="border-sep"> Indique le nom d'une fonction  Php utilisateur qui sera exécutée pendant la fusion du bloc. <br>
          Depuis TBS version 3.0, il est aussi possible d'indiquer une méthode de classe (voir <a href="#php_oop">POO</a>).<br>
          Cette fonction est appelée chaque fois qu'un enregistrement est récupéré dans la source de données. Vous pouvez utilisez les arguments d'une telle fonction Php pour modifier les enregistrements avants qu'ils ne soient fusionnés. La fonction doit avoir la syntaxe suivante:<br>
          <span class="txt-code">&nbsp;&nbsp;function <span class="opt-value">nom_fct</span>(<span class="opt-name">$NomBloc</span>,&amp;<span class="opt-name">$Enreg</span>,<span class="opt-name">$NumEnreg</span>) { ... }<br>
          </span> <span class="opt-name"> </span>
          <table border="0" cellspacing="0" cellpadding="2">
            <tr class="title-1b">
              <td width="80" valign="top">Argument</td>
              <td>Description</td>
            </tr>
            <tr>
              <td valign="top"><span class="opt-name">$</span><span class="opt-name">NomBloc</span></td>
              <td>Returns the name of the block calling the function (read only).</td>
            </tr>
            <tr>
              <td valign="top" class="opt-name">$Enreg</td>
              <td>Returns an associative PHP array containing the current record (read/write<span class="txt-small"> <em>; don't forget the &amp; in the function header</em></span>).<br>
                If you set this variable to <span class="opt-value">False</span>, it ends the merging like it was the end of the record set.</td>
            </tr>
            <tr>
              <td valign="top"><span class="opt-name">$</span><span class="opt-name">NumEnreg</span></td>
              <td>Returns the number of the current record (read only, first record is number 1).</td>
            </tr>
          </table>
          <span class="title-1b">Exemples :</span>
          <div class="decal txt-code"> function f_ajout_colonne(<span class="opt-name">$NomBloc</span>,<span class="opt-name">&amp;$Enreg</span>,<span class="opt-name">$NumEnreg</span>) {<br>
            &nbsp;&nbsp;<span class="opt-name">$</span><span class="opt-name">Enreg</span>[<span class="opt-value">'taille'</span>] = strlen(<span class="opt-name">$</span><span class="opt-name">Enreg</span>[<span class="opt-value">'texte'</span>]); <br>
            } </div>
          <br>
          Depuis  TBS version 3.6.0, il est possible de limiter les fonctions PHP autorisées pour le paramètre <span class="opt-name">ondata</span>. Voir <a href="#php_instanciate">créer un nouvel objet PHP</a>.</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="border-sep"><span class="opt-name"><a name="html_block_prm_when" id="html_block_prm_when"></a>when</span> <span class="opt-value">expr1</span><span class="opt-name">=</span><span class="opt-value">expr2</span></td>
        <td align="left" valign="top" class="border-sep"> Rend la section conditionnelle et définie la condition. Une section conditionnelle n'est affichée que si sa condition est vérifiée. <br>
          Les opérateurs supportés sont :<br>
          <div class="decal">
            <table  border="0" cellpadding="0" cellspacing="2">
              <tr>
                <td width="60"><span class="opt-name">=</span> ou<span class="opt-name">==</span></td>
                <td>égale</td>
                <td>&nbsp;</td>
              </tr>
              <tr>
                <td class="opt-name">!=</td>
                <td>différent</td>
                <td>&nbsp;</td>
              </tr>
              <tr>
                <td class="opt-name">+-</td>
                <td>supérieur strictement </td>
                <td>&nbsp;</td>
              </tr>
              <tr>
                <td class="opt-name">+=-</td>
                <td>supérieur ou égal</td>
                <td>&nbsp;</td>
              </tr>
              <tr>
                <td class="opt-name">-+</td>
                <td>inférieur strictement</td>
                <td>&nbsp;</td>
              </tr>
              <tr>
                <td class="opt-name">-=+</td>
                <td>inférieur ou égal</td>
                <td>&nbsp;</td>
              </tr>
              <tr>
                <td valign="top" class="opt-name">~=</td>
                <td valign="top"><span class="opt-value">expr1</span> vérifie l'expression  
                  rationnelle <span class="opt-value">expr2</span><br>
                  <span class="txt-small">(pour utilisateurs expérimentés)</span></td>
                <td valign="top"><div class="versioning">Historique : ajouté à  TBS 3.0 </div></td>
              </tr>
            </table>
          </div>
          <SPAN class=opt-value>exp1</SPAN> et <SPAN class=opt-value>exp2</SPAN> doivent être des expressions numériques ou textes. Les expressions peuvent contenir des <a href="#html_field_auto">champs [var]</a>. <br>
          <span class="title-1b">Exemple :</span>
          <div class="decal"><span class="opt-html">&lt;div&gt;</span>[<span class="opt-name">onload</span>;<span class="opt-name">block</span>=<span class="opt-value">div</span>;<span class="opt-name">when</span> [<span class="opt-name">var</span>.<span class="opt-name">x</span>]+-<span class="opt-value">0</span>] ... <span class="opt-html">&lt;/div&gt;</span><br>
            <span class="txt-small">Le bloc &lt;div&gt; ne sera affiché que si $x&gt;0. </span></div>
          <br>
          <span class="title-1b">Remarque :</span> ne pas confondre le paramètre <span class="opt-name">when</span> (qui ne marche qu'avec les blocs et sections TBS) et le paramètre <span class="opt-name">if</span> (qui ne marche qu'avec les champs TBS). Le paramètre <span class="opt-name">when</span> n'est pris en compte que si le paramètre <span class="opt-name">block</span> est présent dans la même balise TBS. <br>
          Consultez la rubrique <a href="#html_conditional">blocs conditionnels</a> pour plus d'information.</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="border-sep"><a name="html_block_prm_default" id="html_block_prm_default"></a><span class="opt-name">default</span></td>
        <td align="left" valign="top" class="border-sep">S'utilise uniquement avec les <a href="#html_conditional">blocs conditionnels</a>. Indique un bloc conditionnel qui ne doit s'afficher que si aucune des autres sections du même bloc (nommé) n'a été affichée.</td>
      </tr>
      <tr>
        <td align="left" valign="top" class="border-sep"><a name="html_block_prm_several" id="html_block_prm_several"></a><span class="opt-name">several</span></td>
        <td align="left" valign="top" class="border-sep">S'utilise uniquement avec les <a href="#html_conditional">blocs conditionnels</a>. Indique que plusieurs sections du bloc (nommé) peuvent être affichées si plusieurs conditions sont vérifiées. Par défaut, les sections sont exclusives.</td>
      </tr>
    </table>
  </div>
  <h3><a name="html_block_section" id="html_block_section"></a>Sections de bloc :</h3>
  <div class="norm">Différents blocs portant le même nom seront considérés comme des sections du même bloc.<br>
    Les sections peuvent servir pour :<br>
    - alterner la présentation (sections normales),<br>
    - afficher quelque chose si il n'y a aucun enregistrement (section NoData),<br>
    - afficher un entête à chaque changement de la valeur d'une colonne (sections de regroupement).<br>
    <br>
    <div class="title-1b">Sections normales :</div>
    <br>
    Quand vous définissez plusieurs sections normales, elles seront utilisées de façons alternatives à chaque enregistrement.<br>
    <br>
    <div class="decal">Exemple :<br>
      <br>
      <table width="200" cellpadding="2" cellspacing="0" class="border-1">
        <tr>
          <td bgcolor="#F0FCFF" class="border-1">[<span class="opt-name">b1</span>.libelle;<span class="opt-name">block</span>=tr]</td>
        </tr>
        <tr>
          <td bgcolor="#D2FFE9" class="border-1">[<span class="opt-name">b1</span>.libelle;<span class="opt-name">block</span>=tr]</td>
        </tr>
      </table>
      <br>
      <span class="txt-small">Dans cet exemple, le bloc nommé 'b1' contient deux sections normales. Les enregistrements seront affichés alternativement avec un fond vert puis un fond bleu.</span></div>
    <br>
    <div class="title-1b">Section NoData :</div>
    <br>
    Affiche la section si la source de données de contient aucun enregistrement. <br>
    La section NoData est définie en ajoutant le paramètre <span class="opt-name">nodata</span>.<br>
    <br>
    <div class="decal">Exemple :<br>
      <br>
      <table width="250" cellpadding="2" cellspacing="0" class="border-1">
        <tr>
          <td class="border-1">[<span class="opt-name">b1</span>.libelle;<span class="opt-name">block</span>=tr]</td>
        </tr>
        <tr>
          <td bgcolor="#FFCCCC" class="border-1"><span class="opt-html">Il n'y a rien</span>. [<span class="opt-name">b1</span>;<span class="opt-name">block</span>=tr;<span class="opt-name">nodata</span>]</td>
        </tr>
      </table>
    </div>
    <br>
    <div class="title-1b">Sections de regroupement :</div>
    <br>
    Les sections de regroupement s'affichent chaque fois que la valeur d'une colonne du jeu d'enregistrement change. Vous pouvez définir des sections d'entêtes, de pieds-de-groupe, de séparation et des sections parent à l'aide des paramètres <span class="opt-name">headergrp</span>, <span class="opt-name">footergrp</span>, <span class="opt-name">splittergrp</span> et <span class="opt-name">parentgrp</span>. Voir les <a href="#html_block_prm_headergrp">paramètres de bloc</a> pour plus de détail. <br>
    <br>
    <div class="decal">Exemple :<br>
      <br>
      <table width="300" cellpadding="2" cellspacing="0" class="border-1">
        <tr>
          <td colspan="2" class="border-1"><span class="opt-html"><strong>Année&nbsp;:</strong></span>[<span class="opt-name">b1</span>.annee;<span class="opt-name">block</span>=tr;<span class="opt-name">headergrp</span>=annee] </td>
        </tr>
        <tr>
          <td class="border-1">[<span class="opt-name">b1</span>.libelle]</td>
          <td class="border-1">[<span class="opt-name">b1</span>.montant;<span class="opt-name">block</span>=tr]</td>
        </tr>
      </table>
    </div>
    <br>
    <div id="v202_section_cond">
      <div class="title-1b">Sections conditionnelles :</div>
      <br>
      Les sections conditionnelles ne s'affichent que lorsque leur condition est vérifiée. La condition d'affichage est définie avec le paramètre <a href="#html_block_prm_when" class="opt-name">when</a>. Dès qu'une section a ce paramètre, elle devient conditionnelle. Voir le chapitre sur l'<a href="#html_conditional">affichage conditionnel</a> pour plus de détail. <br>
      <br>
      <div class="decal">Exemple :<br>
        <br>
        <table width="300" cellpadding="2" cellspacing="0" class="border-1">
          <tr>
            <td class="border-1">[<span class="opt-name">b1</span>.nom;<span class="opt-name">block</span>=tr]</td>
          </tr>
          <tr>
            <td bgcolor="#DDDDDD" class="border-1">[<span class="opt-name">b1</span>.adresse;<span class="opt-name">block</span>=tr;<span class="opt-name">when</span> [<span class="opt-name">b1</span>.adr_ok]==1]</td>
          </tr>
        </table>
      </div>
      <br>
    </div>
  </div>
  <h3><a name="html_block_auto" id="html_block_auto"></a>Blocs automatiques :</h3>
  <div class="norm"> Les blocs automatiques permettent de fusionner automatiquements des blocs conditionnels sur certains évènements<a href="#php_mergeblock"></a>. <br>
    <br>
    Il existe deux types de  blocs automatiques :<br>
    - Les  blocs <span class="opt-name">[onload]</span> qui sont fusionnés automatiquement quand la méthode <a href="#php_loadtemplate">LoadTemplate()</a> est appelée.<br>
    - 
    Les blocs <span class="opt-name">[onshow]</span> qui sont fusionnés automatiquement quand la méthode <a href="#php_show">Show()</a> est appelée.<br>
    <br>
    Les blocs automatiques ne sont pas fusionnés avec des données ; c'est pourquoi ils ne peuvent pas avoir de sections normales (non conditionnelles) ni de  champs liés. Les blocs automatiques ne peuvent avoir que des sections conditionnelles. Les conditions sont évaluées une seule fois, et elles peuvent être des expressions contenant des champs [var].<br>
    <br>
    <br>
    <div class="decal">Exemple :<br>
      <br>
      <table width="460" cellpadding="2" cellspacing="0" class="border-1">
        <tr>
          <td class="border-1">[<span class="opt-name">onload</span>;<span class="opt-name">block</span>=tr;<span class="opt-name">when</span> [<span class="opt-name">var.</span>lumiere]=<span class="opt-value">1</span>]<span class="opt-html"> Lumière allumée.</span></td>
        </tr>
      </table>
      <br>
      <table width="460" cellpadding="2" cellspacing="0" class="border-1">
        <tr>
          <td class="border-1">[<span class="opt-name">onshow</span>;<span class="opt-name">block</span>=tr;<span class="opt-name">when</span> [<span class="opt-name">var.</span>user]=<span class="opt-value">1</span>]<span class="opt-html"> Utilisateur : [onshow.username]</span></td>
        </tr>
      </table>
    </div>
    <br>
    Si vous avez besoin d'avoir un groupe sections exclusives, avec ou sans section par défaut, vous pouvez suffixer les noms de bloc [onload] et [onshow] avec &quot;_&quot; suivi d'un nom secondaire.<br>
    <br>
    <br>
    <div class="decal">Exemple :<br>
      <br>
      <table width="460" cellpadding="2" cellspacing="0" class="border-1">
        <tr>
          <td class="border-1">[<span class="opt-name">onload_lumiere</span>;<span class="opt-name">block</span>=tr;<span class="opt-name">when</span> [<span class="opt-name">var.</span>lumiere]=<span class="opt-value">1</span>]<span class="opt-html"> Lumière allumée.</span></td>
        </tr>
        <tr>
          <td class="border-1">[<span class="opt-name">onload_lumiere</span>;<span class="opt-name">block</span>=tr;<span class="opt-name">when</span> [<span class="opt-name">var.</span>lumiere]=<span class="opt-value">0</span>]<span class="opt-html"> Lumière éteinte.</span></td>
        </tr>
        <tr>
          <td class="border-1">[<span class="opt-name">onload_lumiere</span>;<span class="opt-name">block</span>=tr;<span class="opt-name">default</span>] <span class="opt-html">Lumière  ?</span></td>
        </tr>
      </table>
    </div>
    <br>
    Voir les <a href="#html_conditional_section">sections conditionnelles</a> pour plus d'information.<br>
  </div>
  <h3><a name="html_block_serial" id="html_block_serial"></a>Affichage en série (en colonnes) :</h3>
  <div class="norm">L'affichage en série permet d'afficher plusieurs enregistrements dans un même bloc. Pour cela, on utilise un bloc principal et des blocs secondaires.<br>
    <br>
    <div class="decal">Exemple :<br>
      <br>
      <table width="200" cellpadding="4" cellspacing="0" class="border-2">
        <tr>
          <td class="border-2"><table width="100%" cellpadding="0" cellspacing="0" class="border-1">
              <tr>
                <td width="25%" class="border-1"><div align="center">Enr 1</div></td>
                <td width="25%" class="border-1"><div align="center">Enr 2</div></td>
                <td width="25%" class="border-1"><div align="center">Enr 3</div></td>
                <td width="25%" class="border-1"><div align="center">Enr 4</div></td>
              </tr>
            </table></td>
        </tr>
        <tr>
          <td class="border-2"><table width="100%" cellpadding="2" cellspacing="0" class="border-1">
              <tr>
                <td width="25%" class="border-1"><div align="center">Enr 5</div></td>
                <td width="25%" class="border-1"><div align="center">Enr 6</div></td>
                <td width="25%" class="border-1"><div align="center">Enr 7</div></td>
                <td width="25%" class="border-1"><div align="center">Enr 8</div></td>
              </tr>
            </table></td>
        </tr>
        <tr>
          <td class="border-2"><table width="100%" cellpadding="2" cellspacing="0" class="border-1">
              <tr>
                <td width="25%" class="border-1"><div align="center">Enr 9</div></td>
                <td width="25%" class="border-1"><div align="center">...</div></td>
                <td width="25%" class="border-1"><div align="center">...</div></td>
                <td width="25%" class="border-1"><div align="center">...</div></td>
              </tr>
            </table></td>
        </tr>
      </table>
      <br>
      <span class="txt-small">Dans cet exemple, les blocs principaux sont les lignes bleues du tableau, les blocs secondaires sont les cases roses.</span></div>
    <br>
    <div class="title-1b">Syntaxe :</div>
    Le bloc principal et ses blocs secondaires sont fusionnés à l'aide d'un seul appel à la méthode MergeBock(). Le bloc principal doit être défini en utilisant le paramètre <span class="opt-name">serial</span>. Les blocs secondaires doivent être inclus dans le bloc principal. Leur nom de bloc doit être celui du bloc principal suivi de &quot;_&quot; puis du numéro d'ordre d'affichage.<br>
    <br>
    <div class="decal">Exemple :<br>
      <br>
      <table width="200" cellpadding="4" cellspacing="0" class="border-2">
        <tr>
          <td class="border-2"><table width="100%" cellpadding="2" cellspacing="0" class="border-1">
              <tr>
                <td width="25%" class="border-1"><div align="center">[bx;block=tr;serial][bx_1.txt;block=td]</div></td>
                <td width="25%" class="border-1"><div align="center">[bx_2.txt;block=td]</div></td>
                <td width="25%" class="border-1"><div align="center">[bx_3.txt;block=td]</div></td>
                <td width="25%" class="border-1"><div align="center">[bx_4.txt;block=td]</div></td>
              </tr>
            </table></td>
        </tr>
      </table>
      <br>
      <span class="txt-small">Le code PHP correspondant est :</span><br>
      <span class="txt-code"> &nbsp;$TBS-&gt;MergeBlock('<span style="color:#000099">bx</span>',$cnx_id,'<span style="color:#000099">SELECT txt FROM t_info ORDER BY txt</span>')</span></div>
    <br>
    <div class="title-1b"> Bloc secondaire vide :</div>
    Vous pouvez désigner un bloc secondaire spécial qui sera utilisé en remplacement des blocs secondaires inexploités (sans enregistrement). Ce bloc secondaire &quot;vide&quot; doit avoir l'indice 0. Il peut être placé dans un bloc principal avec les blocs secondaires normaux, ou alors seul dans autre bloc <span class="opt-name">serial</span>. Le bloc secondaire &quot;vide&quot; est facultatif.<br>
    <br>
    <div class="decal">Exemple :<br>
      <br>
      <table width="200" cellpadding="4" cellspacing="0" class="border-2">
        <tr>
          <td class="border-2"><table width="100%" cellpadding="2" cellspacing="0" class="border-1">
              <tr>
                <td width="25%" class="border-1"><div align="center">[bx;block=tr;serial][bx_1.txt;block=td]</div></td>
                <td width="25%" class="border-1"><div align="center">[bx_2.txt;block=td]</div></td>
                <td width="25%" class="border-1"><div align="center">[bx_3.txt;block=td]</div></td>
                <td width="25%" class="border-1"><div align="center">[bx_4.txt;block=td]</div></td>
              </tr>
            </table></td>
        </tr>
        <tr>
          <td class="border-2"><table width="100%" cellpadding="2" cellspacing="0" class="border-1">
              <tr>
                <td width="25%" class="border-1"><div align="center">[bx;block=tr;serial][bx_0;block=td] <strong>Vide</strong></div></td>
                <td width="25%" class="border-1">&nbsp;</td>
                <td width="25%" class="border-1">&nbsp;</td>
                <td width="25%" class="border-1">&nbsp;</td>
              </tr>
            </table></td>
        </tr>
      </table>
    </div>
    <br>
    Remarque :<br>
    L'affichage en série marche aussi avec les <a href="#html_block_section">sections de bloc</a> et les <a href="#html_block_subblock">requêtes dynamiques</a>.</div>
  <h3><a name="html_block_subblock" id="html_block_subblock"></a>Les sous-blocs :</h3>
  <div class="norm"> Un sous-bloc est un bloc TBS  encapsulé  dans un autre bloc TBS et qui doit être affiché comme un bloc différent pour chaque enregistrement de son bloc parent. <br>
    <div class="decal"> Exemple :<br>
      <br>
      <table cellpadding="2" cellspacing="0" class="border-2">
        <tr>
          <td class="border-2">Bloc parent - enregistrement n° 1<br>
            <div class="decal">
              <table cellpadding="1" cellspacing="0" class="border-1">
                <tr>
                  <td class="border-1">Sous-bloc,  enregistrement n° 1.1</td>
                </tr>
                <tr>
                  <td class="border-1">Sous-bloc,  enregistrement n° 1.2</td>
                </tr>
              </table>
            </div></td>
        </tr>
        <tr>
          <td class="border-2">Bloc parent - enregistrement n°2<br>
            <div class="decal">
              <table cellpadding="1" cellspacing="0" class="border-1">
                <tr>
                  <td class="border-1">Sous-bloc,  enregistrement n° 2.1</td>
                </tr>
                <tr>
                  <td class="border-1">Sous-bloc,  enregistrement n° 2.2</td>
                </tr>
                <tr>
                  <td class="border-1">Sous-bloc,  enregistrement n° 2.3</td>
                </tr>
              </table>
            </div></td>
        </tr>
        <tr>
          <td class="border-2">Bloc parent - enregistrement n°3<br>
            <div class="decal">
              <table cellpadding="1" cellspacing="0" class="border-1">
                <tr>
                  <td class="border-1">Sous-bloc,  enregistrement n° 3.1</td>
                </tr>
              </table>
            </div></td>
        </tr>
      </table>
    </div>
    <br>
    On peut réaliser des sous-blocs de deux manières différentes avec TBS :<br>
    <br>
    - Sous-blocs automatiques : (<span class="versioning">depuis TBS 3.5.0</span>) c'est lorsque les données du bloc parent ont une colonne qui contient les données prête à fusionner pour le sous-bloc. Les sous-blocs automatiques sont activées à l'aide du paramètre <span class="opt-name">sub1</span> dans le bloc parent, et ils sont fusionnées automatiquement pendant la fusion du bloc parent. Il n'y a pas besoin d'un MergeBlock() supplémentaire.<br>
    Voir <a href="#html_block_subauto">Sous-blocs automatiques</a> pour plus de détails.<br>
    <br>
    - Sous-blocs avec requête dynamique : c'est quand les données du sous-bloc sont récupérées à l'aide d'une requête qui peut changer pour chaque enregistrement du bloc parent. Les sous-blocs avec requête dynamiques ont besoin d'un MergeBlock() supplémentaire pour réaliser l fusion avec leur requête dynamique. Le paramètre <span class="opt-name">p1</span> est aussi nécessaire dans la définition, du sous-bloc afin de préciser les valeurs à injecter dans la requête dynamique.<br>
    Voir <a href="#html_block_dynsb">Sous-blocs avec requêtes dynamiques</a> pour plus de détail. <br>
  </div>
  <h3><a name="html_block_subauto" id="html_block_subauto"></a>Sous-blocs automatiques :</h3>
  <div class="norm"><span class="versioning">Les sous-blocs automatiques sont supportés depuis  TBS version 3.5.0.</span><br>
    <br>
    Vous pouvez utiliser les sous-blocs automatiques  lorsque les données du bloc parent ont une colonne qui contient les données prête à fusionner pour le sous-bloc.  
    Ajoutez le paramètre <span class="opt-name">sub1</span>=<span class="opt-value">colonne</span> dans le bloc parent pour définir la colonne qui contient les données pour le sous-bloc. Si vous avez plusieurs sous-blocs à fusionner dans le même bloc parent, alors utilisez les paramètres <span class="opt-name">sub2</span>, <span class="opt-name">sub3</span>, ... Le nom du sous-bloc doit être le même que le bloc parent suivi du suffixe <span class="opt-name">_sub1</span>, (ou <span class="opt-name">_sub2</span>, <span class="opt-name">_sub3</span>, ...)<br>
    <br>
    Les données du bloc parent doivent avoir une colonne contenant les données du sous-bloc. Les types de données supportés sont :<br>
    - un tableau PHP<br>
    - un objet supporté par TBS (en natif, ou avec un plug-in)<br>
    - une chaine texte de valeurs séparées par des virgules (,).<br>
    <br>
    <div class="decal">Exemple :<br>
      <br>
      <table width="400" cellpadding="2" cellspacing="0" class="border-2">
        <tr>
          <td class="border-2"><span style="color:#336699">Nom :</span> [pers.nom;block=tr;sub1=langue]<br>
            <table cellpadding="1" cellspacing="0" class="border-1">
              <tr>
                <td width="200" class="border-1">[pers_sub1.val;block=tr]</td>
              </tr>
            </table></td>
        </tr>
      </table>
      <br>
      <span class="txt-small">Code  PHP correspondant :</span><br>
      <span class="txt-code">&nbsp;$TBS-&gt;MergeBlock('<span class="opt-value">pers</span>',$cnx_id,'<span class="opt-value">SELECT nom,langue FROM t_personne'</span>)</span><br>
      <br>
      <span class="txt-small">Résultats de la fusion :</span><br>
      <br>
      <table width="400" cellpadding="2" cellspacing="0" class="border-2">
        <tr>
          <td class="border-2"><span style="color:#336699">Nom :</span> Pierre<br>
            <table cellpadding="1" cellspacing="0" class="border-1">
              <tr>
                <td class="border-1">US</td>
              </tr>
              <tr>
                <td width="190" class="border-1">FR</td>
              </tr>
            </table></td>
        </tr>
        <tr>
          <td class="border-2"><span style="color:#336699">Nom :</span> Paul<br>
            <table cellpadding="1" cellspacing="0" class="border-1">
              <tr>
                <td width="190" class="border-1">US</td>
              </tr>
            </table></td>
        </tr>
        <tr>
          <td class="border-2"><span style="color:#336699">Nom : </span>Jacques<br>
            <table cellpadding="1" cellspacing="0" class="border-1">
              <tr>
                <td class="border-1">FR</td>
              </tr>
              <tr>
                <td class="border-1">ES</td>
              </tr>
              <tr>
                <td width="190" class="border-1">IT</td>
              </tr>
            </table></td>
        </tr>
      </table>
    </div>
    <br>
    <span class="title-1b">Avoir une colonne optionnelle :</span> Si vous ne voulez pas de message d'erreur quand la colonne est omise dans les données parent, alors vous pouvez la définir comme optionnelle en utilisant des parenthèses. Cela fonctionne uniquement si les données parent est un tableau PHP. <span class="versioning">La colonne optionnelle est supportée depuis TBS version 3.6.0.</span><br>
    <br>
    <div class="decal">Exemple :<br>
      <br>
      <table width="400" cellpadding="2" cellspacing="0" class="border-2">
        <tr>
          <td class="border-2"><span style="color:#336699">Nom :</span> [pers.nom;block=tr;sub1=(langue)]<br>
            <table cellpadding="1" cellspacing="0" class="border-1">
              <tr>
                <td width="200" class="border-1">[pers_sub1.val;block=tr]</td>
              </tr>
            </table></td>
        </tr>
      </table>
    </div>
    <br>
    <span class="title-1b">Sous-blocs directs (qui ne sont pas enregistrés sous une colonne) :</span> Si vous utilisez le paramètre <span class="opt-name">sub1</span> en omettant le nom de colonne, alors TBS va considérer que les données du sous-bloc sont directement accessibles sur l'enregistrement   en cours plutôt que dans une colonne de cet enregistrement. <span class="versioning">Les sous-blocs directs sont supportés depuis TBS version 3.6.1.</span><br>
    <br>
    <div class="decal">Exemple de données qui peuvent être fusionnées avec un sous-bloc direct :<br>
      <span class="txt-code">$data = array();<br>
      $data['groupe1'] = 
      array();<br>
      $data['groupe1'][] = 
      array('id'=&gt;1, 'nom'=&gt;'pierre');<br>
      $data['groupe1'][] = 
      array('id'=&gt;2, 'nom'=&gt;'paul');<br>
      $data['groupe2'] = 
      array();<br>
      $data['groupe2'][] = 
      array('id'=&gt;3, 'nom'=&gt;'jules');<br>
      $data['groupe2'][] = 
      array('id'=&gt;4, 'nom'=&gt;'jim');</span><br>
      <br>
      Exemple de sous-bloc direct qui peut être fusionné avec ces données :<br>
      <table width="400" cellpadding="2" cellspacing="0" class="border-2">
        <tr>
          <td class="border-2"><span style="color:#336699">Groupe :</span> [pers.$;block=tr;sub1]<br>
            <table cellpadding="1" cellspacing="0" class="border-1">
              <tr>
                <td width="200" class="border-1">[pers_sub1.nom;block=tr]</td>
              </tr>
            </table></td>
        </tr>
      </table>
    </div>
  </div>
  <h3><a name="html_block_dynsb" id="html_block_dynsb"></a>Sous-blocs avec des requêtes dynamiques :</h3>
  <div class="norm">
    <div class="title-1b">Principe des requêtes dynamiques :</div>
    <br>
    Il est possible d'utiliser la méthode MergeBlock() avec une requête dynamique.<br>
    Dans votre modèle, vous devez définir un bloc en ajoutant les paramètres <span class="opt-name">p1</span>, <span class="opt-name">p2</span>, <span class="opt-name">p3</span>,... avec leurs valeurs.<br>
    La requête passée à la méthode MergeBlock() doit contenir des marqueurs <span class="opt-value">%p1%</span>, <span class="opt-value">%p2%</span>, <span class="opt-value">%p3%</span>, ... pour accueillir les valeurs des paramètres <span class="opt-name">p1</span>, <span class="opt-name">p2</span>, <span class="opt-name">p3</span>,... .<br>
    <br>
    Chaque section du bloc à fusionner contenant un paramètre <span class="opt-name">p1</span> sera traité comme un bloc à part pour lequel on ré-exécute la requête dynamique. Les sections du bloc sui n'ont pas de paramètre <span class="opt-name">p1</span> sont rattachées à la section avec paramètre <span class="opt-name">p1</span> qui précède.<br>
    <br>
    <div class="decal">Exemple :<br>
      <br>
      Pays : France <br>
      <table cellpadding="2" cellspacing="0" class="border-1">
        <tr>
          <td width="200" class="border-1">[blk.ville;block=tr;p1='france']</td>
          <td width="100" class="border-1">[blk.pays]</td>
        </tr>
      </table>
      <br>
      Pays : USA <br>
      <table cellpadding="2" cellspacing="0" class="border-1">
        <tr>
          <td width="200" class="border-1">[blk.ville;block=tr;p1='us']</td>
          <td width="100" class="border-1">[blk.pays]</td>
        </tr>
      </table>
      <br>
      <span class="txt-small">Code PHP correspondant :</span><br>
      <span class="txt-code">&nbsp;$TBS-&gt;MergeBlock('<span class="opt-value">blk</span>',$cnx_id,&quot;<span class="opt-value">SELECT ville,pays FROM t_geo WHERE (pays='%p1%')</span>&quot;)<br>
      <br>
      </span><span class="txt-small">Résultat de la fusion :<br>
      </span><br>
      Pays : France <br>
      <table cellpadding="2" cellspacing="0" class="border-1">
        <tr>
          <td width="200" class="border-1">Paris</td>
          <td width="100" class="border-1">france</td>
        </tr>
        <tr>
          <td class="border-1">Toulouse</td>
          <td class="border-1">france</td>
        </tr>
      </table>
      <br>
      Pays : USA <br>
      <table cellpadding="2" cellspacing="0" class="border-1">
        <tr>
          <td width="200" class="border-1">Washington</td>
          <td width="100" class="border-1">us</td>
        </tr>
        <tr class="border-1">
          <td class="border-1">Boston</td>
          <td class="border-1">us</td>
        </tr>
      </table>
    </div>
    <br>
    <div class="title-1b">Utilisation avec des sous-blocs :</div>
    <br>
    Les requêtes dynamiques vous permettent de réaliser simplement un système de bloc-principal / sous-blocs. Voici comment vous pouvez faire :<br>
    - Créez un bloc principal, puis un sous-bloc contenu dans le bloc principal.<br>
    - Liez-les en ajoutant au sous-bloc un paramètre p1 qui prend pour valeur un champ du bloc principal.<br>
    - Du côté PHP, fusionnez d'abord le bloc principal, puis le sous-bloc.<br>
    <br>
    <div class="decal">Exemple :<br>
      <br>
      <table width="400" cellpadding="2" cellspacing="0" class="border-2">
        <tr>
          <td class="border-2"><span style="color:#336699">Pays :</span> [pri.pays;block=tr]<br>
            <table cellpadding="1" cellspacing="0" class="border-1">
              <tr>
                <td width="200" class="border-1">[sub.ville;block=tr;p1=[pri.pays_id]]</td>
              </tr>
            </table></td>
        </tr>
      </table>
      <br>
      <span class="txt-small">Code PHP correspondant :</span><br>
      <span class="txt-code">&nbsp;$TBS-&gt;MergeBlock('<span class="opt-value">pri</span>',$cnx_id,'<span class="opt-value">SELECT pays,pays_id FROM t_pays</span>')</span><br>
      <span class="txt-code">&nbsp;$TBS-&gt;MergeBlock('<span class="opt-value">sub</span>',$cnx_id,'<span class="opt-value">SELECT ville FROM t_ville WHERE (pays_id=%p1%)</span>') </span><br>
      <br>
      <span class="txt-small">Résultat de la fusion :</span><br>
      <br>
      <table width="400" cellpadding="2" cellspacing="0" class="border-2">
        <tr>
          <td class="border-2"><span style="color:#336699">Pays :</span> France<br>
            <table cellpadding="1" cellspacing="0" class="border-1">
              <tr>
                <td class="border-1">Paris</td>
              </tr>
              <tr>
                <td width="190" class="border-1">Toulouse</td>
              </tr>
            </table></td>
        </tr>
        <tr>
          <td class="border-2"><span style="color:#336699">Pays :</span> Allemagne<br>
            <table cellpadding="1" cellspacing="0" class="border-1">
              <tr>
                <td class="border-1">Berlin</td>
              </tr>
              <tr>
                <td width="190" class="border-1">Munique</td>
              </tr>
            </table></td>
        </tr>
        <tr>
          <td class="border-2"><span style="color:#336699">Pays : </span>Espagne<br>
            <table cellpadding="1" cellspacing="0" class="border-1">
              <tr>
                <td class="border-1">Madrid</td>
              </tr>
              <tr>
                <td width="190" class="border-1">Barcelone</td>
              </tr>
            </table></td>
        </tr>
      </table>
    </div>
    <br>
    Remarques :<br>
    - Le paramètre <span class="opt-name">htmlconv</span>=<span class="opt-value">esc</span> permet de passer à la requête des valeurs chaînes protégées.<br>
    - Les requêtes dynamiques marchent aussi avec les <a href="#html_block_section">sections de bloc</a> et l'<a href="#html_block_serial">affichage en série</a>.</div>
  <h3><a name="html_subtemplate" id="html_subtemplate"></a>Sous-modèles :</h3>
  <div class="norm">Il y a deux façons pour insérer des sous-modèles dans votre modèle principal.<br>
    <br>
    <span class="title-1c">Insertion brute avec le  paramètre <span class="opt-name">file </span>:</span><br>
    <br>
    C'est la meilleure façon pour insérer une partie  se trouvant dans un autre fichier, comme cela est habituellement fait pour les entêtes et pieds-de-page. <br>
    <br>
    La valeur donnée au paramètre <span class="opt-name">file</span> doit être le nom d'un fichier existant sur le serveur. Vous pouvez utiliser une expression avec des champs [var] et le mot-clé [val] qui représente la valeur du champ.<br>
    <br>
    <span class="title-1b">Exemples :</span><br>
    <div class="decal">[<span class="opt-name">onload</span>;<span class="opt-name">file</span>=entete.htm]<br>
      [<span class="opt-name">onload</span>;<span class="opt-name">file</span>=[<span class="opt-name">var</span>.fichier_entete]]<br>
      [onshow.sub1;<span class="opt-name">file</span>=[<span class="opt-name">val</span>]]</div>
    <br>
    Le contenu du fichier est insérer à la place du champ, sans <a href="#html_field_prm_htmlconv">conversion de caractère</a> et sans <a href="#html_field_prm_protect">protection TBS </a>.<br>
    Les balises [onload] contenues dans le fichier sont  traitées au moment de l'insertion. Les balises 
    [onshow] seront fusionnées sur la méthode Show() parce qu'elles sont devenues parties intégrantes du modèle principal.<br>
    <br>
    Le sous-modèle peut contenir des champs TBS, y compris des champs [var] et des blocs à fusionner. Si vous avez l'intention de fusionner des données avec un bloc défini dans un sous-modèle, alors il est conseillé d'utiliser le paramètre <span class="opt-name">file</span> dans un champ  [onload] pour s'assurer que le sous-modèle soit inséré avant que vous appeliez MergeBlock(). <br>
    <br>
    Vous pouvez concevoir un sous-modèle comme une page XML/HTML/Texte indépendante, et demander à TBS de n'inclure que la partie <span class="opt-html">&lt;body&gt;</span> (ou une autre partie) dans le modèle principal. Ceci se réalise en utilisant le paramètre <a href="#html_field_prm_getbody" class="opt-name">getbody</a> en plus du paramètre <span class="opt-name">file</span> dans le champ TBS du modèle principal. Cette technique vous permet de travailler en <span class="contextual" title="What You See Is What You Get">WYSIWYG</span> sur vos sous-modèles.<br>
    <br>
    <br>
    <div id="v202_subtpl_overview"> <span class="title-1c">Insertion assistée par du code Php avec le paramètre <span class="opt-name">subtpl </span>:</span><br>
      <br>
      Le paramètre <span class="opt-name">subtpl</span> est utile pour gérer l'insertion d'un sous-modèle à l'aide de code Php. La paramètre <span class="opt-name">subtpl</span> n'est actif que lorsqu'il est utilisé avec un paramètre <span class="opt-name">script</span> ou <span class="opt-name">onformat</span>. Il bascule l'instance courante de TBS dans le mode Sous-modèle pendant l'exécution du script ou de la fonction, et peut agir sur un nouveau modèle sans altérer le modèle principal.<br>
      <br>
      Le mode Sous-modèle présente les caractéristiques suivantes :<br>
      <br>
      <table width="100%" border="0" cellpadding="2" cellspacing="0" >
        <tr>
          <td valign="top">*</td>
          <td>Les sorties  Php  sont affichées à l'emplacement du champ au lieu d'être envoyés immédiatement au client. Par exemple, l'utilisation de la commande Php echo() insérera un texte dans le modèle principal au lieu de le sortir directement. L'utilisation de la méthode Show() insérera aussi le résultat de la sous-fusion dans le modèle principal.</td>
        </tr>
        <tr>
          <td valign="top">&nbsp;</td>
          <td>&nbsp;</td>
        </tr>
        <tr>
          <td width="10" valign="top">*</td>
          <td>Une référence à l'instance de TBS est fournie par la variable <span class="opt-name">$this</span> ou <span class="opt-name">$TBS</span>, selon que vous utilisez le paramètre <span class="opt-name">script</span> ou <span class="opt-name">onformat</span>. Cette variable peut être utilisée pour de nouvelles sous-fusions sans altérer le modèle principal. La méthode Show() n'arrêtera pas l'exécution de script durant le mode Sous-modèle, comme cela est fait par défait dans le mode normal.</td>
        </tr>
      </table>
      <br>
      Quand le script ou la fonction se termine, l'instance TBS retourne en mode normal et agit sur le modèle principal.<br>
      <br>
      Exemple <span class="txt-small">avec le paramètre <span class="opt-name">script </span>:</span><br>
      <br>
      <div class="decal">
        <table width="100%" border="0" cellpadding="4" cellspacing="0" >
          <tr>
            <td width="120" valign="top" class="title-1b">HTML :</td>
            <td>[<span class="opt-name">onload</span>.fichier;<span class="opt-name">script</span>=<span class="opt-value">specialbox.php</span>;<span class="opt-name">subtpl</span>]</td>
          </tr>
          <tr>
            <td valign="top" class="title-1b">Script PHP :</td>
            <td class="txt-code"><span class="opt-html">&lt;?php</span><br>
              &nbsp;&nbsp;echo(<span class="opt-value">'* Ici insertion d'un sous-modèle *'</span>);<br>
              &nbsp;&nbsp;<span class="opt-name">$this</span>-&gt;LoadTemplate(<span class="opt-name">$CurrVal</span>);<br>
              &nbsp;&nbsp;<span class="opt-name">$this</span>-&gt;MergeBlock(<span class="opt-value">'blk1'</span>,<span class="opt-name">$GLOBALS</span>[<span class="opt-value">'conn_id'</span>],<span class="opt-value">'SELECT * FROM table1'</span>);<br>
              &nbsp;&nbsp;<span class="opt-name">$this</span>-&gt;Show(); <br>
              <span class="opt-html">?&gt;</span></td>
          </tr>
          <tr>
            <td valign="top" class="title-1b">Remarques : </td>
            <td class="txt-small"><span class="opt-name">$CurrVal</span> est une variable locale fournie par TBS quand on utilise le paramètre <span class="opt-name">script</span> ; cette variable fait référence à la valeur du champ en cours de fusion. Dans l'exemple ci-dessus, <span class="opt-name">$CurrVal</span> contient la valeur de la variable globale <span class="opt-name">$file</span>. Vous pouvez la remplacer, par exemple, par le nom du fichier du sous-modèle à charger (par exemple  : <span class="opt-value">'monsousmodele.htm'</span>). Voir le paramètre <a href="#html_field_prm_script" class="opt-name">script</a> pour plus d'information. </td>
          </tr>
        </table>
        <span class="txt-code"></span></div>
      <br>
      Exemple <span class="txt-small">avec le paramètre <span class="opt-name">onformat</span> :</span><br>
      <br>
      <div class="decal">
        <table width="100%" border="0" cellpadding="4" cellspacing="0" >
          <tr>
            <td width="120" valign="top" class="title-1b">HTML :</td>
            <td>[<span class="opt-name">onload</span>.user_mode;<span class="opt-name">onformat</span>=<span class="opt-value">f_user_info</span>;<span class="opt-name">subtpl</span>]</td>
          </tr>
          <tr>
            <td valign="top" class="title-1b">Fonction PHP :</td>
            <td class="txt-code">function f_user_info(<span class="opt-name">$FieldName</span>,&amp;<span class="opt-name">$CurrVal</span>,&amp;<span class="opt-name">$CurrPrm</span>,&amp;<span class="opt-name">$TBS</span>) {<br>
              &nbsp;&nbsp;if ($CurrVal==1) { <span class="opt-html">// User is logged in </span> <br>
              &nbsp;&nbsp;&nbsp;&nbsp;<span class="opt-name">$TBS</span>-&gt;LoadTemplate(<span class="opt-value">'user_info.htm'</span>);<br>
              &nbsp;&nbsp;&nbsp;&nbsp;<span class="opt-name">$TBS</span>-&gt;MergeBlock(<span class="opt-value">'blk1'</span>,<span class="opt-name">$GLOBALS</span>[<span class="opt-value">'conn_id'</span>],<span class="opt-value">'SELECT * FROM table1'</span>);<br>
              &nbsp;&nbsp;&nbsp;&nbsp;<span class="opt-name">$TBS</span>-&gt;Show();<br>
              &nbsp;&nbsp;} else { <span class="opt-html">// User not logged in</span><br>
              &nbsp;&nbsp;&nbsp;&nbsp;echo(<span class="opt-value">'You are not logged in.'</span>); <br>
              &nbsp;&nbsp;}<br>
              }</td>
          </tr>
          <tr>
            <td valign="top" class="title-1b">Remarques : </td>
            <td class="txt-small"><span class="opt-name">$CurrVal</span> est une variable déclarée en tant qu'argument de la fonction. C'est TBS qui se charge d'appeler  cette fonction de sorte que <span class="opt-name">$CurrVal</span> fasse référence à la valeur du champ en cours de fusion. Dans  exemple ci-dessus, <span class="opt-name">$CurrVal</span> est égal à la valeur global <span class="opt-name">$user_mode</span>. De même la variable <span class="opt-name">$CurrPrm</span> fait référence au tableau des paramètres du champ en cours de fusion, et <span class="opt-name">$TBS</span> fait référence l'instance de TinyButStrong en cours d'utilisation. Voir le paramètre <a href="#html_field_prm_script" class="opt-name">onformat</a> pour plus d'information. </td>
          </tr>
        </table>
      </div>
    </div>
  </div>
  <h3><a name="html_conditional" id="html_conditional"></a>Affichage conditionnel :</h3>
  <div class="norm">TinyButStrong offre plusieurs outils pour gérer l'affichage conditionnel pour les champs et les blocs.<br>
    <br>
    <span class="title-1c">Champs conditionnels</span><br>
    <br>
    Tous les champs TBS acceptent les paramètres d'affichage conditionnel rappelés ci-dessous. <br>
    <div class="decal">
      <table border="0" cellpadding="2" cellspacing="0" >
        <tr class="title-1b">
          <td width="250" valign="top">Paramètre</td>
          <td valign="top">Description</td>
        </tr>
        <tr>
          <td valign="top">. (point) </td>
          <td valign="top">Affiche un espace insécable Html si la valeur du champ est vide.</td>
        </tr>
        <tr>
          <td valign="top"><span class="opt-name">ifempty</span>=<span class="opt-value">valeur2</span></td>
          <td valign="top">Affiche <span class="opt-value">valeur2</span> si la valeur du champ est vide.</td>
        </tr>
        <tr>
          <td valign="top"><span class="opt-name">magnet</span>=<span class="opt-value">tag</span></td>
          <td valign="top">Supprime une balise ou un couple de balise si la valeur du champ est vide.</td>
        </tr>
        <tr>
          <td valign="top"><span class="opt-name">if</span> <span class="opt-value">condition</span><br>
            <span class="opt-name">then</span> <span class="opt-value">valeur1</span><br>
            <span class="opt-name">else</span> <span class="opt-value">valeur2</span></td>
          <td valign="top">Affiche <span class="opt-value">valeur1</span> ou <span class="opt-value">valeur2</span> selon que la condition est vérifiée ou non.</td>
        </tr>
        <tr>
          <td valign="top"><span class="opt-name">frm</span>=<span class="opt-value">format1</span>|<span class="opt-value">format2</span>|<span class="opt-value">format3</span>|<span class="opt-value">format4</span></td>
          <td valign="top">Change le format numérique ou date/heure selon que la valeur du champ est positive, négative, zéro ou vide. </td>
        </tr>
      </table>
      <br>
    </div>
    <div class="decal">Exemple :<br>
      [onshow.<span class="opt-name">error_id</span>;<span class="opt-name">if</span> <span class="opt-value">[val]=0</span>;<span class="opt-name">then</span> <span class="opt-value">'pas d''erreur'</span>;<span class="opt-name">else</span> <span class="opt-value">'erreur constatée'</span>] </div>
    <br>
    <span class="title-1c"><a name="html_conditional_section"></a>Sections conditionnelles</span> <br>
    <br>
    Vous pouvez utiliser des sections conditionnelles dans n'importe quel bloc TBS (<a href="#html_block">bloc  de données</a> ou <a href="#html_block_auto">bloc automatique</a>). Une section conditionnelle est une section  qui a un paramètre <span class="opt-name">when</span> définissant une condition, ou bien un paramètre <span class="opt-name">default</span>. Lors de la fusion du bloc, chaque condition <span class="opt-name">when</span> est évaluée jusqu'a ce qu'une soit vérifiée. Dès qu'une condition <span class="opt-name">when</span> est vérifiée, sa section conditionnelle est conservée et toutes les autres sont supprimées. Si aucune condition <span class="opt-name">when</span> n'est vérifiée, alors la section <span class="opt-name">default</span> est conservée si elle existe.<br>
    <span class="title-1b"><br>
    Cas des blocs de données :</span><br>
    S'il s'agit d'un bloc de données, c'est à dire fusionné avec <a href="#php_mergeblock">MergeBlock()</a>, alors les sections conditionnelles sont réévaluée pour chaque enregistrement. Il est même possible de définir un bloc de données qui ne contient que des sections conditionnelles, sans section standard.<br>
    <br>
    <span class="title-1b">Définition des conditions :</span><br>
    Les conditions définies dans le paramètre <span class="opt-name">when</span> peuvent être des expressions contenant des <a href="#html_field_auto">champs [var]</a> et des champs liés (s'il s'agit d'un bloc de données). Voir <a href="#html_block_prm_when">paramètre when</a> pour plus de détail sur les opérateurs supportés par TBS.<br>
    <br>
    <span class="title-1b">Exclusivité des sections : </span><br>
    Par défaut, les sections conditionnelles sont exclusives pour un même bloc. C'est à dire qu'une seule section conditionnelle peut être affichée par bloc. Mais si vous souhaitez qu'un bloc ait des sections conditionnelles non-exclusives, vous pouvez utiliser le paramètre <span class="opt-name">several</span> sur la première section conditionnelle. Avec ce paramètre, toutes les conditions sont évaluées et chaque condition vraie fera afficher se section.<br>
    <br>
    Exemple avec un <a href="#html_block">bloc de données</a> : <br>
    <br>
    <div class="decal">
      <table width="600" cellpadding="2" cellspacing="0" class="border-1">
        <tr>
          <td class="border-1"><span class="opt-html">Nom : </span>[<span class="opt-name">b1</span>.Nom;<span class="opt-name">block</span>=tr]</td>
          <td valign="top" class="opt-html"> section standard</td>
        </tr>
        <tr>
          <td class="border-1"><span class="opt-html">Adresse :</span><br>
            [<span class="opt-name">b1</span>.ad_ligne1;<span class="opt-name">block</span>=tr;<span class="opt-name">when</span> [<span class="opt-name">b1.</span>adresse]=<span class="opt-value">1</span>]<br>
            [<span class="opt-name">b1</span>.ad_ligne2]<br>
            [<span class="opt-name">b1</span>.ad_cp] - [<span class="opt-name">b1</span>.add_town]<br></td>
          <td valign="top" class="opt-html"> section conditionnelle </td>
        </tr>
        <tr>
          <td class="border-1"><span class="opt-html">Sans  adresse.</span>[<span class="opt-name">b1</span>;<span class="opt-name">block</span>=tr;<span class="opt-name">default</span><span class="opt-value"></span>]</td>
          <td valign="top" class="opt-html">section conditionnelle par défaut (facultatif)</td>
        </tr>
      </table>
    </div>
    <br>
    Exemple avec un <a href="#html_block_auto">bloc automatique</a> : <br>
    <br>
    <div class="decal">
      <table cellpadding="2" cellspacing="0" class="border-1">
        <tr>
          <td class="border-1">[<span class="opt-name">onload_err</span>;<span class="opt-name">block</span>=tr;<span class="opt-name">when</span> [<span class="opt-name">var.</span>email]='';<span class="opt-name">several</span>]<span class="opt-html"> Votre email est vide.</span></td>
        </tr>
        <tr>
          <td class="border-1">[<span class="opt-name">onload_err</span>;<span class="opt-name">block</span>=tr;<span class="opt-name">when</span> [<span class="opt-name">var.</span>nom]=<span class="opt-value">0</span>]<span class="opt-html"> Votre nom est vide.</span></td>
        </tr>
        <tr>
          <td class="border-1">[<span class="opt-name">onload_err</span>;<span class="opt-name">block</span>=tr;<span class="opt-name">default</span>] <span class="opt-html">Tout est ok.</span></td>
        </tr>
      </table>
    </div>
    <br>
  </div>
  <a name="plugins" id="plugins"></a>
  <h2 class="pagebreak">Coder des plug-ins :</h2>
  Il est possible d'ajouter des fonctionnalités à TinyButStrong à l'aide de plug-ins. Les <span class="title-1c">plug-ins de bases de données</span> permettent simplement à la méthode MergeBlock() de reconnaître de nouveaux types de bases de données. Les <span class="title-1c">autres plug-ins</span> permettent d'ajouter des fonctionnalités à TBS ou bien de modifier ses principales méthodes pour le rendre plus spécialisé. <br>
  <br>
  Dans le deux cas, un  plug-in se présente sous la forme d'un jeu de fonctions PHP ou d'une seule classe PHP qui doivent répondre à une syntaxe précise attendue par TBS. Des plug-in sont proposés au téléchargement sur le <a href="http://www.tinybutstrong.com/fr">site web de TinyButStrong</a>.
  <h3><a name="plugins_db" id="plugins_db"></a>Plug-ins de base de données :</h3>
  <div class="norm"><span class="versioning">Historique : les plug-ins de base de données sont supportés depuis TBS version 1.8.</span> <br>
    <br>
    Un plug-in de base de données permet à la méthode MergeBlock() de reconnaitre a nouveau type de base de données.<br>
    Quand vous faites un appel tel que <span class="opt-name">$TBS</span>-&gt;MergeBlock(<span class="opt-name">$NomBloc</span>, <span class="opt-name">$Source</span>, <span class="opt-name">$Requête</span>), le processus MergeBlock commence par examiner <span class="opt-name">$Source</span> pour voir si son type est supporté. <br>
    <table border="0" cellspacing="0" cellpadding="3">
      <tr>
        <td valign="top">&bull;</td>
        <td valign="top">Si <span class="opt-name">$Source</span> est un type de ressource connu en natif par TBS, alors le processus MergeBlock n'a besoin d'aucun plug-in, il va retrouver les données par lui-même. </td>
      </tr>
      <tr>
        <td valign="top">&bull;</td>
        <td valign="top">Si <span class="opt-name">$Source</span> est un objet avec une méthode nommée tbsdb_open() alors le processus MergeBlock suppose que cet objet est un plug-in de base de données et il va l'utiliser pour récupérer les données. (Voir plus en détail ci-dessous)</td>
      </tr>
      <tr>
        <td valign="top">&bull;</td>
        <td valign="top">Si <span class="opt-name">$Source</span> est une chaîne commençant par <span class="opt-value">'~'</span> alors le processus MergeBlock suppose que la propriété <span class="opt-name">$TBS</span>-&gt;ObjectRef est un plug-in de base de données et il l'utilise pour récupérer les données. (Voir plus en détail ci-dessous)</td>
      </tr>
      <tr>
        <td valign="top">&bull;</td>
        <td valign="top">Si <span class="opt-name">$Source</span> est autre chose alors le processus  MergeBlock essaye de trouver le plug-in fait avec des fonctions utilisateur et qui correspond au type de <span class="opt-name">$Source</span>. (Voir plus en détail ci-dessous)</td>
      </tr>
    </table>
    <br>
    <span class="title-1c">Plug-in basé sur des fonctions utilisateur : </span> <br>
    <br>
    Quand le processus MergeBlock rencontre un type de valeur de <span class="opt-name">$Source</span> qui n'est pas supporté en natif, il détermine le TBS Id qui correspond a ce type. Puis il recherche les fonctions utilisateur qui correspondent à ce TBS Id.<br>
    <br>
    <span class="title-1b">Comment déterminer  le TBS Id :</span><br>
    Le TBS Id est une chaine identifiant déterminée par l'argument <span class="opt-name">$Source</span>.<br>
    Si <span class="opt-name">$Source</span> est une chaine =&gt; le  TBS Id est cette chaine.<br>
    Si <span class="opt-name">$Source</span> est une ressource PHP  =&gt; le  TBS Id est le nom du type de ressource.<br>
    Si <span class="opt-name">$Source</span> est un objet =&gt; le  TBS Id est le nom de la classe.<br>
    Pour certaine commodité, si le  TBS Id contient  un espace  (' '), il est coupé. Si le  TBS Id contient  des '-', ils sont remplacés par des  '_'.<br>
    Par exemple, une variable  PHP pour une connexion Sybase a le type  Resource et son nom de ressource est <span class="opt-value">'sybase-db link'</span>. Le TBS Id correspondant est <span class="opt-value">'sybase_db'</span>.<br>
    <br>
    <span class="title-1b">Comment construire le plug-in pour un TBS Id:</span><br>
    Le plug-in est constitué de 3 fonctions utilisateur qui doivent avoir des noms spécifiques.<br>
    Les fonctions qui suivent sont faites pour un TBS Id qui est <span class="opt-value">'tbsid'</span>. Pour un autre TBS Id, il vous suffit de renommer les fonctions.<br>
    Vous trouverez plusieurs exemples de plug-in de base de données sur le <a href="http://www.tinybutstrong.com/plugins.php#plugin_db">site web de TinyButStrong</a>.<br>
    <br>
    Synopsis:<br>
    <br>
    function <span class="tbsname">tbsdb_tbsid_open</span>(&amp;<span class="opt-name">$Source</span>, &amp;<span class="opt-name">$Requête</span>)<br>
    <div class="decal">Cette fonction est appelée une fois par le processus MergeBlock, avant les autres fonctions utilisateur. <br>
      Elle est supposée utiliser <span class="opt-name">$Source</span> et <span class="opt-name">$Requête</span> pour ouvrir un recordset, et retourner une référence sur ce  recordset.<br>
    </div>
    function <span class="tbsname">tbsdb_tbsid_fetch</span>(&amp;<span class="opt-name">$Rs</span> [,<span class="opt-name">$RecNum</span>])<br>
    <div class="decal">Cette fonction est  appelée plusieurs fois par le processus MergeBlock, autant de fois qu'il a y de données à extraire de la requête. <br>
      Cette fonction doit retourner le prochain enregistrement  sous forme d'un tableau associatif  (nom de colonne =&gt; valeur), ou retourner <span class="opt-value">false</span> s'il n'y a plus d'enregistrement.<br>
      <span class="opt-name">$Rs</span> est la valeur fournie par <span class="tbsname">tbsdb_tbsid_open</span>(). C'est communément une référence de  recordset.<br>
      <span class="opt-name">$RecNum</span> peut être utile pour certains types de base de données tel que  Oracle, pour lesquels le numéro de l'enregistrement est requis pour l'extraire. </div>
    function <span class="tbsname">tbsdb_tbsid_close</span>(&amp;<span class="opt-name">$Rs</span>)<br>
    <div class="decal">Cette fonction est appelée une fois par le processus MergeBlock, après les autres fonctions utilisateur. <br>
      Cette fonction doit fermer le recordset de façon appropriée. <br>
      <span class="opt-name">$Rs</span> est la valeur fournie par <span class="tbsname">tbsdb_tbsid_open</span>(). C'est communément une référence de  recordset.</div>
    <br>
    <br>
    <span class="title-1c">Plug-in basé sur un objet :</span> <br>
    <br>
    Quand le processus MergeBlock rencontre une valeur de <span class="opt-name">$Source</span> qui est un objet, et si cet objet a une méthode nommée <span class="tbsname">tbsdb_open()</span>, alors il suppose que l'objet est un plug-in de base de données. <br>
    L'objet doit avoir au moins 3 méthodes <span class="tbsname">tbsdb_open()</span>, <span class="tbsname">tbsdb_fetch()</span> et <span class="tbsname">tbsdb_close()</span>. Il peut y avoir d'autres méthodes et d'autres propriétés, mais ces 3 méthodes doivent avoir la même syntaxe et les mêmes fonctionnalités que els fonctions utilisateur décrites ci-avant.<br>
    <br>
    Synopsis :<br>
    <br>
    class clsTbsPlugin {<br>
    &nbsp;&nbsp;function tbsdb_open(&amp;<span class="opt-name">$Source</span>, &amp;<span class="opt-name">$Requête</span>)<br>
    &nbsp;&nbsp;function tbsdb_fetch(&amp;<span class="opt-name">$Rs</span> [,<span class="opt-name">$RecNum</span>])<br>
    &nbsp;&nbsp;function tbsdb_close(&amp;<span class="opt-name">$Rs</span>)<br>
    }<br>
    <br>
    <br>
    <span class="title-1c">Plug-in basé sur la propriété ObjectRef :<br>
    </span><br>
    Quand le processus MergeBlock rencontre une valeur de <span class="opt-name">$Source</span> qui est une chaine commençant par  '~' alors il suppose que la propriété <span class="opt-name">$TBS-</span>&gt;ObjectRef est un plug-in de base de données basé sur un objet (voir <a href="#php_oop">POO</a>).  L'objet doit avoir les mêmes caractéristiques que le plug-in décrit ce-avant, mais le nom de ses méthodes peuvent être différents.<br>
    <br>
    Exemple : <br>
    <span class="opt-name">$TBS</span>-&gt;MergeBlock(<span class="opt-name">$NomBloc</span>,<span class="opt-value">'~dbkey'</span>,<span class="opt-name">$Requête</span>);<br>
    <br>
    class clsTbsPlugin {<br>
    &nbsp;&nbsp;function dbkey_open(&amp;<span class="opt-name">$Source</span>, &amp;<span class="opt-name">$Requête</span>)<br>
    &nbsp;&nbsp;function dbkey_fetch(&amp;<span class="opt-name">$Rs</span> [,<span class="opt-name">$RecNum</span>])<br>
    &nbsp;&nbsp;function dbkey_close(&amp;<span class="opt-name">$Rs</span>)<br>
    }<br>
    <br>
  </div>
  <h3><a name="plugins_tbs" id="plugins_tbs"></a>Autres plug-ins :</h3>
  <div class="norm"><span class="zone-normal"><span class="versioning">Versioning:  plug-ins are supported since TBS version 3.0.</span><br>
    <br>
    <span class="title-1c">Coding a plug-in using a PHP class:</span><br>
    <br>
    <span class="title-1b">&bull; Plug-in's key:</span><br>
    <br>
    Each plug-in has a plug-in key which is  the name of its Php class. This key must be given to the method <a href="#php_plugin">PlugIn()</a> when you use it. Thus, it is recommended to  define a PHP constant for the plug-in's key (see example below).<br>
    <br>
    </span><span class="title-1b"><span class="zone-normal">&bull; </span>Plug-in events:</span><span class="zone-normal"><br>
    <br>
    A TBS plug-in must be a PHP class which contains one or several specific methods that will be recognized and plugged by TBS. Those specific methods are called plug-in events because they are executed automatically  by TBS when the corresponding event occurs. A TBS plug-in can also have other methods and properties for internal purpose. A TBS plug-in must have at least the OnInstall event.<br>
    <br>
    For example:<br>
    </span>
    <div class="decal txt-code"><span class="opt-html">// TBS plug-in XXX </span><br>
      <span class="opt-name">define</span>(<span class="opt-value">'TBS_XXX'</span>,<span class="opt-value">'clsTbsPlugIng_XXX'</span>); <span class="opt-html">// That is the plug-in's key</span> <br>
      <span class="opt-name">class</span> clsTbsPlugIng_XXX() {<br>
      &nbsp;&nbsp;<span class="opt-name">function</span> OnInstall(...) {...} <span class="opt-html">// That is the OnInstall event</span> <br>
      &nbsp;&nbsp;...<br>
      }</div>
    <span class="zone-normal"><br>
    <br>
    See the PHP file <span class="opt-html">&quot;tbs_plugin_syntaxes&quot;</span> to have all plug-in events, their usage and expected  arguments. There is also a list of supported events at the bottom of this section. <br>
    <br>
    The OnInstall event is special. It has to return an array with all activated events for the current plug-in (see  the PHP file <span class="opt-html">&quot;tbs_plugin_syntaxes&quot;</span>). The OnInstall event  is called when the plug-in is installed at the TBS instance.<br>
    This event can be  called in three situations:<br>
    - When using  method <a href="#php_plugin">PlugIn() </a>with the plug-in's key for the first time.<br>
    - 
    When using method PlugIn() with the plug-in's key and the argument TBS_INSTALL. <br>
    - When a new TBS instance is created,  if the plug-in's key has be added to the global array <span class="opt-name">$_TBS_AutoInstallPlugIns[]</span> (see file <span class="opt-html">&quot;tbs_plugin_syntaxes.php&quot;</span> for more details). <br>
    <br>
    </span><span class="title-1b">Property -&gt;TBS:</span> <br>
    <br>
    As soon as the plug-in is installed on the TBS instance, a property <span class="opt-name"><span class="txt-code">-&gt;TBS</span></span> is automatically  added to the plug-in, its value is a reference to the parent TBS instance. Remember this because this property can be very useful inside the plug-in's code. <br>
    <span class="zone-normal"><br>
    </span><span class="zone-normal"><span class="title-1c">Coding a plug-in using PHP functions: </span></span><br>
    <br>
    The plug-ins' key is a string that you choose and which will be used for naming the function. <span class="zone-normal">It is recommended to  define a PHP constant for the plug-in's key (see example below).</span><br>
    <br>
    The plug-in events are coded using functions, and they names must be the string 'tbspi_', followed by the plug-in's key, followed by '_' and the event's name. <br>
    Example:<br>
    <div class="decal txt-code"><span class="opt-name">define</span>(<span class="opt-value">'TBS_XXX'</span>,<span class="opt-value">'xxx'</span>);<br>
      <span class="opt-name">function</span> tbspi_xxx_OnInstall(...) {...}<br>
      ...</div>
    <br>
    All the rest works like for plug-in coded with a class. You must have at least the event OnInstall created, and it works the same way. <br>
    <br>
    <span class="title-1b">Remark:</span> PHP functions are often faster than methods, but they don't let you having  a -&gt;TBS property to reach the parent TBS instance.<br>
    <br>
    <span class="title-1c">List of plug-in events: </span><br>
    <table border="0" cellpadding="4" cellspacing="0" width="100%">
      <tbody>
        <tr>
          <td width="10" valign="top" class="title-1b">&nbsp;</td>
          <td width="120" class="title-1b">Plug-in Events </td>
          <td class="title-1b">Description</td>
        </tr>
        <tr>
          <td valign="top">&bull;</td>
          <td valign="top">OnInstall</td>
          <td>Executed automatically  when the plug-in is called for the first time, or when PlugIn() method is called with the specific argument for installing. </td>
        </tr>
        <tr>
          <td valign="top">&bull;</td>
          <td valign="top">OnCommand</td>
          <td>Executed when  PlugIn() method is called.    		This is a way to execute any user command specific to the plug-in. </td>
        </tr>
        <tr>
          <td valign="top" width="10">&bull;</td>
          <td valign="top">BeforeLoadTemplate<br></td>
          <td>Executed when  LoadTemplate() method is called. Can cancel TBS basic process. </td>
        </tr>
        <tr>
          <td valign="top" width="10">&bull;</td>
          <td valign="top">AfterLoadTemplate </td>
          <td>Executed at the end of LoadTemplate(). </td>
        </tr>
        <tr>
          <td valign="top">&bull;</td>
          <td valign="top">BeforeShow</td>
          <td>Executed when  Show() method is called. Can cancel TBS basic process. </td>
        </tr>
        <tr>
          <td valign="top">&bull;</td>
          <td valign="top">AfterShow</td>
          <td>Executed at the end of Show(). </td>
        </tr>
        <tr>
          <td valign="top">&bull;</td>
          <td valign="top">OnData</td>
          <td>Executed each time a record of data is retrieved for a MergeBlock() process. (similar to parameter 'ondata' but for every block) </td>
        </tr>
        <tr>
          <td valign="top">&bull;</td>
          <td valign="top">OnFormat</td>
          <td>Executed each time a fields is being merged. (similar to parameter 'onformat' but for every fields) </td>
        </tr>
        <tr>
          <td valign="top">&bull;</td>
          <td valign="top">OnOperation</td>
          <td>Executed each time parameter 'ope' is defined with an unsupported  keyword.</td>
        </tr>
        <tr>
          <td valign="top">&bull;</td>
          <td valign="top">OnCacheField</td>
          <td>Executed each time a field is put in the cache of a Block definition. (<span class="versioning">supported since TBS 3.6.0</span>)</td>
        </tr>
        <tr>
          <td valign="top" width="10">&bull;</td>
          <td valign="top">BeforeMergeBlock</td>
          <td>Executed when    bounds of a block are founded. Can cancel TBS basic process. </td>
        </tr>
        <tr>
          <td valign="top" width="10">&bull;</td>
          <td valign="top">OnMergeSection</td>
          <td>Executed when a section is merged, and before it is added to other sections. </td>
        </tr>
        <tr>
          <td valign="top">&bull;</td>
          <td valign="top">OnMergeGroup</td>
          <td>Executed before a header, a footer or a splitter section is merged. (<span class="versioning">supported since TBS 3.3.0</span>)</td>
        </tr>
        <tr>
          <td valign="top" width="10">&bull;</td>
          <td valign="top">AfterMergeBlock</td>
          <td>Executed just before a merged block is inserted into the template. </td>
        </tr>
        <tr>
          <td valign="top">&bull;</td>
          <td valign="top">OnSpecialVar</td>
          <td>Executed when a non native Special Var Field (like [onshow..now]) is met. </td>
        </tr>
        <tr>
          <td valign="top">&bull;</td>
          <td valign="top">OnMergeField</td>
          <td>Executed on each field met when using the MergeField() method.</td>
        </tr>
      </tbody>
    </table>
    <br>
    <br>
  </div>
  <a name="summaries" id="summaries"></a>
  <h2 class="pagebreak">Résumés :</h2>
  <h3><a name="appendix_field" id="appendix_field"></a>Paramètres de champ TBS :</h3>
  <div class="norm">
    <table width="100%" border="0" cellpadding="5" cellspacing="0">
      <tr class="title-1b">
        <td width="80" align="left" valign="top">Paramètre</td>
        <td align="left" valign="top">Résumé</td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_field_prm_htmlconv" class="opt-name">htmlconv</a></td>
        <td align="left" valign="top"><p>Mode de conversion de caractère pour la valeur du champ.</p></td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_field_prm_dot" class="opt-name">. </a>(point)</td>
        <td align="left" valign="top">Si la valeur du champ est vide, affiche un espace insécable.</td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_field_prm_ifempty" class="opt-name">ifempty</a></td>
        <td align="left" valign="top">Si la valeur du champ est vide, affiche une autre valeur.</td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_field_prm_att" class="opt-name">att</a></td>
        <td align="left" valign="top">Déplace le champ dans un attribut de balise XML/HTML.</td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_field_prm_attadd" class="opt-name">&nbsp;&nbsp;&nbsp;attadd</a></td>
        <td align="left" valign="top">S'utilise avec <span class="opt-name">att</span>. Indique que la valeur fusionnée doit être ajoutée à la valeur de l'attribut.</td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_field_prm_attadd" class="opt-name">&nbsp;&nbsp;&nbsp;</a><a href="#html_field_prm_atttrue" class="opt-name">atttrue</a></td>
        <td align="left" valign="top">S'utilise  with <span class="opt-name">att</span>. Indique que l'attribut cible doit être géré comme un attribut booléen.</td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_field_prm_magnet" class="opt-name">magnet</a></td>
        <td align="left" valign="top">Si la valeur du champ est vide, supprime des balises proches.</td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_field_prm_attadd" class="opt-name">&nbsp;&nbsp;&nbsp;</a><a href="#html_field_prm_mtype" class="opt-name">mtype</a></td>
        <td align="left" valign="top">S'utilise avec<a href="#html_field_prm_magnet" class="opt-name"> magnet</a>.</td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_field_prm_if" class="opt-name">if</a></td>
        <td align="left" valign="top">Si la condition est vérifiée, change la valeur affichée.</td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_field_prm_attadd" class="opt-name">&nbsp;&nbsp;&nbsp;</a><a href="#html_field_prm_then" class="opt-name">then</a></td>
        <td align="left" valign="top">S'utilise avec <span class="opt-name">if</span>.</td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_field_prm_attadd" class="opt-name">&nbsp;&nbsp;&nbsp;</a><a href="#html_field_prm_else" class="opt-name">else</a></td>
        <td align="left" valign="top">S'utilise avec <span class="opt-name">if</span>.</td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_field_prm_onformat" class="opt-name">onformat</a></td>
        <td align="left" valign="top">Exécute une fonction Php de l'utilisateur qui modifie la fusion du champ.</td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_field_prm_frm" class="opt-name">frm</a></td>
        <td align="left" valign="top">Applique un format date-heure ou numérique. </td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_field_prm_tplfrms" class="opt-name">tplfrms</a></td>
        <td align="left" valign="top">S'utilise avec des champs <span class="opt-name"></span><span class="opt-name">onload </span>uniquement. Définie des formats de modèle.</td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_field_prm_tplvars" class="opt-name">tplvars</a></td>
        <td align="left" valign="top">S'utilise avec des champs <span class="opt-name"></span><span class="opt-name">onload </span>uniquement. Définie des variables de modèle.</td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_field_prm_protect" class="opt-name">protect</a></td>
        <td align="left" valign="top">Mode de protection sur les caractères '['.</td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_field_prm_comm" class="opt-name">comm</a></td>
        <td align="left" valign="top">Étend les limites du champ à la balise commentaire qui l'entoure.</td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_field_prm_noerr" class="opt-name">noerr</a></td>
        <td align="left" valign="top">Empêche l'affichage de certaines erreurs TBS.</td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_field_prm_file" class="opt-name">file</a></td>
        <td align="left" valign="top">Insert le contenu du fichier.</td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_field_prm_script" class="opt-name">script</a></td>
        <td align="left" valign="top">Exécute le script Php.</td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_field_prm_attadd" class="opt-name">&nbsp;&nbsp;&nbsp;</a><a href="#html_field_prm_getbody" class="opt-name">getbody</a></td>
        <td align="left" valign="top">S'utilise  avec <span class="opt-name">file</span> ou <span class="opt-name">script</span>. Insert seulement une partie du sous-modèle. </td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_field_prm_attadd" class="opt-name">&nbsp;&nbsp;&nbsp;</a><a href="#html_field_prm_rename" class="opt-name">rename</a></td>
        <td align="left" valign="top">S'utilise  avec <span class="opt-name">file</span> ou <span class="opt-name">script</span>. Renome des blocs et des champs TBS dans un sous-modèle. </td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_field_prm_attadd" class="opt-name">&nbsp;&nbsp;&nbsp;</a><a href="#html_field_prm_subtpl" class="opt-name">subtpl</a></td>
        <td align="left" valign="top">S'utilise  avec <span class="opt-name">script</span> ou <span class="opt-name">onformat</span>. Passe l'instance TBS en mode Sous-modèle. </td>
      </tr>
    </table>
  </div>
  <h3><a name="appendix_block" id="appendix_block"></a>Paramètres de bloc TBS :</h3>
  <div class="norm">
    <table width="100%" border="0" cellpadding="5" cellspacing="0">
      <tr class="title-1b">
        <td width="80" align="left" valign="top">Paramètre</td>
        <td align="left" valign="top">Résumé</td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_block_prm_block" class="opt-name">block</a></td>
        <td align="left" valign="top">Défini les limites du bloc.</td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_block_prm_nodata" class="opt-name">nodata</a></td>
        <td align="left" valign="top">Désigne la section qui s'affiche lorsqu'il n'y a aucun enregistrement dans la source de données.</td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_block_prm_headergrp" class="opt-name">headergrp</a></td>
        <td align="left" valign="top">Désigne une section d'entête qui sera affichée lorsque la valeur d'une colonne change.</td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_block_prm_footergrp" class="opt-name">footergrp</a></td>
        <td align="left" valign="top">Désigne une section de pied qui sera affichée lorsque la valeur d'une colonne change.</td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_block_prm_splittergrp" class="opt-name">splittergrp</a></td>
        <td align="left" valign="top">Désigne une section de séparation qui sera affichée lorsque la valeur d'une colonne change.</td>
      </tr>
      <tr id="v202_parentgrp_sum">
        <td align="left" valign="top"><a href="#html_block_prm_parentgrp" class="opt-name">parentgrp</a></td>
        <td align="left" valign="top">Désigne une section  parent qui sera affichée lorsque la valeur d'une colonne change.</td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_block_prm_serial" class="opt-name">serial</a></td>
        <td align="left" valign="top">Désigne une section qui contient une série de plusieurs enregistrements.</td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_block_prm_p1" class="opt-name">p1</a></td>
        <td align="left" valign="top">Envoie un paramètre à la requête dynamique de la source de données.</td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_block_prm_sub1" class="opt-name">sub1</a></td>
        <td align="left" valign="top">Définie la colonne contenant les données pour un sous-bloc automatique.</td>
      </tr>
      <tr id="v205_ondata_sum">
        <td align="left" valign="top"><a href="#html_block_prm_ondata" class="opt-name">ondata</a></td>
        <td align="left" valign="top">Exécute une fonction Php de l'utilisateur pour  modifier l'
          
          
          l'enregistrement
          
          lorsqu'il vient juste d'être récupérer de la source de données.</td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_block_prm_when" class="opt-name">when</a></td>
        <td align="left" valign="top">S'utilise avec <span class="opt-name"></span><span class="opt-name">onload </span>ou <span class="opt-name">onshow</span>. Affiche la section quand la condition est vérifiée.</td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_field_prm_attadd" class="opt-name">&nbsp;&nbsp;&nbsp;</a><a href="#html_block_prm_default" class="opt-name">default</a></td>
        <td align="left" valign="top">S'utilise avec <span class="opt-name"></span><span class="opt-name">onload </span>ou <span class="opt-name">onshow</span>. Affiche la section quand aucune condition n'est vérifiée.</td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_field_prm_attadd" class="opt-name">&nbsp;&nbsp;&nbsp;</a><a href="#html_block_prm_several" class="opt-name">several</a></td>
        <td align="left" valign="top">S'utilise avec <span class="opt-name"></span><span class="opt-name">when</span>. Indique que plusieurs sections du groupe peuvent être affichées.</td>
      </tr>
    </table>
  </div>
  <h3><a name="appendix_specialname" id="appendix_specialname"></a>Noms de blocs et champs spéciaux :</h3>
  <div class="norm">
    <table border="0" cellpadding="5" cellspacing="0">
      <tr class="title-1b">
        <td width="140" align="left" valign="top">Nom</td>
        <td align="left" valign="top">Résumé</td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_field_prm_if" class="opt-name">val</a></td>
        <td align="left" valign="top">Le mot-clé [val] peut être utilisé dans des paramètres de champs pour représenter la valeur de ce champ.</td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#php_mergeblock_counting" class="opt-name">#</a></td>
        <td align="left" valign="top">Colonne virtuelle pour un bloc. Affiche le numéro de l'enregistrement en cours.</td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#php_mergeblock_counting" class="opt-name">$</a></td>
        <td align="left" valign="top">Colonne virtuelle pour un bloc. Affiche la clé de l'enregistrement en cours si la source de données est un tableau Php.</td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_field_auto" class="opt-name">onload</a></td>
        <td align="left" valign="top">Champ ou bloc automatique, fusionné lorsque le modèle est chargé.</td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_field_auto" class="opt-name">onshow</a></td>
        <td align="left" valign="top">Champ ou bloc automatique, fusionné lorsque le modèle est affiché.</td>
      </tr>
      <tr>
        <td align="left" valign="top"><a href="#html_field_auto" class="opt-name">var</a></td>
        <td align="left" valign="top">Champ automatique encapsulé.</td>
      </tr>
    </table>
  </div>
  <div align="center">
    <div class="asciiart"> .:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:</div>
  </div>
</div>
</body>
</html>
